(in-package :mwm)

(defparameter *object-features*
  '(((:shape . square) (:shape . triangle) (:shape . circle) (:shape . rectangle))
    ((:color . red) (:color . green) (:color . blue))
    ((:size . small) (:size . medium) (:size . large))
    ((:material . shiny) (:material . matte))
    ((:x-position . left) (:x-position . middle) (:x-position . right))
    ((:y-position . bottom) (:y-position . middle) (:y-position . top))))

(defparameter *all-unique-objects*
  (apply #'combinations *object-features*))

(defun sample-random-objects (n)
  (random-elts *all-unique-objects* n))

(defgeneric feature->value (channel feature))

(defmethod feature->value ((channel (eql :x-pos)) (feature (eql 'left)))
  (random-from-range 0 100))
(defmethod feature->value ((channel (eql :x-pos)) (feature (eql 'middle)))
  (random-from-range 200 300))
(defmethod feature->value ((channel (eql :x-pos)) (feature (eql 'right)))
  (random-from-range 400 500))
(defmethod feature->value ((channel (eql :y-pos)) (feature (eql 'bottom)))
  (random-from-range 0 100))
(defmethod feature->value ((channel (eql :y-pos)) (feature (eql 'middle)))
  (random-from-range 200 300))
(defmethod feature->value ((channel (eql :y-pos)) (feature (eql 'top)))
  (random-from-range 300 500))
(defmethod feature->value ((channel (eql :width-height)) (feature (eql 'small)))
  (random-from-range 0 100))
(defmethod feature->value ((channel (eql :width-height)) (feature (eql 'medium)))
  (random-from-range 150 250))
(defmethod feature->value ((channel (eql :width-height)) (feature (eql 'large)))
  (random-from-range 300 400))
(defmethod feature->value ((channel (eql :mean-rgb)) (feature (eql 'red)))
  (list (random-from-range 200 255)
        (random-from-range 0 50)
        (random-from-range 0 50)))
(defmethod feature->value ((channel (eql :mean-rgb)) (feature (eql 'green)))
  (list (random-from-range 0 50)
        (random-from-range 200 255)
        (random-from-range 0 50)))
(defmethod feature->value ((channel (eql :mean-rgb)) (feature (eql 'blue)))
  (list (random-from-range 0 50)
        (random-from-range 0 50)
        (random-from-range 200 255)))
(defmethod feature->value ((channel (eql :stdev-rgb)) (feature (eql 'shiny)))
  (loop repeat 3 collect (random-from-range 1.0 2.5)))
(defmethod feature->value ((channel (eql :stdev-rgb)) (feature (eql 'matte)))
  (loop repeat 3 collect (random-from-range 0.0 0.8)))
(defmethod feature->value ((channel (eql :nr-of-sides)) shape-feature)
  (case shape-feature
    (square 4)
    (triangle 3)
    (circle 10)
    (rectangle 4)))
(defmethod feature->value ((channel (eql :nr-of-corners)) shape-feature)
  (case shape-feature
    (square 4)
    (triangle 3)
    (circle 0)
    (rectangle 4)))

(defgeneric scale-channel (channel value))

(defmethod scale-channel ((channel (eql :x-y-pos)) value)
  (float (/ value 500)))
(defmethod scale-channel ((channel (eql :width-height)) value)
  (float (/ value 400)))
(defmethod scale-channel ((channel (eql :area)) value)
  (let ((max-area (* 400 400)))
    (float (/ value max-area))))
(defmethod scale-channel ((channel (eql :mean-color)) value)
  (loop for c in value collect (float (/ c 255))))
(defmethod scale-channel ((channel (eql :stdev-color)) value)
  ;; how to scale stdev?
  value)
(defmethod scale-channel ((channel (eql :nr-of-sides)) value)
  (float (/ value 10)))
(defmethod scale-channel ((channel (eql :nr-of-corners)) value)
  (float (/ value 4)))

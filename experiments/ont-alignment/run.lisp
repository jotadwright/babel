(ql:quickload :ont-alignment)
(in-package :ont-alignment)

(defparameter *experiment*
  (make-instance 'ont-alignment-experiment))

(run-interaction *experiment*)

;(execute-postmodern-query '(:select (:count actor) (:avg year) :from actorsfilms))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:in actor (:set "Gérard Depardieu" "Fred Astaire"))))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:not (:in actor (:set "Gérard Depardieu" "Fred Astaire")))))
;(execute-postmodern-query '(:select actor (:count film) :from actorsfilms :group-by actor :having (:> (:count film) 100)))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:and (:= actor "Gerard Depardieu") (:<= rating 5))))
;(execute-postmodern-query '(:select actor (:count film) :from actorsfilms :group-by actor :having (:between (:count film) 100 101)))

;; '(:select actor film :from actorsfilms)
'((comma ?fields ?first-field ?second-field)
  (bind field ?first-field actor)
  (bind field ?second-field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms))

;; '(:select actor film year :from actorsfilms)
'((comma ?fields ?first-field ?second-field ?third-field)
  (bind field ?first-field actor)
  (bind field ?second-field film)
  (bind field ?third-field year)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms))

;; '(:select (:count actor) :from actorsfilms)
'((aggregate ?aggregate-clause ?aggregator ?field)
  (bind aggregator ?aggregator count)
  (bind field ?field actor)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms))

;; '(:select film :from actorsfilms :where (:= actor "Gerard Depardieu"))
'((bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (equals ?filter-condition ?field-2 ?comparator)
  (bind field ?field-2 actor)
  (bind concept ?comparator "Gerard Depardieu"))

;; '(:select film :from actorsfilms :where (:in actor (:set "Gerard Depardieu" "Fred Astaire")))
'((bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (in ?filter-condition ?field-2 ?set-condition)
  (bind field ?field-2 actor)
  (set-keyword ?set-condition ?set-values)
  (bind set ?set-values (set "Gérard Depardieu" "Fred Astaire")))

;; '(:select film :from actorsfilms :where (:not (:in actor (:set "Gerard Depardieu" "Fred Astaire")))))
'((bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (not-in ?filter-condition ?field-2 ?set-clause)
  (bind field ?field-2 actor)
  (set-keyword ?set-clause ?set-values)
  (bind set ?set-values ("Gérard Depardieu" "Fred Astaire")))


;; '(:select actor (:count film) :from actorsfilms :group-by actor :having (:> (:count film) 100))
'((aggregate ?aggregate-clause ?aggregator ?field)
  (bind aggregator ?aggregator count)
  (bind field ?field actor)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (group-by ?group-by-clause ?field-2 ?having-clause)
  (bing field ?field-2 actor)
  (having ?having-clause ?filter-condition)
  (superior ?filter-condition ?aggregate-clause-2 ?comparator)
  (aggregate ?aggregate-clause-2 ?aggregator-2 ?field-3)
  (bind aggregator ?aggregator-2)
  (bind concept ?comparator 100)
  (bind aggregator ?aggregator-2 count))


;; '(:select actor (:count film) :from actorsfilms :group-by actor :having (:between (:count film) 100 101))
'((aggregate ?aggregate-clause ?aggregator ?field)
  (bind aggregator ?aggregator count)
  (bind field ?field actor)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (group-by-keyword ?group-by-clause ?field-2 ?having-clause)
  (bing field ?field-2 actor)
  (having ?having-clause ?filter-condition)
  (between ?filter-condition ?aggregate-clause-2 ?lower-bound ?higher-bound)
  (aggregate ?aggregate-clause-2 ?aggregator-2 ?field-3)
  (bind aggregator ?aggregator-2)
  (bind concept ?lower-bound 100)
  (bind concept ?higher-bound 101)
  (bind aggregator ?aggregator-2 count))

;; '(:select film :from actorsfilms :where (:and (:= actor "Gerard Depardieu") (:<= rating 5)))
'((bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (and-keyword ?filter-condition ?condition-1 ?condition-2)
  (equals ?condition-1 ?field-2 ?comparator)
  (inferior ?condition-2 ?field-3 ?comparator-2)
  (bind field ?field-2 actor)
  (bind field ?field-3 rating)
  (bind concept ?comparator "Gerard Depardieu")
  (bind concept ?comparator-2 5))


;(postmodern::disconnect-toplevel)
;(postmodern::connect-toplevel "db3_actors_films_multiple_tables.db" "postgres" "postgres" "localhost")

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:= actors.actor "Gerard Depardieu")))
'((aggregate ?aggregate-clause ?aggregator ?field)
  (bind aggregator ?aggregator count)
  (bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2 ?where-clause)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field-2 ?comparator)
  (dot ?field-2 ?table ?column)
  (bind column ?column film_id)
  (dot ?comparator ?table-2 ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3 ?where-clause)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-3 ?comparator-2)
  (dot ?field-3 ?table-2 ?column-3)
  (dot ?comparator-2 ?column-4 ?table-3)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-clause ?filter-condition)
  (equals ?filter-condition ?field-4 ?comparator-3)
  (dot ?field-4 ?table-3 ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator-3 "Gerard Depardieu"))
  

;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:and (:= actors.actor "Gerard Depardieu") (:= films.year 1996))))
'((bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2 ?where-clause)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field-2 ?comparator)
  (dot ?first-field ?table ?column)
  (bind column ?column film_id)
  (dot ?second-field ?table-2 ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3 ?where-clause)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-3 ?comparator-2)
  (dot ?field-3 ?table-2 ?column-3)
  (dot ?comparator-2 ?column-4 ?table-3)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-clause ?filter-condition ?filter-conditions)
  (and-keyword ?filter-conditions ?first-condition ?second-condition)
  (equals ?first-condition ?field-4 ?comparator-3)
  (dot ?field-4 ?table-3 ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator-3 "Gerard Depardieu")
  (equals ?second-condition ?field-5 ?comparator-4)
  (dot ?field-5 ?table ?column-6)
  (bind column ?column-6 year)
  (bind concept ?comparator-4 1996))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:and (:like actors.actor "Jean%") (:> films.year 2020))))
'((bind field ?field film)
  (select ?result ?aggregate-clause ?field ?fields ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?fields ?inner-join-clause-2 ?where-clause)
  (bind table ?table-2 actorfilm_relations)
  (equals ?fields ?field-2 ?comparator)
  (dot ?field-2 ?table ?column)
  (bind column ?column film_id)
  (dot ?comparator ?table-2 ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?fields ?inner-join-clause-3 ?where-clause)
  (bind table ?table-3 actors)
  (equals ?fields-2 ?field-3 ?comparator-2)
  (dot ?field-3 ?column-3 ?table-2)
  (dot ?comparator-2 ?table-3 ?column-4)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-clause ?filter-condition ?filter-conditions)
  (and-keyword ?filter-conditions ?condition-1 ?condition-2)
  (like ?condition-1 ?field-4 ?comparator-3)
  (dot ?field-4 ?table-3 ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator-3 "Jean%")
  (equals ?condition-2 ?field-5 ?comparator-4)
  (dot ?field-5 ?table ?column-6)
  (bind column ?column-6 year)
  (bind concept ?comparator-4 2020))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:in actors.actor (:set "Gerard Depardieu" "Fred Astaire")) :group-by films.film :having (:> (:avg films.rating) 7.5)))
'((bind column ?column film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2 ?where-clause)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field ?comparator)
  (dot ?field ?table ?column)
  (bind field ?column film_id)
  (dot ?comparator ?table-2 ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3 ?where-clause-2)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-2 ?comparator-2)
  (dot ?field-2 ?column-3 ?table-2)
  (dot ?comparator-2 ?column-4 ?table-3)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-clause-2 ?filter-condition ?filter-conditions)
  (in ?filter-condition ?field ?set-clause)
  (set-keyword ?set-clause ?set-values)
  (bind set ?set-values ("Gerard Depardieu" "Fred Astaire"))
  (group-by-keyword ?group-by-clause ?field-3 ?having-clause)
  (dot ?field-3 ?table ?column)
  (having ?having-clause ?filter-condition-2)
  (superior ?filter-condition-2 ?aggregate-clause-2 ?comparator)
  (average ?aggregate-clause-2 ?aggregator-2 ?filed-4)
  (bind aggregator ?aggregator-2 avg)
  (dot ?field-4 ?table ?column-5)
  (bind field ?column-5 rating)
  (bind concept ?comparator 7.5))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:or (:in actors.actor (:set "Gerard Depardieu" "Fred Astaire")) (:not (:like actors.actor "Brigitte"))) :group-by films.film :having (:> (:avg films.rating) 9)))
'((bind column ?column film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2 ?where-clause)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field ?comparator)
  (dot ?field ?table ?column-2)
  (bind column ?column-2 film_id)
  (dot ?comparator ?table-2 ?column-3)
  (bind column ?column-3 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3 ?where-clause-2)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-2 ?comparator-2)
  (dot ?field-2 ?column-4 ?table-2)
  (dot ?comparator-2 ?column-5 ?table-3)
  (bind column ?column-4 actor_id)
  (bind column ?column-5 actor_id)
  (where ?where-clause-2 ?filter-condition ?filter-conditions)
  (or-keyword ?filter-condition ?condition-1 ?condition-2)
  (in ?condition-1 ?field-6 ?set-clause)
  (dot ?field-6 ?table-3 ?column-6)
  (bind column ?column-name actor)
  (set-keyword ?set-clause ?set-values)
  (bind set ?set-values ("Gerard Depardieu" "Fred Astaire"))
  (not-keyword ?condition-2 ?like-clause)
  (like ?like-clause ?field-6 ?comparator)
  (bind concept ?comparator "Brigitte")
  (group-by-keyword ?group-by-clause ?field7 ?having-clause)
  (dot ?field-7 ?table ?column)
  (having ?having-clause ?filter-condition)
  (superior ?filter-condition ?aggregate-clause ?comparator-2)
  (aggregate ?aggregate-clause ?field-8)
  (bind aggregate ?aggregator avg)
  (dot ?field-8 ?table ?column-7)
  (bind column ?column-7 rating)
  (bind concept ?comparator-2 9))


;;round


;;max


;;min


;;sum


;;null


;;not null


 
(ql:quickload :ont-alignment)
(in-package :ont-alignment)

(defparameter *experiment*
  (make-instance 'ont-alignment-experiment))

(run-interaction *experiment*)


;(connect-toplevel "db2_actors_films_simple_table.db" "postgres" "postgres" "localhost")

;(type-of (execute-postmodern-query '(:select actor film :from actorsfilms)))

;(execute-postmodern-query '(:select (:count film) :from actorsfilms :where (:= actor "Gerard Depardieu")))

;(execute-postmodern-query '(:select (:count actor) (:avg year) :from actorsfilms))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:in actor (:set "Gérard Depardieu" "Fred Astaire"))))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:not (:in actor (:set "Gérard Depardieu" "Fred Astaire")))))
;(execute-postmodern-query '(:select actor (:count film) :from actorsfilms :group-by actor :having (:> (:count film) 100)))
;(execute-postmodern-query '(:select actor film :from actorsfilms :where (:and (:= actor "Gerard Depardieu") (:<= rating 2.5))))
;(execute-postmodern-query '(:select actor (:count film) :from actorsfilms :group-by actor :having (:between (:count film) 100 101)))

(execute-postmodern-query '(:select actor_id :from actors :where (:in actor (:set "Gerard Depardieu" "Fred Astaire" "Brigitte Bardot"))))

;; '(:select actor film :from actorsfilms)
(defparameter *first-test*
  '((concatenate ?columns ?column-1 ?comma ?column-2)
    (bind column ?column-1 actor)
    (bind column ?column-2 film)
    (select ?result ?aggregate-clause ?aggregate-clauses ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
    (bind table ?table actorsfilms)))

;(ql:quickload :irl)
;(irl:draw-irl-program *first-test* :open t)

;; '(:select actor film year :from actorsfilms)
(defparameter *second-test*
  '((concatenate ?columns ?column-1 ?comma ?column-2 ?comma ?column-3)
    (bind concatenator ?comma ,)
    (bind column ?column-1 actor)
    (bind column ?column-2 film)
    (bind column ?column-3 year)
    (select ?result ?aggregate-clause ?aggregate-clauses ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
    (bind table ?table actorsfilms)))

;(irl:draw-irl-program *second-test* :open t)

;; '(:select (:count actor) :from actorsfilms)
'((aggregate ?aggregate-clause ?aggregator ?column)
  (bind aggregator ?aggregator count)
  (bind column ?column actor)
  (select ?result ?aggregate-clause ?aggregate-clauses ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
  (bind table ?table actorsfilms))

;; '(:select (:count actor) (:avg year) :from actorsfilms)
(defparameter *fourth-test*
              '((concatenate ?aggregate-clauses ?aggregate-clause-1 ?comma ?aggregate-clause-2)
                (bind concatenator ?comma ",")
                (aggregate ?aggregate-clause-1 ?aggregator-1 ?column-1)
                (aggregate ?aggregate-clause-2 ?aggregator-2 ?column-2)
                (bind aggregator ?aggregator-1 count)
                (bind aggregator ?aggregator-2 avg)
                (bind column ?column-1 actor)
                (bind column ?column-2 year)
                (select ?result ?aggregate-clause ?aggregate-clauses ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
                (bind table ?table actorsfilms)))

;(irl:draw-irl-program *fourth-test* :open t)
;;max
;;min

;; '(:select film :from actorsfilms :where (:= actor "Gerard Depardieu"))
'((bind column ?column film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (equals ?filter-condition ?column-2 ?comparator)
  (bind column ?column-2 actor)
  (bind concept ?comparator "Gerard Depardieu"))

;; '(:select film :from actorsfilms :where (:in actor (:set "Gerard Depardieu" "Fred Astaire")))
'((bind column ?column film)
  (select ?result ?aggregate-clause ?aggregate-clauses ?column ?columns ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (in ?filter-condition ?column-2 ?set-condition)
  (bind column ?column-2 actor)
  (set-keyword ?set-condition ?set-values)
  (bind set ?set-values (set "Gérard Depardieu" "Fred Astaire")))

;; '(:select film :from actorsfilms :where (:not (:in actor (:set "Gerard Depardieu" "Fred Astaire")))))
'((bind column ?column film)
  (select ?result ?aggregate-clause ?aggregate-clauses ?column ?columns ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (not-in ?filter-condition ?column-2 ?set-clause)
  (bind column ?column-2 actor)
  (set-keyword ?set-clause ?set-values)
  (bind set ?set-values ("Gérard Depardieu" "Fred Astaire")))

;; est-ce un on-equals ou bien un equals
;; si c'est un equals il faut trouver une autre notation pour les arguments

;; '(:select actor (:count film) :from actorsfilms :group-by actor :having (:> (:count film) 100))
'((aggregate ?aggregate-clause ?aggregator ?column-1)
  (bind aggregator ?aggregator count)
  (bind column ?column-1 actor)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where-clause ?group-by-clause ?inner-join-clause)
  (bind table ?table actorsfilms)
  (group-by ?group-by-clause ?column-2 ?having-clause)
  (bing column ?column-2 film)
  (having ?having-clause ?filter-condition)
  (superior ?filter-condition ?aggregate-clause-2 ?comparator) ;bigger-than
  (aggregate ?aggregate-clause-2 ?aggregator-2 ?column-2)
  (bind concept ?comparator 100)
  (bind aggregator ?aggregator-2 count))


;; '(:select actor (:count film) :from actorsfilms :group-by actor :having (:between (:count film) 100 101))
'((aggregate ?aggregate-clause ?aggregator ?column)
  (bind aggregator ?aggregator count)
  (bind column ?column-1 actor)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
  (bind table ?table actorsfilms)
  (group-by ?group-by ?column-2 ?having-clause)
  (bing column ?column-2 actor)
  (having ?having-clause ?filter-condition)
  (between ?filter-condition ?aggregate-clause-2 ?lower-bound ?higher-bound)
  (aggregate ?aggregate-clause-2 ?aggregator-2 ?column-2)
  (bind concept ?lower-bound 100)
  (bind concept ?higher-bound 101)
  (bind aggregator ?aggregator-2 count))

;; '(:select film :from actorsfilms :where (:and (:= actor "Gerard Depardieu") (:<= rating 5)))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where-clause ?group-by ?inner-join-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition)
  (and ?filter-condition ?condition-1 ?condition-2)
  (equals ?condition-1 ?column-2 ?comparator)
  (inferior ?condition-2 ?column-3 ?comparator-2)
  (bind column ?column-2 actor)
  (bind column ?column-3 rating)
  (bind concept ?comparator "Gerard Depardieu")
  (bind concept ?comparator-2 5))



;(postmodern::disconnect-toplevel)
;(postmodern::connect-toplevel "db1_films_years.db" "postgres" "postgres" "localhost")

;; (execute-postmodern-query '(:select film :from films :inner-join years :on (:= films.film_id years.film_id) :where (:= years.year 2021)))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column-1 ?columns ?table-1 ?where-clause ?group-by ?inner-join-clause)
  (bind table ?table-1 films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (equals ?equal-fields ?field-1 ?comparator-1)
  (bind concatenator ?dot ".")
  (dot ?field-1 ?column-2 ?table-1)
  (bind column ?column-2 film_id)
  (concatenate ?comparator-1 ?column-2 ?dot ?table-2)
  (bind table ?table-2 years)
  (where ?where-clause ?filter-condition-1)
  (equals ?filter-condition-1 ?field-2 ?comparator-2)
  (concatenate ?field-2 ?column-3 ?dot ?table-2)
  (bind concept ?comparator-2 2021))

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:between years.year 1915 1916)))
'((aggregate ?aggregate-clause ?aggregator-1 ?column-2)
  (bind aggregator ?aggregator-1 count)
  (bind column-2 ?column film)
  (select ?result ?aggregate-clause ?column-1 ?columns ?table-1 ?where-clause ?group-by ?inner-join-clause)
  (bind table-1 ?table-1 films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (bind table ?table-2 years)
  (equals ?equal-fields ?field-1 ?comparator-1)
  (bind concatenator ?dot ".")
  (concatenate ?field-1 ?column-2 ?dot ?table-1)
  (bind column ?column-2 film_id)
  (dot ?comparator-1 ?column-2 ?table-2)
  (bind table ?table-2 years)
  (where ?where-clause ?filter-condition-1)
  (between ?filter-condition-1 ?field-2 ?lower-bound ?higher-bound)
  (concatenate ?field-2 ?column-3 ?dot ?table-2)
  (bind concept ?lower-bound 1915)
  (bind concept ?higher-bound 1916))

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:and (:between years.year 1915 1920) (:not (:= years.year 1917)) (:not (:= years.year 1918)))))
'((aggregate ?aggregate-clause ?aggregator ?column-1)
  (bind aggregator ?aggregator count)
  (bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table-1 ?where-clause ?group-by ?inner-join-clause)
  (bind table ?table-1 films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (equals ?equal-fields ?field-1 ?comparator-1)
  (bind concatenator ?dot ".")
  (concatenate ?field-1 ?column-2 ?dot ?table-1)
  (bind column ?column-2 film_id)
  (concatenate ?comparator-1 ?column-2 ?dot ?table-2)
  (bind table ?table-2 years)
  (where ?where-clause ?filter-condition-1)
  (and ?filter-condition-1 ?condition-1 ?condition-2 ?condition-3)
  (between ?condition-1 ?field-2 ?lower-bound ?higher-bound)
  (concatenate ?field-2 ?column-3 ?dot ?table-2)
  (bind concept ?lower-bound 1915)
  (bind concept ?higher-bound 1916)
  (not ?condition-2 ?subset-1)
  (equals ?subset-1 ?field-2 ?comparator-2)
  (bound concept ?comparator-2 1917)
  (not ?condition-3 ?subset-2)
  (equals ?subset-2 ?field-2 ?comparator-3)
  (bind concept ?comparator-3 1918))

;; (execute-postmodern-query '(:select (:distinct films.film) years.year :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:= films.actor "Gerard Depardieu")))

'((concatenate ?fields ?distinct-clause ?field-2)
  (distinct ?distinct-clause ?field-1)
  (concatenate ?field-2 ?table-2 ?dot ?column-2)
  (concatenate ?field-1 ?table-1 ?dot ?column-1)
  (bind concatenator ?dot ".")
  (bind table ?table-1 films)
  (bind column ?column-1 film)
  (bind table ?table-2 years)
  (bind column ?column-2 year)
  (select ?result ?aggregate-clause-1 ?field ?fields ?table-1 ?where-clause ?inner-join-clause-1 ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?field-3 ?field-4 ?inner-join-clause-2)
  (concatenate ?field-3 ?table-1 ?dot ?column-3)
  (concatenate ?field-4 ?table-2 ?dot ?column-4)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-conditions)
  (equals ?filter-condition-1 ?field-5 ?comparator)
  (concatenate ?field-5 ?table-1 ?dot ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator "Gerard Depardieu"))

;; (execute-postmodern-query '(:select (:count (:distinct films.film)) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:= films.actor "Gerard Depardieu")))
'((aggregate ?aggregate-clause ?aggregator-1 ?distinct-clause)
  (bind aggregator ?aggregator-1 count)
  (distinct ?distinct-clause ?field-1)
  (concatenate ?field-1 ?table-1 ?dot ?column-1)
  (bind concatenator ?dot ".")
  (bind table ?table-1 films)
  (bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?field ?fields ?table-1 ?where-clause ?inner-join-clause-1 ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?field-3 ?field-4 ?inner-join-clause-2)
  (concatenate ?field-3 ?table-1 ?dot ?column-3)
  (concatenate ?field-4 ?table-2 ?dot ?column-4)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-conditions)
  (equals ?filter-condition-1 ?field-5 ?comparator)
  (concatenate ?field-5 ?table-1 ?dot ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator "Gerard Depardieu"))

  
;; SELECT film FROM films INNER JOIN films.actor_id = years.actor_id WHERE actor = "Gerard Depardieu" OR actor "Brigitte Bardot" AND year = 1999
;;"and" takes always over "or"
;;(execute-postmodern-query '(:select film :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:and (:or (:= actor "Gerard Depardieu") (:= actor "Brigitte Bardot")) (:= year "1999"))))
'((bind column ?field-1 film)
  (select ?result ?aggregate-clause-1 ?field-1 ?fields ?table-1 ?where-clause ?inner-join-clause-1 ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?field-2 ?field-3 ?inner-join-clause-2)
  (bind concatenator ?dot ".")
  (concatenate ?field-2 ?table-1 ?dot ?column-1)
  (concatenate ?field-3 ?table-2 ?dot ?column-2)
  (bind table ?table-2 years)
  (bind column ?column-1 actor_id)
  (bind column ?column-2 actor_id)
  (where ?where-clause ?filter-condition-1 ?combination-1)
  (and ?combination-1 ?combination-2 ?filter-condition-2)
  (or ?combination-2 ?combination-3 ?filter-condition-3 ?filter-condition-4)
  (equals ?filter-condition-2 ?field-4 ?comparator-1)
  (concatenate ?field-4 ?table-1 ?dot ?column-3)
  (bind column ?column-3 actor)
  (bind concept ?comparator-1 "Gerard Depardieu")
  (equals ?filter-condition-3 ?field-4 ?comparator-2)
  (bind concept ?comparator-2 "Brigitte Bardot")
  (equals ?filter-condition-2 ?field-6 ?comparator-3)
  (concatenate ?field-6 ?table-2 ?dot ?column-4)
  (bind column ?column-4 year)
  (bind concept ?comparator-3 1999))


;;SELECT film FROM films INNER JOIN films.actor_id = years.actor_id WHERE actor = "Gerard Depardieu" AND year = 1999 AND film LIKE "Th%"
;;(execute-postmodern-query '(:select film :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:and (:and (:= actor "Gerard Depardieu") (:= year 1999)) (:like film "The%"))))

'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?column-1 ?columns ?field-1 ?fields ?table-1 ?where-clause ?inner-join-clause-1 ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?field-2 ?field-3 ?inner-join-clause-2)
  (bind concatenator ?dot ".")
  (concatenate ?field-2 ?table-1 ?dot ?column-1)
  (concatenate ?field-3 ?table-2 ?dot ?column-2)
  (bind table ?table-2 years)
  (bind column ?column-1 actor_id)
  (bind column ?column-2 actor_id)
  (where ?where-clause ?filter-condition-1 ?combination-1)
  (and ?combination-1 ?combination-2 ?filter-condition-2)
  (and ?combination-2 ?combination-3 ?filter-condition-3 ?filter-condition-4)
  (equals ?filter-condition-3 ?field-4 ?comparator-1)
  (concatenate ?field-4 ?table-1 ?dot ?column-3)
  (bind column ?column-3 actor)
  (bind concept ?comparator-1 "Gerard Depardieu")
  (equals ?filter-condition-4 ?field-5 ?comparator-2)
  (concatenate ?field-5 ?table-2 ?dot ?column-4)
  (bind column ?column-4 year)
  (bind concept ?comparator-2 1999)
  (like ?filter-condition-2 ?field-6 ?comparator-3)
  (concatenate ?field-6 ?table-2 ?dot ?column-1)
  (bind concept ?comparator-3 "The%"))



;(postmodern::disconnect-toplevel)
;(postmodern::connect-toplevel "db3_actors_films_multiple_tables.db" "postgres" "postgres" "localhost")

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:= actors.actor "Gerard Depardieu")))
'((aggregate ?aggregate-clause ?aggregator ?column)
  (bind aggregator ?aggregator count)
  (bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where ?group-by ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  ;add films_id column
  (equals ?equal-fields ?field-2 ?comparator)
  (bind concatenator ?dot ".")
  (concatenate ?field-2 ?table ?dot ?column)
  (bind column ?column-1 film_id)
  (concatenate ?comparator ?table-2 ?dot ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-3 ?comparator-2)
  (concatenate ?field-3 ?table-2 ?dot ?column-3)
  (concatenate ?comparator-2 ?column-4 ?dot ?table-3)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where ?filter-condition)
  (equals ?filter-condition ?field-4 ?comparator-3)
  (concatenate ?field-4 ?table-3 ?dot ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator-3 "Gerard Depardieu"))
  

;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:and (:= actors.actor "Gerard Depardieu") (:= films.year 1996))))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where ?group-by ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field-2 ?comparator)
  (bind concatenator ?dot ".")
  (concatenate ?first-field ?table ?dot ?column)
  (bind column ?column-1 film_id)
  (concatenate ?second-field ?table-2 ?dot ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-3 ?comparator-2)
  (concatenate ?field-3 ?table-2 ?dot ?column-3)
  (concatenate ?comparator-2 ?column-4 ?dot ?table-3)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where ?filter-condition ?filter-conditions)
  (and-keyword ?filter-conditions ?first-condition ?second-condition)
  (equals ?first-condition ?field-4 ?comparator-3)
  (concatenate ?field-4 ?table-3 ?dot ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator-3 "Gerard Depardieu")
  (equals ?second-condition ?field-5 ?comparator-4)
  (concatenate ?field-5 ?table ?dot ?column-6)
  (bind column ?column-6 year)
  (bind concept ?comparator-4 1996))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:and (:like actors.actor "Jean%") (:> films.year 2020))))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where ?group-by ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?fields ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (equals ?fields ?field-2 ?comparator)
  (dot ?field-2 ?table ?column)
  (bind column ?column-1 film_id)
  (bind concatenator ?dot ".")
  (concatenate ?comparator ?table-2 ?dot ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?fields ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (equals ?fields-2 ?field-3 ?comparator-2)
  (concatenate ?field-3 ?column-3 ?dot ?table-2)
  (concatenate ?comparator-2 ?table-3 ?dot ?column-4)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where ?filter-condition ?filter-conditions)
  (and ?filter-conditions ?condition-1 ?condition-2)
  (like ?condition-1 ?field-4 ?comparator-3)
  (concatenate ?field-4 ?table-3 ?dot ?column-5)
  (bind column ?column-5 actor)
  (bind concept ?comparator-3 "Jean%")
  (equals ?condition-2 ?field-5 ?comparator-4)
  (concatenate ?field-5 ?table ?dot ?column-6)
  (bind column ?column-6 year)
  (bind concept ?comparator-4 2020))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:in actors.actor (:set "Gerard Depardieu" "Fred Astaire")) :group-by films.film :having (:> (:avg films.rating) 7.5)))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where ?group-by ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field ?comparator)
  (bind concatenator ?dot ".")
  (concatenate ?field ?table ?dot ?column)
  (bind field ?column-1 film_id)
  (concatenate ?comparator ?table-2 ?dot ?column-2)
  (bind column ?column-2 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-2 ?comparator-2)
  (concatenate ?field-2 ?column-3 ?dot ?table-2)
  (concatenate ?comparator-2 ?column-4 ?dot ?table-3)
  (bind column ?column-3 actor_id)
  (bind column ?column-4 actor_id)
  (where ?where-2 ?filter-condition ?filter-conditions)
  (in ?filter-condition ?field ?set-clause)
  (set-keyword ?set-clause ?set-values)
  (bind set ?set-values ("Gerard Depardieu" "Fred Astaire"))
  (group-by ?group-by ?field-3 ?having-clause)
  (concatenate ?field-3 ?table ?dot ?column)
  (having ?having-clause ?filter-condition-2)
  (superior ?filter-condition-2 ?aggregate-clause-2 ?comparator)
  (average ?aggregate-clause-2 ?aggregator-2 ?filed-4)
  (bind aggregator ?aggregator-2 avg)
  (concatenate ?field-4 ?table ?dot ?column-5)
  (bind field ?column-5 rating)
  (bind concept ?comparator 7.5))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:or (:in actors.actor (:set "Gerard Depardieu" "Fred Astaire")) (:not (:like actors.actor "Brigitte"))) :group-by films.film :having (:> (:avg films.rating) 9)))
(defparameter *test-network* '((bind column ?column-1 film)
  (select ?result ?aggregate-clause ?column ?columns ?table ?where ?group-by ?inner-join-clause)
  (bind table ?table films)
  (inner-join-on ?inner-join-clause ?table-2 ?equal-fields ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (equals ?equal-fields ?field ?comparator)
  (concatenate ?field ?table ?dot ?column-2)
  (bind column ?column-2 film_id)
  (concatenate ?comparator ?table-2 ?dot ?column-3)
  (bind column ?column-3 film_id)
  (inner-join-on ?inner-join-clause-2 ?table-3 ?equal-fields-2 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (equals ?equal-fields-2 ?field-2 ?comparator-2)
  (concatenate ?field-2 ?column-4 ?dot ?table-2)
  (concatenate ?comparator-2 ?column-5 ?dot ?table-3)
  (bind column ?column-4 actor_id)
  (bind column ?column-5 actor_id)
  (where ?where ?filter-condition ?filter-conditions)
  (or ?filter-condition ?condition-1 ?condition-2)
  (in ?condition-1 ?field-6 ?set-clause)
  (concatenate ?field-6 ?table-3 ?dot ?column-6)
  (bind column ?column-name actor)
  (set-keyword ?set-clause ?set-values)
  (bind set ?set-values ("Gerard Depardieu" "Fred Astaire"))
  (not ?condition-2 ?like-clause)
  (like ?like-clause ?field-6 ?comparator)
  (bind concept ?comparator "Brigitte")
  (group-by ?group-by ?field7 ?having-clause)
  (concatenate ?field-7 ?table ?dot ?column)
  (having ?having-clause ?filter-condition)
  (superior ?filter-condition ?aggregate-clause ?comparator-2)
  (aggregate ?aggregate-clause ?field-8)
  (bind aggregate ?aggregator avg)
  (concatenate ?field-8 ?table ?dot ?column-7)
  (bind column ?column-7 rating)
  (bind concept ?comparator-2 9)))

;(ql:quickload :irl)
;(irl:draw-irl-program *test-network* :open t)


;;round (select or having)
;;sum (idem)

;;null 
;;not null


 
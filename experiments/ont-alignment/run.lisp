(ql:quickload :ont-alignment)
(in-package :ont-alignment)

(defparameter *experiment*
  (make-instance 'ont-alignment-experiment))

(run-interaction *experiment*)

;(disconnect-toplevel)
;(connect-toplevel "db2_actors_films_simple_table.db" "postgres" "postgres" "localhost")

;(type-of (execute-postmodern-query '(:select actor film :from actorsfilms)))

;(execute-postmodern-query '(:select (:count film) :from actorsfilms :where (:= actor "Gerard Depardieu")))

;(execute-postmodern-query '(:select (:count actor) (:avg year) :from actorsfilms))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:in actor (:set "Gérard Depardieu" "Fred Astaire"))))
;(execute-postmodern-query '(:select film :from actorsfilms :where (:not (:in actor (:set "Gérard Depardieu" "Fred Astaire")))))
;(execute-postmodern-query '(:select actor (:count film) :from actorsfilms :group-by actor :having (:> (:count film) 100)))
;(execute-postmodern-query '(:select actor film :from actorsfilms :where (:and (:= actor "Gerard Depardieu") (:<= rating 2.5))))
;(execute-postmodern-query '(:select actor (:count film) :from actorsfilms :group-by actor :having (:between (:count film) 100 101)))

(execute-postmodern-query '(:select actor_id :from actors :where (:in actor (:set "Gerard Depardieu" "Fred Astaire" "Brigitte Bardot"))))

;; '(:select actor film :from actorsfilms)
(defparameter *first-test*
  '((comma ?column-combination-1 ?column-1 ?column-2)
    (bind column ?column-1 actor)
    (bind column ?column-2 film)
    (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
    (bind table ?table-1 actorsfilms)))

(list-columns-with-types 'actorsfilms)
(execute-postmodern-query '(:select (:- year rating) :from actorsfilms))
(execute-postmodern-query '(:select rating :from actorsfilms :group-by rating :order-by-size t))
(execute-postmodern-query '(:select film :from actorsfilms :where (:< (:/ year rating) 3000)))

;(ql:quickload :irl)
;(irl:draw-irl-program *first-test* :open t)

;; '(:select actor film year :from actorsfilms)
(defparameter *second-test*
  '((comma ?column-combination-1 ?column-1 ?column-2) ; first argument : what goes out, second argument : left member, third argument : right member
    (comma ?column-combination-2 ?column-combination-1 ?column-3)
    (bind column ?column-1 actor)
    (bind column ?column-2 film)
    (bind column ?column-3 year)
    (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
    (bind table ?table-1 actorsfilms)))

;(irl:draw-irl-program *second-test* :open t)

;; '(:select (:count actor) :from actorsfilms)
'((count ?aggregate-clause-1 ?column-1)
  (bind column ?column-1 actor)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 actorsfilms))

;; '(:select (:count actor) (:avg year) :from actorsfilms)
(defparameter *fourth-test*
              '((comma ?aggregation-1 ?aggregate-clause-1 ?aggregate-clause-2)
                (count ?aggregate-clause-1 ?column-1)
                (average ?aggregate-clause-2 ?column-2)
                (bind column ?column-1 actor)
                (bind column ?column-2 year)
                (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
                (bind table ?table-1 actorsfilms)))

;(irl:draw-irl-program *fourth-test* :open t)
;;max
;;min

;; (execute-postmodern-query '(:select film :from actorsfilms :where (:= actor "Gerard Depardieu")))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 actorsfilms)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (equals ?filter-condition-1 ?column-2 ?comparator-1)
  (bind column ?column-2 actor)
  (bind concept ?comparator-1 "Gerard Depardieu"))

;; '(:select film :from actorsfilms :where (:in actor (:set "Gerard Depardieu" "Fred Astaire")))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 actorsfilms)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (in ?filter-condition-1 ?column-2 ?set-clause)
  (bind column ?column-2 actor)
  (set ?set-clause ?set-values)
  (bind set ?set-values ("Gérard Depardieu" "Fred Astaire")))

;; '(:select film :from actorsfilms :where (:not (:= actor "Gerard Depardieu")))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-2 actorsfilms)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (not ?filter-condition-2 ?filter-condition-1)
  (equals ?filter-1 ?filter-condition-2 ?column-2 ?comparator-1)
  (bind column ?column-2 actor)
  (bind concept ?comparator-1 "Gerard Depardieu"))

;; '(:select film :from actorsfilms :where (:not (:in actor (:set "Gerard Depardieu" "Fred Astaire")))))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table actorsfilms)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (not ?filter-condition-2 ?filter-condition-1)
  (in ?filter-condition-2 ?column-2 ?set-clause)
  (bind column ?column-2 actor)
  (set ?set-clause ?set-values)
  (bind set ?set-values ("Gérard Depardieu" "Fred Astaire")))

;; '(:select actor (:count film) :from actorsfilms :group-by actor :having (:> (:count film) 100))
'((count ?aggregate-clause-1 ?column-2)
  (bind column ?column-2 actor)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 actorsfilms)
  (group-by ?group-by-clause ?column-3 ?having-clause)
  (bing column ?column-3 film)
  (having ?having-clause ?filter-condition-1 ?filter-combination-1)
  (bigger-than ?filter-condition-1 ?aggregate-clause-2 ?comparator-1)
  (count ?aggregate-clause-2 ?column-2)
  (bind concept ?comparator-1 100))

;; '(:select actor (:count film) :from actorsfilms :group-by actor :having (:between (:count film) 100 101))
'((count ?aggregate-clause-1 ?column-2)
  (bind column ?column-2 actor)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 actorsfilms)
  (group-by ?group-by-clause ?column-3 ?having-clause)
  (bing column ?column-3 actor)
  (having ?having-clause ?filter-condition-1)
  (between ?filter-condition-1 ?aggregate-clause-2 ?lower-bound ?higher-bound)
  (count ?aggregate-clause-2 ?column-2)
  (bind concept ?lower-bound 100)
  (bind concept ?higher-bound 101))

;; '(:select film :from actorsfilms :where (:and (:= actor "Gerard Depardieu") (:<= rating 5)))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 actorsfilms)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (and ?filter-condition-1 ?condition-1 ?condition-2)
  (equals ?condition-1 ?column-2 ?comparator-1)
  (lower-than ?condition-2 ?column-3 ?comparator-2)
  (bind column ?column-2 actor)
  (bind column ?column-3 rating)
  (bind concept ?comparator-1 "Gerard Depardieu")
  (bind concept ?comparator-2 5))



;(disconnect-toplevel)
;(connect-toplevel "db1_films_years.db" "postgres" "postgres" "localhost")

;; (execute-postmodern-query '(:select film :from films :inner-join years :on (:= films.film_id years.film_id) :where (:= years.year 2021)))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-2 ?column-3 ?inner-join-clause-2)
  (dot ?column-2 ?table-1 ?column-4)
  (bind column ?column-4 film_id)
  (dot ?column-3 ?table-2 ?column-5)
  (bind table ?table-2 years)
  (bind column ?column-5 film_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (equals ?filter-condition-1 ?column-6 ?comparator-2)
  (dot ?column-6 ?table-2 ?column-7)
  (bind column ?column-7 year)
  (bind concept ?comparator-2 2021))

;; (execute-postmodern-query '(:select (:distinct film) :from films :inner-join years :on (:= films.film_id years.film_id) :where (:= years.year 2021)))
'((distinct ?distinct-clause-1 ?column-2)
  (bind column ?column-2 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-2 ?column-3 ?inner-join-clause-2)
  (dot ?column-2 ?table-1 ?column-4)
  (bind column ?column-4 film_id)
  (dot ?column-3 ?table-2 ?column-5)
  (bind table ?table-2 years)
  (bind column ?column-5 film_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (equals ?filter-condition-1 ?column-6 ?comparator-2)
  (dot ?column-6 ?table-2 ?column-7)
  (bind column ?column-7 year)
  (bind concept ?comparator-2 2021))

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:between years.year 1915 1916)))
'((count ?aggregate-clause-1 ?column-2)
  (bind column ?column-2 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause ?table-2 ?column-3 ?column-4 ?inner-join-clause-2)
  (bind table ?table-2 years)
  (dot ?column-3 ?table-1 ?column-5)
  (bind column ?column-5 actor_id)
  (dot ?column-4 ?table-2 ?column-6)
  (bind column ?column-6 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (between ?filter-condition-1 ?column-7 ?lower-bound ?higher-bound)
  (dot ?column-7 ?table-2 ?column-8)
  (bind column ?column-8 year)
  (bind concept ?lower-bound 1915)
  (bind concept ?higher-bound 1916))

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:and (:between years.year 1915 1920) (:and (:not (:= years.year 1917)) (:not (:= years.year 1918))))))
'((count ?aggregate-clause-1 ?column-2)
  (bind column ?column-2 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-3 ?column-4 ?inner-join-clause-2)
  (bind table ?table-2 years)
  (dot ?column-3 ?table-1 ?column-5)
  (bind column ?column-5 actor_id)
  (dot ?column-4 ?table-2 ?column-6)
  (bind column ?column-6 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (and ?filter-combination-1 ?filter-condition-2 ?filter-condition-3 ?filter-combination-2)
  (between ?filter-condition-2 ?column-7 ?lower-bound ?higher-bound)
  (dot ?column-7 ?table-2 ?column-8)
  (bind column ?column-8 year)
  (bind concept ?lower-bound 1915)
  (bind concept ?higher-bound 1916)
  (and ?filter-combination-2 ?filter-condition-4 ?filter-condition-5 ?filter-combination-3)
  (not ?filter-condition-4 ?filter-condition-6)
  (equals ?filter-condition-6 ?column-7 ?comparator-1)
  (bind concept ?comparator-1 1917)
  (not ?filter-condition-5 ?filter-condition-7)
  (equals ?filter-condition-7 ?column-7 ?comparator-2)
  (bind concept ?comparator-2 1918))
  

;; (execute-postmodern-query '(:select (:distinct films.film) years.year :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:= films.actor "Gerard Depardieu")))
'((comma ?column-combination-1 ?distinct-clause-2 ?column-2)
  (distinct ?distinct-clause-2 ?column-3)
  (dot ?column-3 ?table-1 ?column-4)
  (dot ?column-2 ?table-2 ?column-5)
  (bind table ?table-1 films)
  (bind column ?column-4 film)
  (bind table ?table-2 years)
  (bind column ?column-5 year)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (inner-join ?inner-join-clause-1 ?column-6 ?column-7 ?inner-join-clause-2)
  (dot ?column-6 ?table-1 ?column-8)
  (dot ?column-7 ?table-2 ?column-9)
  (bind column ?column-8 actor_id)
  (bind column ?column-9 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (equals ?filter-condition-1 ?column-10 ?comparator-1)
  (dot ?column-10 ?table-1 ?column-11)
  (bind column ?column-11 actor)
  (bind concept ?comparator-1 "Gerard Depardieu"))

;; (execute-postmodern-query '(:select (:count (:distinct films.film)) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:= films.actor "Gerard Depardieu")))
'((count ?aggregate-clause-1 ?distinct-clause-2)
  (distinct ?distinct-clause-2 ?column-2)
  (dot ?column-2 ?table-1 ?column-3)
  (bind table ?table-1 films)
  (bind column ?column-3 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (inner-join ?inner-join-clause-1 ?column-4 ?column-5 ?inner-join-clause-2)
  (dot ?column-4 ?table-1 ?column-6)
  (dot ?column-5 ?table-2 ?column-7)
  (bind column ?column-6 actor_id)
  (bind column ?column-7 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (equals ?filter-condition-1 ?column-8 ?comparator-1)
  (dot ?column-8 ?table-1 ?column-9)
  (bind column ?column-9 actor)
  (bind concept ?comparator-1 "Gerard Depardieu"))

  
;; SELECT film FROM films INNER JOIN films.actor_id = years.actor_id WHERE actor = "Gerard Depardieu" OR actor "Brigitte Bardot" AND year = 1999
;;(execute-postmodern-query '(:select film :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:and (:or (:= films.actor "Gerard Depardieu") (:= films.actor "Brigitte Bardot")) (:= years.year "1999"))))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?column-2 ?column-3 ?inner-join-clause-2)
  (dot ?column-2 ?table-1 ?column-4)
  (dot ?column-3 ?table-2 ?column-5)
  (bind table ?table-2 years)
  (bind column ?column-4 actor_id)
  (bind column ?column-5 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (and ?filter-combination-1 ?filter-combination-2 ?filter-combination-3 ?filter-condition-2 ?filter-condition-3)
  (or ?filter-combination-2 ?filter-combination-3 ?filter-combination-4 ?filter-condition-4 ?filter-condition-5)
  (equals ?filter-condition-4 ?column-6 ?comparator-1)
  (dot ?column-6 ?table-1 ?column-7)
  (bind column ?column-7 actor)
  (bind concept ?comparator-1 "Gerard Depardieu")
  (equals ?filter-condition-5 ?column-7 ?comparator-2)
  (bind concept ?comparator-2 "Brigitte Bardot")
  (equals ?filter-condition-3 ?column-8 ?comparator-3)
  (dot ?column-8 ?table-2 ?column-9)
  (bind column ?column-9 year)
  (bind concept ?comparator-3 1999))


;;SELECT film FROM films INNER JOIN films.actor_id = years.actor_id WHERE actor = "Gerard Depardieu" AND year = 1999 AND film LIKE "Th%"
;;(execute-postmodern-query '(:select (:distinct film) :from films :inner-join years :on (:= films.actor_id years.actor_id) :where (:and (:and (:= films.actor "Gerard Depardieu") (:= years.year 1999)) (:like films.film "The%"))))

'((distinct ?distinct-clause-1 ?column-2)
  (bind column ?column-2 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?column-3 ?column-4 ?inner-join-clause-2)
  (dot ?column-3 ?table-1 ?column-5)
  (dot ?column-4 ?table-2 ?column-6)
  (bind table ?table-2 years)
  (bind column ?column-5 actor_id)
  (bind column ?column-6 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (and ?filter-combination-1 ?filter-combination-2 ?filter-combination-3 ?filter-condition-2 ?filter-condition-3)
  (or ?filter-combination-2 ?filter-combination-3 ?filter-combination-4 ?filter-condition-4 ?filter-condition-5)
  (equals ?filter-condition-4 ?column-7 ?comparator-1)
  (dot ?column-7 ?table-1 ?column-8)
  (bind column ?column-8 actor)
  (bind concept ?comparator-1 "Gerard Depardieu")
  (equals ?filter-condition-5 ?column-9 ?comparator-2)
  (dot ?column-9 ?table-2 ?column-10)
  (bind column ?column-10 year)
  (bind concept ?comparator-2 1999)
  (like ?filter-condition-2 ?column-11 ?comparator-3)
  (dot ?column-11 ?table-1 ?column-2)
  (bind concept ?comparator-3 "The%"))



;(disconnect-toplevel)
;(connect-toplevel "db3_actors_films_multiple_tables.db" "postgres" "postgres" "localhost")

;; (execute-postmodern-query '(:select (:count film) :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:= actors.actor "Gerard Depardieu")))
'((count ?aggregate-clause ?column-2)
  (bind column ?column-2 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-3 ?column-4 ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (dot ?column-3 ?table ?column-5)
  (bind column ?column-3 film_id)
  (dot ?column-4 ?table-2 ?column-6)
  (bind column ?column-6 film_id)
  (inner-join ?inner-join-clause-2 ?table-3 ?column-7 ?column-8 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (dot ?column-7 ?table-2 ?column-9)
  (dot ?column-8 ?table-3 ?column-10)
  (bind column ?column-9 actor_id)
  (bind column ?column-10 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (equals ?filter-condition-1 ?column-11 ?comparator-1)
  (dot ?column-11 ?table-3 ?column-12)
  (bind column ?column-12 actor)
  (bind concept ?comparator-1 "Gerard Depardieu"))
  

;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:and (:= actors.actor "Gerard Depardieu") (:= films.year 1996))))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-2 ?column-3 ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (dot ?column-2 ?table-1 ?column-4)
  (bind column ?column-4 film_id)
  (dot ?column-3 ?table-2 ?column-5)
  (bind column ?column-5 film_id)
  (inner-join ?inner-join-clause-2 ?table-3 ?column-6 ?column-7 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (dot ?column-6 ?table-2 ?column-8)
  (dot ?column-7 ?table-3 ?column-9)
  (bind column ?column-8 actor_id)
  (bind column ?column-9 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (and ?filter-combination-1 ?filter-combination-2 ?filter-combination-3 ?filter-condition-2 ?filter-condition-3)
  (equals ?filter-condition-2 ?column-10 ?comparator-1)
  (dot ?column-10 ?table-3 ?column-11)
  (bind column ?column-11 actor)
  (bind concept ?comparator-1 "Gerard Depardieu")
  (equals ?filter-condition-3 ?column-12 ?comparator-2)
  (dot ?column-12 ?table-1 ?column-13)
  (bind column ?column-13 year)
  (bind concept ?comparator-2 1996))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:and (:like actors.actor "Jean%") (:> films.year 2020))))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-2 ?column-3 ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (dot ?column-2 ?table-1 ?column-4)
  (bind column ?column-4 film_id)
  (dot ?column-3 ?table-2 ?column-5)
  (bind column ?column-5 film_id)
  (inner-join ?inner-join-clause-2 ?table-3 ?column-6 ?column-7 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (dot ?column-6 ?table-2 ?column-8)
  (dot ?column-7 ?table-3 ?column-9)
  (bind column ?column-8 actor_id)
  (bind column ?column-9 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (and ?filter-combination-1 ?filter-combination-2 ?filter-combination-3 ?filter-condition-2 ?filter-condition-3)
  (like ?filter-condition-2 ?column-10 ?comparator-1)
  (dot ?column-10 ?table-3 ?column-11)
  (bind column ?column-11 actor)
  (bind concept ?comparator-1 "Jean%")
  (greater-than ?filter-condition-3 ?column-12 ?comparator-2)
  (dot ?column-12 ?table-2 ?column-13)
  (bind column ?column-13 year)
  (bind concept ?comparator-2 2020))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:in actors.actor (:set "Gerard Depardieu" "Fred Astaire")) :group-by films.film :having (:> (:avg films.rating) 7.5)))
'((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-2 ?column-3 ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (dot ?column-2 ?table-1 ?column-4)
  (bind column ?column-4 film_id)
  (dot ?column-3 ?table-2 ?column-5)
  (bind column ?column-5 film_id)
  (inner-join ?inner-join-clause-2 ?table-3 ?column-6 ?column-7 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (dot ?column-6 ?table-2 ?column-8)
  (dot ?column-7 ?table-3 ?column-9)
  (bind column ?column-8 actor_id)
  (bind column ?column-9 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (in ?filter-condition-1 ?column-10 ?set-clause-1)
  (dot ?column-10 ?table-3 ?column-11)
  (bind column ?column-11 actor)
  (set ?set-clause-1 ?set-values-1)
  (bind set ?set-values-1 ("Gerard Depardieu" "Fred Astaire"))
  (group-by ?group-by-clause ?column-12 ?having-clause)
  (dot ?column-12 ?table-1 ?column-1)
  (having ?having-clause ?filter-condition-2)
  (bigger-than ?filter-condition-2 ?aggregate-clause-2 ?comparator-1)
  (average ?aggregate-clause-2 ?column-13)
  (dot ?column-13 ?table-1 ?column-14)
  (bind column ?column-14 rating)
  (bind concept ?comparator-1 7.5))


;; (execute-postmodern-query '(:select film :from films :inner-join actorfilm_relations :on (:= films.film_id actorfilm_relations.film_id) :inner-join actors :on (:= actorfilm_relations.actor_id actors.actor_id) :where (:or (:in actors.actor (:set "Gerard Depardieu" "Fred Astaire")) (:not (:like actors.actor "Brigitte"))) :group-by films.film :having (:> (:avg films.rating) 9)))
(defparameter *test-network* '((bind column ?column-1 film)
  (select ?result ?aggregate-clause-1 ?distinct-clause-1 ?column-1 ?table-1 ?inner-join-clause-1 ?where-clause ?group-by-clause)
  (bind table ?table-1 films)
  (inner-join ?inner-join-clause-1 ?table-2 ?column-2 ?column-3 ?inner-join-clause-2)
  (bind table ?table-2 actorfilm_relations)
  (dot ?column-2 ?table-1 ?column-4)
  (bind column ?column-4 film_id)
  (dot ?column-3 ?table-2 ?column-5)
  (bind column ?column-5 film_id)
  (inner-join ?inner-join-clause-2 ?table-3 ?column-6 ?column-7 ?inner-join-clause-3)
  (bind table ?table-3 actors)
  (dot ?column-6 ?table-2 ?column-8)
  (dot ?column-7 ?table-3 ?column-9)
  (bind column ?column-8 actor_id)
  (bind column ?column-9 actor_id)
  (where ?where-clause ?filter-condition-1 ?filter-combination-1)
  (or ?filter-combination-1 ?filter-combination-2 ?filter-combination-3 ?filter-condition-2 ?filter-condition-3)
  (in ?filter-condition-2 ?column-10 ?set-clause-1)
  (dot ?column-10 ?table-3 ?column-11)
  (bind column ?column-11 actor)
  (set ?set-clause-1 ?set-values-1)
  (bind set ?set-values-1 ("Gerard Depardieu" "Fred Astaire"))
  (not ?filter-condition-3 ?filter-condition-4)
  (like ?filter-condition-4 ?column-10 ?comparator-1)
  (bind concept ?comparator-1 "Brigitte")
  (group-by ?group-by-clause ?column-12 ?having-clause)
  (dot ?column-12 ?table-1 ?column-1)
  (having ?having-clause ?filter-condition-5)
  (bigger-than ?filter-condition-5 ?aggregate-clause-2 ?comparator-2)
  (average ?aggregate-clause-2 ?column-13)
  (dot ?column-13 ?table-1 ?column-14)
  (bind column ?column-14 rating)
  (bind concept ?comparator-2 9)))

;(ql:quickload :irl)
;(irl:draw-irl-program *test-network* :open t)


;;round (select or having)
;;sum (idem)

;;null 
;;not null

;readme file with defining each argument of the predicates + types
; working with an sql doc
; look up sparql 


 
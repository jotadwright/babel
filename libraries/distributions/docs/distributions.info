This is distributions.info, produced by makeinfo version 6.8 from
distributions.texi.

     Copyright © 2019-2022 Steven Nunez

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.
INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* DISTRIBUTIONS Reference Manual: (distributions). The DISTRIBUTIONS Reference Manual.
END-INFO-DIR-ENTRY


File: distributions.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

The DISTRIBUTIONS Reference Manual
**********************************

This is the DISTRIBUTIONS Reference Manual, version 1.0.0, generated
automatically by Declt version 4.0b2.

* Menu:

* Copying:: The Microsoft Public License
* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types

     Copyright © 2019-2022 Steven Nunez

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.


File: distributions.info,  Node: Copying,  Next: Systems,  Prev: Top,  Up: Top

Copying
*******

     This program is distributed under the terms of the Microsoft Public
     License.


File: distributions.info,  Node: Systems,  Next: Files,  Prev: Copying,  Up: Top

1 Systems
*********

The main system appears first, followed by any subsystem dependency.

* Menu:

* The distributions system::


File: distributions.info,  Node: The distributions system,  Prev: Systems,  Up: Systems

1.1 distributions
=================

Random numbers and distributions
*Long Name*
     Statistical distributions and related functions
*Author*
     Steven Nunez <<steve@symbolics.tech>>
*Home Page*
     <https://lisp-stat.dev/docs/manuals/distributions/>
*Source Control*
     (GIT https://github.com/Lisp-Stat/distributions.git)
*Bug Tracker*
     <https://github.com/Lisp-Stat/distributions/issues>
*License*
     MS-PL
*Long Description*
     The Distributions package provides a collection of probabilistic
     distributions and related functions including:

     - Sampling from distributions
     - Moments (e.g mean, variance, skewness, and kurtosis), entropy,
     and other properties
     - Probability density/mass functions (pdf) and their logarithm
     (logpdf)
     - Moment-generating functions and characteristic functions
     - Maximum likelihood estimation
     - Distribution composition and derived distributions
*Version*
     1.0.0
*Dependencies*
        • alexandria (system).
        • anaphora (system).
        • array-operations (system).
        • cephes (system).
        • num-utils (system).
        • special-functions (system).
        • let-plus (system).
        • float-features (system).
*Source*
     *note distributions.asd: ❨2❩.
*Child Components*
        • *note packages.lisp: ❨3❩. (file).
        • *note internals.lisp: ❨4❩. (file).
        • *note generator.lisp: ❨5❩. (file).
        • *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
          (file).
        • *note defs.lisp: ❨7❩. (file).
        • *note generics.lisp: ❨8❩. (file).
        • *note discrete.lisp: ❨9❩. (file).
        • *note uniform.lisp: ❨10❩. (file).
        • *note exponential.lisp: ❨11❩. (file).
        • *note normal.lisp: ❨12❩. (file).
        • *note log-normal.lisp: ❨13❩. (file).
        • *note truncated-normal.lisp: ❨14❩. (file).
        • *note t-distribution.lisp: ❨15❩. (file).
        • *note gamma.lisp: ❨16❩. (file).
        • *note chi-square.lisp: ❨17❩. (file).
        • *note beta.lisp: ❨18❩. (file).
        • *note rayleigh.lisp: ❨19❩. (file).
        • *note bernoulli.lisp: ❨20❩. (file).
        • *note binomial.lisp: ❨21❩. (file).
        • *note geometric.lisp: ❨22❩. (file).
        • *note poisson.lisp: ❨23❩. (file).


File: distributions.info,  Node: Files,  Next: Packages,  Prev: Systems,  Up: Top

2 Files
*******

Files are sorted by type and then listed depth-first from the systems
components trees.

* Menu:

* Lisp files::


File: distributions.info,  Node: Lisp files,  Prev: Files,  Up: Files

2.1 Lisp
========

* Menu:

* The distributions/distributions․asd file::
* The distributions/packages․lisp file::
* The distributions/internals․lisp file::
* The distributions/generator․lisp file::
* The distributions/simple-multiplicative-congruential-generators․lisp file::
* The distributions/defs․lisp file::
* The distributions/generics․lisp file::
* The distributions/discrete․lisp file::
* The distributions/uniform․lisp file::
* The distributions/exponential․lisp file::
* The distributions/normal․lisp file::
* The distributions/log-normal․lisp file::
* The distributions/truncated-normal․lisp file::
* The distributions/t-distribution․lisp file::
* The distributions/gamma․lisp file::
* The distributions/chi-square․lisp file::
* The distributions/beta․lisp file::
* The distributions/rayleigh․lisp file::
* The distributions/bernoulli․lisp file::
* The distributions/binomial․lisp file::
* The distributions/geometric․lisp file::
* The distributions/poisson․lisp file::


File: distributions.info,  Node: The distributions/distributions․asd file,  Next: The distributions/packages․lisp file,  Prev: Lisp files,  Up: Lisp files

2.1.1 distributions/distributions.asd
-------------------------------------

*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*ASDF Systems*
     *note distributions: ❨1❩.


File: distributions.info,  Node: The distributions/packages․lisp file,  Next: The distributions/internals․lisp file,  Prev: The distributions/distributions․asd file,  Up: Lisp files

2.1.2 distributions/packages.lisp
---------------------------------

*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Packages*
        • *note distributions.internals: ❨24❩.
        • *note distributions: ❨25❩.


File: distributions.info,  Node: The distributions/internals․lisp file,  Next: The distributions/generator․lisp file,  Prev: The distributions/packages․lisp file,  Up: Lisp files

2.1.3 distributions/internals.lisp
----------------------------------

*Dependency*
     *note packages.lisp: ❨3❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note as-float: ❨29❩. (function).
        • *note as-float-probabilities: ❨30❩. (function).
        • *note as-float-vector: ❨32❩. (function).
        • *note float-vector: ❨26❩. (type).
        • *note internal-float: ❨28❩. (type).
        • *note maybe-ignore-constant: ❨31❩. (macro).
        • *note try: ❨33❩. (macro).
        • *note with-floats: ❨27❩. (macro).


File: distributions.info,  Node: The distributions/generator․lisp file,  Next: The distributions/simple-multiplicative-congruential-generators․lisp file,  Prev: The distributions/internals․lisp file,  Up: Lisp files

2.1.4 distributions/generator.lisp
----------------------------------

*Dependency*
     *note internals.lisp: ❨4❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note generator: ❨213❩. (class).
        • *note initialize-instance: ❨425❩. (method).
        • *note make-generator: ❨210❩. (function).
        • *note next: ❨34❩. (function).
*Internals*
        • *note %next-double-float: ❨253❩. (function).
        • *note %next-integer: ❨402❩. (function).
        • *note %next-single-float: ❨356❩. (function).
        • *note *default-generator-type*: ❨391❩. (special variable).
        • *note chunk-length: ❨275❩. (reader method).
        • *note copy-state: ❨321❩. (generic function).
        • *note default-seed: ❨272❩. (reader method).
        • *note generate-seed: ❨309❩. (function).
        • *note generate-state: ❨244❩. (generic function).
        • *note state: ❨235❩. (reader method).
        • *note (setf state): ❨237❩. (writer method).


File: distributions.info,  Node: The distributions/simple-multiplicative-congruential-generators․lisp file,  Next: The distributions/defs․lisp file,  Prev: The distributions/generator․lisp file,  Up: Lisp files

2.1.5 distributions/simple-multiplicative-congruential-generators.lisp
----------------------------------------------------------------------

*Dependency*
     *note generator.lisp: ❨5❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note borosh13: ❨126❩. (class).
        • *note initialize-instance: ❨426❩. (method).
        • *note randu: ❨201❩. (class).
        • *note transputer: ❨136❩. (class).
        • *note waterman14: ❨221❩. (class).
*Internals*
        • *note a: ❨377❩. (reader method).
        • *note clone: ❨308❩. (method).
        • *note generate-state: ❨245❩. (method).
        • *note m: ❨255❩. (reader method).
        • *note next-chunk: ❨385❩. (method).
        • *note next-real: ❨369❩. (method).
        • *note simple-multiplicative-congruential: ❨281❩. (class).


File: distributions.info,  Node: The distributions/defs․lisp file,  Next: The distributions/generics․lisp file,  Prev: The distributions/simple-multiplicative-congruential-generators․lisp file,  Up: Lisp files

2.1.6 distributions/defs.lisp
-----------------------------

*Dependency*
     *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
     (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨61❩. (generic function).
        • *note draw: ❨142❩. (generic function).
        • *note generator: ❨211❩. (generic function).
        • *note log-pdf: ❨110❩. (generic function).
        • *note mean: ❨163❩. (generic function).
        • *note pdf: ❨180❩. (function).
        • *note variance: ❨72❩. (generic function).
*Internals*
        • *note check-probability: ❨326❩. (function).
        • *note define-rv: ❨359❩. (macro).


File: distributions.info,  Node: The distributions/generics․lisp file,  Next: The distributions/discrete․lisp file,  Prev: The distributions/defs․lisp file,  Up: Lisp files

2.1.7 distributions/generics.lisp
---------------------------------

*Dependency*
     *note defs.lisp: ❨7❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note nu: ❨43❩. (generic function).
        • *note standard-deviation: ❨219❩. (generic function).
*Internals*
        • *note copy-r-univariate: ❨340❩. (function).
        • *note make-r-univariate: ❨401❩. (function).
        • *note r-univariate: ❨374❩. (structure).
        • *note r-univariate-p: ❨342❩. (function).
        • *note s^2: ❨313❩. (generic function).


File: distributions.info,  Node: The distributions/discrete․lisp file,  Next: The distributions/uniform․lisp file,  Prev: The distributions/generics․lisp file,  Up: Lisp files

2.1.8 distributions/discrete.lisp
---------------------------------

*Dependency*
     *note generics.lisp: ❨8❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨70❩. (method).
        • *note distinct-random-integers: ❨135❩. (function).
        • *note distinct-random-integers-dense: ❨91❩. (function).
        • *note draw: ❨156❩. (method).
        • *note log-pdf: ❨118❩. (method).
        • *note mean: ❨177❩. (method).
        • *note probabilities: ❨159❩. (method).
        • *note r-discrete: ❨35❩. (function).
        • *note r-discrete: ❨36❩. (structure).
        • *note variance: ❨86❩. (method).
*Internals*
        • *note copy-r-discrete: ❨229❩. (function).
        • *note make-r-discrete: ❨390❩. (function).
        • *note r-discrete-alias: ❨266❩. (reader).
        • *note (setf r-discrete-alias): ❨267❩. (writer).
        • *note r-discrete-n-float: ❨251❩. (reader).
        • *note (setf r-discrete-n-float): ❨252❩. (writer).
        • *note r-discrete-p: ❨349❩. (function).
        • *note r-discrete-prob: ❨239❩. (reader).
        • *note (setf r-discrete-prob): ❨240❩. (writer).
        • *note r-discrete-probabilities: ❨276❩. (reader).
        • *note (setf r-discrete-probabilities): ❨277❩. (writer).


File: distributions.info,  Node: The distributions/uniform․lisp file,  Next: The distributions/exponential․lisp file,  Prev: The distributions/discrete․lisp file,  Up: Lisp files

2.1.9 distributions/uniform.lisp
--------------------------------

*Dependency*
     *note discrete.lisp: ❨9❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨69❩. (method).
        • *note draw: ❨155❩. (method).
        • *note draw-uniform: ❨71❩. (function).
        • *note left: ❨120❩. (method).
        • *note log-pdf: ❨117❩. (method).
        • *note mean: ❨176❩. (method).
        • *note quantile: ❨196❩. (method).
        • *note r-uniform: ❨101❩. (function).
        • *note r-uniform: ❨102❩. (structure).
        • *note right: ❨179❩. (method).
        • *note variance: ❨85❩. (method).
*Internals*
        • *note copy-r-uniform: ❨259❩. (function).
        • *note make-r-uniform: ❨286❩. (function).
        • *note r-uniform-left: ❨399❩. (reader).
        • *note (setf r-uniform-left): ❨400❩. (writer).
        • *note r-uniform-p: ❨315❩. (function).
        • *note r-uniform-right: ❨362❩. (reader).
        • *note (setf r-uniform-right): ❨363❩. (writer).
        • *note r-uniform-width: ❨289❩. (reader).
        • *note (setf r-uniform-width): ❨290❩. (writer).


File: distributions.info,  Node: The distributions/exponential․lisp file,  Next: The distributions/normal․lisp file,  Prev: The distributions/uniform․lisp file,  Up: Lisp files

2.1.10 distributions/exponential.lisp
-------------------------------------

*Dependency*
     *note uniform.lisp: ❨10❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨68❩. (method).
        • *note draw: ❨154❩. (method).
        • *note draw-exponential: ❨161❩. (function).
        • *note draw-standard-exponential: ❨87❩. (function).
        • *note log-pdf: ❨116❩. (method).
        • *note mean: ❨175❩. (method).
        • *note quantile: ❨195❩. (method).
        • *note r-exponential: ❨139❩. (function).
        • *note r-exponential: ❨140❩. (structure).
        • *note rate: ❨42❩. (method).
        • *note variance: ❨84❩. (method).
*Internals*
        • *note copy-r-exponential: ❨238❩. (function).
        • *note make-r-exponential: ❨306❩. (function).
        • *note r-exponential-p: ❨375❩. (function).
        • *note r-exponential-rate: ❨268❩. (reader).
        • *note (setf r-exponential-rate): ❨269❩. (writer).


File: distributions.info,  Node: The distributions/normal․lisp file,  Next: The distributions/log-normal․lisp file,  Prev: The distributions/exponential․lisp file,  Up: Lisp files

2.1.11 distributions/normal.lisp
--------------------------------

*Dependency*
     *note exponential.lisp: ❨11❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨67❩. (method).
        • *note draw: ❨153❩. (method).
        • *note draw-standard-normal: ❨162❩. (function).
        • *note from-standard-normal: ❨121❩. (function).
        • *note log-pdf: ❨115❩. (method).
        • *note mean: ❨174❩. (method).
        • *note quantile: ❨194❩. (method).
        • *note r-normal: ❨206❩. (function).
        • *note r-normal: ❨207❩. (structure).
        • *note to-standard-normal: ❨51❩. (function).
        • *note variance: ❨83❩. (method).
*Internals*
        • *note +normal-log-pdf-constant+: ❨367❩. (constant).
        • *note cdf-normal%: ❨355❩. (function).
        • *note copy-r-normal: ❨316❩. (function).
        • *note make-r-normal: ❨392❩. (function).
        • *note pdf-normal%: ❨304❩. (function).
        • *note quantile-normal%: ❨295❩. (function).
        • *note r-normal-mean: ❨241❩. (reader).
        • *note (setf r-normal-mean): ❨242❩. (writer).
        • *note r-normal-p: ❨258❩. (function).
        • *note r-normal-sd: ❨293❩. (reader).
        • *note (setf r-normal-sd): ❨294❩. (writer).
        • *note sd: ❨312❩. (method).


File: distributions.info,  Node: The distributions/log-normal․lisp file,  Next: The distributions/truncated-normal․lisp file,  Prev: The distributions/normal․lisp file,  Up: Lisp files

2.1.12 distributions/log-normal.lisp
------------------------------------

*Dependency*
     *note normal.lisp: ❨12❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨66❩. (method).
        • *note draw: ❨152❩. (method).
        • *note log-pdf: ❨114❩. (method).
        • *note mean: ❨173❩. (method).
        • *note quantile: ❨193❩. (method).
        • *note r-log-normal: ❨53❩. (function).
        • *note r-log-normal: ❨54❩. (structure).
        • *note variance: ❨82❩. (method).
*Internals*
        • *note copy-r-log-normal: ❨383❩. (function).
        • *note make-r-log-normal: ❨378❩. (function).
        • *note r-log-normal-log-mean: ❨357❩. (reader).
        • *note (setf r-log-normal-log-mean): ❨358❩. (writer).
        • *note r-log-normal-log-sd: ❨299❩. (reader).
        • *note (setf r-log-normal-log-sd): ❨300❩. (writer).
        • *note r-log-normal-p: ❨350❩. (function).


File: distributions.info,  Node: The distributions/truncated-normal․lisp file,  Next: The distributions/t-distribution․lisp file,  Prev: The distributions/log-normal․lisp file,  Up: Lisp files

2.1.13 distributions/truncated-normal.lisp
------------------------------------------

*Dependency*
     *note log-normal.lisp: ❨13❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨65❩. (method).
        • *note draw: ❨151❩. (method).
        • *note log-pdf: ❨113❩. (method).
        • *note mean: ❨172❩. (method).
        • *note quantile: ❨192❩. (method).
        • *note r-truncated-normal: ❨205❩. (function).
        • *note variance: ❨81❩. (method).
*Internals*
        • *note copy-left-truncated-normal: ❨388❩. (function).
        • *note draw-left-truncated-standard-normal: ❨398❩. (function).
        • *note left-truncated-normal: ❨332❩. (function).
        • *note left-truncated-normal: ❨333❩. (structure).
        • *note left-truncated-normal-alpha: ❨386❩. (reader).
        • *note (setf left-truncated-normal-alpha): ❨387❩. (writer).
        • *note left-truncated-normal-left: ❨261❩. (reader).
        • *note (setf left-truncated-normal-left): ❨262❩. (writer).
        • *note left-truncated-normal-left-standardized: ❨248❩.
          (reader).
        • *note (setf left-truncated-normal-left-standardized): ❨249❩.
          (writer).
        • *note left-truncated-normal-m0: ❨345❩. (reader).
        • *note (setf left-truncated-normal-m0): ❨346❩. (writer).
        • *note left-truncated-normal-mu: ❨287❩. (reader).
        • *note (setf left-truncated-normal-mu): ❨288❩. (writer).
        • *note left-truncated-normal-p: ❨379❩. (function).
        • *note left-truncated-normal-sigma: ❨381❩. (reader).
        • *note (setf left-truncated-normal-sigma): ❨382❩. (writer).
        • *note make-left-truncated-normal: ❨250❩. (function).
        • *note truncated-normal-moments%: ❨231❩. (function).
        • *note truncated-normal-optimal-alpha: ❨243❩. (function).


File: distributions.info,  Node: The distributions/t-distribution․lisp file,  Next: The distributions/gamma․lisp file,  Prev: The distributions/truncated-normal․lisp file,  Up: Lisp files

2.1.14 distributions/t-distribution.lisp
----------------------------------------

*Dependency*
     *note truncated-normal.lisp: ❨14❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note draw: ❨150❩. (method).
        • *note draw-standard-t: ❨134❩. (function).
        • *note mean: ❨171❩. (method).
        • *note nu: ❨46❩. (method).
        • *note r-t: ❨96❩. (function).
        • *note r-t: ❨97❩. (structure).
        • *note scale: ❨184❩. (method).
        • *note t-scale-to-variance-coefficient: ❨224❩. (function).
        • *note variance: ❨80❩. (method).
*Internals*
        • *note copy-r-t: ❨280❩. (function).
        • *note make-r-t: ❨273❩. (function).
        • *note r-t-mean: ❨351❩. (reader).
        • *note (setf r-t-mean): ❨352❩. (writer).
        • *note r-t-nu: ❨395❩. (reader).
        • *note (setf r-t-nu): ❨396❩. (writer).
        • *note r-t-p: ❨230❩. (function).
        • *note r-t-scale: ❨317❩. (reader).
        • *note (setf r-t-scale): ❨318❩. (writer).


File: distributions.info,  Node: The distributions/gamma․lisp file,  Next: The distributions/chi-square․lisp file,  Prev: The distributions/t-distribution․lisp file,  Up: Lisp files

2.1.15 distributions/gamma.lisp
-------------------------------

*Dependency*
     *note t-distribution.lisp: ❨15❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note alpha: ❨108❩. (method).
        • *note alpha: ❨109❩. (method).
        • *note beta: ❨124❩. (method).
        • *note beta: ❨125❩. (method).
        • *note cdf: ❨64❩. (method).
        • *note draw: ❨148❩. (method).
        • *note draw: ❨149❩. (method).
        • *note log-pdf: ❨111❩. (method).
        • *note log-pdf: ❨112❩. (method).
        • *note mean: ❨169❩. (method).
        • *note mean: ❨170❩. (method).
        • *note num=: ❨422❩. (method).
        • *note quantile: ❨191❩. (method).
        • *note r-gamma: ❨57❩. (function).
        • *note r-gamma: ❨58❩. (structure).
        • *note r-inverse-gamma: ❨129❩. (function).
        • *note r-inverse-gamma: ❨130❩. (structure).
        • *note variance: ❨78❩. (method).
        • *note variance: ❨79❩. (method).
*Internals*
        • *note cdf-gamma%: ❨324❩. (function).
        • *note cdf-gamma%+: ❨301❩. (function).
        • *note copy-r-gamma: ❨291❩. (function).
        • *note copy-r-inverse-gamma: ❨380❩. (function).
        • *note draw-standard-gamma1: ❨297❩. (function).
        • *note make-r-gamma: ❨260❩. (function).
        • *note make-r-inverse-gamma: ❨389❩. (function).
        • *note pdf-gamma: ❨285❩. (function).
        • *note pdf-gamma%: ❨364❩. (function).
        • *note pdf-gamma*: ❨325❩. (function).
        • *note pdf-gamma+: ❨247❩. (function).
        • *note r-gamma-alpha: ❨302❩. (reader).
        • *note (setf r-gamma-alpha): ❨303❩. (writer).
        • *note r-gamma-beta: ❨347❩. (reader).
        • *note (setf r-gamma-beta): ❨348❩. (writer).
        • *note r-gamma-p: ❨292❩. (function).
        • *note r-inverse-gamma-alpha: ❨319❩. (reader).
        • *note (setf r-inverse-gamma-alpha): ❨320❩. (writer).
        • *note r-inverse-gamma-beta: ❨393❩. (reader).
        • *note (setf r-inverse-gamma-beta): ❨394❩. (writer).
        • *note r-inverse-gamma-p: ❨331❩. (function).
        • *note standard-gamma1-d-c: ❨310❩. (function).


File: distributions.info,  Node: The distributions/chi-square․lisp file,  Next: The distributions/beta․lisp file,  Prev: The distributions/gamma․lisp file,  Up: Lisp files

2.1.16 distributions/chi-square.lisp
------------------------------------

*Dependency*
     *note gamma.lisp: ❨16❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note nu: ❨44❩. (method).
        • *note nu: ❨45❩. (method).
        • *note r-chi-square: ❨197❩. (function).
        • *note r-inverse-chi-square: ❨133❩. (function).
*Internals*
     *note s^2: ❨314❩. (method).


File: distributions.info,  Node: The distributions/beta․lisp file,  Next: The distributions/rayleigh․lisp file,  Prev: The distributions/chi-square․lisp file,  Up: Lisp files

2.1.17 distributions/beta.lisp
------------------------------

*Dependency*
     *note chi-square.lisp: ❨17❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note alpha: ❨107❩. (method).
        • *note beta: ❨123❩. (method).
        • *note draw: ❨147❩. (method).
        • *note mean: ❨168❩. (method).
        • *note quantile: ❨190❩. (method).
        • *note r-beta: ❨185❩. (function).
        • *note r-beta: ❨186❩. (structure).
        • *note variance: ❨77❩. (method).
*Internals*
        • *note copy-r-beta: ❨256❩. (function).
        • *note make-r-beta: ❨270❩. (function).
        • *note r-beta-alpha: ❨353❩. (reader).
        • *note (setf r-beta-alpha): ❨354❩. (writer).
        • *note r-beta-beta: ❨232❩. (reader).
        • *note (setf r-beta-beta): ❨233❩. (writer).
        • *note r-beta-p: ❨265❩. (function).


File: distributions.info,  Node: The distributions/rayleigh․lisp file,  Next: The distributions/bernoulli․lisp file,  Prev: The distributions/beta․lisp file,  Up: Lisp files

2.1.18 distributions/rayleigh.lisp
----------------------------------

*Dependency*
     *note beta.lisp: ❨18❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨63❩. (method).
        • *note draw: ❨146❩. (method).
        • *note draw-rayleigh: ❨160❩. (function).
        • *note mean: ❨167❩. (method).
        • *note r-rayleigh: ❨198❩. (function).
        • *note r-rayleigh: ❨199❩. (structure).
        • *note scale: ❨183❩. (method).
        • *note variance: ❨76❩. (method).
*Internals*
        • *note copy-r-rayleigh: ❨344❩. (function).
        • *note make-r-rayleigh: ❨278❩. (function).
        • *note r-rayleigh-p: ❨403❩. (function).
        • *note r-rayleigh-scale: ❨365❩. (reader).
        • *note (setf r-rayleigh-scale): ❨366❩. (writer).


File: distributions.info,  Node: The distributions/bernoulli․lisp file,  Next: The distributions/binomial․lisp file,  Prev: The distributions/rayleigh․lisp file,  Up: Lisp files

2.1.19 distributions/bernoulli.lisp
-----------------------------------

*Dependency*
     *note rayleigh.lisp: ❨19❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note cdf: ❨62❩. (method).
        • *note draw: ❨145❩. (method).
        • *note draw-bernoulli: ❨204❩. (function).
        • *note mean: ❨166❩. (method).
        • *note r-bernoulli: ❨93❩. (function).
        • *note r-bernoulli: ❨94❩. (structure).
        • *note variance: ❨75❩. (method).
*Internals*
        • *note copy-r-bernoulli: ❨226❩. (function).
        • *note draw-bernoulli-bit: ❨343❩. (function).
        • *note make-r-bernoulli: ❨298❩. (function).
        • *note pr: ❨330❩. (method).
        • *note r-bernoulli-p: ❨296❩. (function).
        • *note r-bernoulli-pr: ❨263❩. (reader).
        • *note (setf r-bernoulli-pr): ❨264❩. (writer).


File: distributions.info,  Node: The distributions/binomial․lisp file,  Next: The distributions/geometric․lisp file,  Prev: The distributions/bernoulli․lisp file,  Up: Lisp files

2.1.20 distributions/binomial.lisp
----------------------------------

*Dependency*
     *note bernoulli.lisp: ❨20❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note draw: ❨144❩. (method).
        • *note draw-binomial: ❨52❩. (function).
        • *note mean: ❨165❩. (method).
        • *note r-binomial: ❨47❩. (function).
        • *note r-binomial: ❨48❩. (structure).
        • *note variance: ❨74❩. (method).
*Internals*
        • *note copy-r-binomial: ❨305❩. (function).
        • *note make-r-binomial: ❨257❩. (function).
        • *note n: ❨373❩. (method).
        • *note pr: ❨329❩. (method).
        • *note r-binomial-n: ❨227❩. (reader).
        • *note (setf r-binomial-n): ❨228❩. (writer).
        • *note r-binomial-p: ❨341❩. (function).
        • *note r-binomial-pr: ❨370❩. (reader).
        • *note (setf r-binomial-pr): ❨371❩. (writer).


File: distributions.info,  Node: The distributions/geometric․lisp file,  Next: The distributions/poisson․lisp file,  Prev: The distributions/binomial․lisp file,  Up: Lisp files

2.1.21 distributions/geometric.lisp
-----------------------------------

*Dependency*
     *note binomial.lisp: ❨21❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
        • *note draw: ❨143❩. (method).
        • *note draw-geometric: ❨92❩. (function).
        • *note mean: ❨164❩. (method).
        • *note r-geometric: ❨88❩. (function).
        • *note r-geometric: ❨89❩. (structure).
        • *note variance: ❨73❩. (method).
*Internals*
        • *note copy-r-geometric: ❨397❩. (function).
        • *note make-r-geometric: ❨225❩. (function).
        • *note pr: ❨328❩. (method).
        • *note r-geometric-p: ❨279❩. (function).
        • *note r-geometric-pr: ❨360❩. (reader).
        • *note (setf r-geometric-pr): ❨361❩. (writer).


File: distributions.info,  Node: The distributions/poisson․lisp file,  Prev: The distributions/geometric․lisp file,  Up: Lisp files

2.1.22 distributions/poisson.lisp
---------------------------------

*Dependency*
     *note geometric.lisp: ❨22❩. (file).
*Source*
     *note distributions.asd: ❨2❩.
*Parent Component*
     *note distributions: ❨1❩. (system).
*Public Interface*
     *note draw-poisson: ❨181❩. (function).


File: distributions.info,  Node: Packages,  Next: Definitions,  Prev: Files,  Up: Top

3 Packages
**********

Packages are listed by definition order.

* Menu:

* The distributions․internals package::
* The distributions package::


File: distributions.info,  Node: The distributions․internals package,  Next: The distributions package,  Prev: Packages,  Up: Packages

3.1 distributions.internals
===========================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • common-lisp.
        • let-plus.
*Used By List*
     *note distributions: ❨25❩.
*Public Interface*
        • *note as-float: ❨29❩. (function).
        • *note as-float-probabilities: ❨30❩. (function).
        • *note as-float-vector: ❨32❩. (function).
        • *note float-vector: ❨26❩. (type).
        • *note internal-float: ❨28❩. (type).
        • *note maybe-ignore-constant: ❨31❩. (macro).
        • *note try: ❨33❩. (macro).
        • *note with-floats: ❨27❩. (macro).


File: distributions.info,  Node: The distributions package,  Prev: The distributions․internals package,  Up: Packages

3.2 distributions
=================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • *note distributions.internals: ❨24❩.
        • let-plus.
        • num-utils.elementwise.
        • num-utils.matrix.
        • num-utils.num=.
        • special-functions.
*Public Interface*
        • *note alpha: ❨106❩. (generic function).
        • *note beta: ❨122❩. (generic function).
        • *note borosh13: ❨126❩. (class).
        • *note cdf: ❨61❩. (generic function).
        • *note distinct-random-integers: ❨135❩. (function).
        • *note distinct-random-integers-dense: ❨91❩. (function).
        • *note draw: ❨142❩. (generic function).
        • *note draw-bernoulli: ❨204❩. (function).
        • *note draw-binomial: ❨52❩. (function).
        • *note draw-exponential: ❨161❩. (function).
        • *note draw-geometric: ❨92❩. (function).
        • *note draw-poisson: ❨181❩. (function).
        • *note draw-rayleigh: ❨160❩. (function).
        • *note draw-standard-exponential: ❨87❩. (function).
        • *note draw-standard-normal: ❨162❩. (function).
        • *note draw-standard-t: ❨134❩. (function).
        • *note draw-uniform: ❨71❩. (function).
        • *note from-standard-normal: ❨121❩. (function).
        • *note generator: ❨211❩. (generic function).
        • *note generator: ❨213❩. (class).
        • *note left: ❨119❩. (generic function).
        • *note log-pdf: ❨110❩. (generic function).
        • *note make-generator: ❨210❩. (function).
        • *note mean: ❨163❩. (generic function).
        • *note next: ❨34❩. (function).
        • *note nu: ❨43❩. (generic function).
        • *note pdf: ❨180❩. (function).
        • *note probabilities: ❨158❩. (generic function).
        • *note quantile: ❨189❩. (generic function).
        • *note r-bernoulli: ❨93❩. (function).
        • *note r-bernoulli: ❨94❩. (structure).
        • *note r-beta: ❨185❩. (function).
        • *note r-beta: ❨186❩. (structure).
        • *note r-binomial: ❨47❩. (function).
        • *note r-binomial: ❨48❩. (structure).
        • *note r-chi-square: ❨197❩. (function).
        • *note r-discrete: ❨35❩. (function).
        • *note r-discrete: ❨36❩. (structure).
        • *note r-exponential: ❨139❩. (function).
        • *note r-exponential: ❨140❩. (structure).
        • *note r-gamma: ❨57❩. (function).
        • *note r-gamma: ❨58❩. (structure).
        • *note r-geometric: ❨88❩. (function).
        • *note r-geometric: ❨89❩. (structure).
        • *note r-inverse-chi-square: ❨133❩. (function).
        • *note r-inverse-gamma: ❨129❩. (function).
        • *note r-inverse-gamma: ❨130❩. (structure).
        • *note r-log-normal: ❨53❩. (function).
        • *note r-log-normal: ❨54❩. (structure).
        • *note r-normal: ❨206❩. (function).
        • *note r-normal: ❨207❩. (structure).
        • *note r-rayleigh: ❨198❩. (function).
        • *note r-rayleigh: ❨199❩. (structure).
        • *note r-t: ❨96❩. (function).
        • *note r-t: ❨97❩. (structure).
        • *note r-truncated-normal: ❨205❩. (function).
        • *note r-uniform: ❨101❩. (function).
        • *note r-uniform: ❨102❩. (structure).
        • *note randu: ❨201❩. (class).
        • *note rate: ❨41❩. (generic function).
        • *note right: ❨178❩. (generic function).
        • *note scale: ❨182❩. (generic function).
        • *note standard-deviation: ❨219❩. (generic function).
        • *note t-scale-to-variance-coefficient: ❨224❩. (function).
        • *note to-standard-normal: ❨51❩. (function).
        • *note transputer: ❨136❩. (class).
        • *note variance: ❨72❩. (generic function).
        • *note waterman14: ❨221❩. (class).
*Internals*
        • *note %next-double-float: ❨253❩. (function).
        • *note %next-integer: ❨402❩. (function).
        • *note %next-single-float: ❨356❩. (function).
        • *note *default-generator-type*: ❨391❩. (special variable).
        • *note +normal-log-pdf-constant+: ❨367❩. (constant).
        • *note a: ❨376❩. (generic reader).
        • *note cdf-gamma%: ❨324❩. (function).
        • *note cdf-gamma%+: ❨301❩. (function).
        • *note cdf-normal%: ❨355❩. (function).
        • *note check-probability: ❨326❩. (function).
        • *note chunk-length: ❨274❩. (generic reader).
        • *note clone: ❨307❩. (generic function).
        • *note copy-left-truncated-normal: ❨388❩. (function).
        • *note copy-r-bernoulli: ❨226❩. (function).
        • *note copy-r-beta: ❨256❩. (function).
        • *note copy-r-binomial: ❨305❩. (function).
        • *note copy-r-discrete: ❨229❩. (function).
        • *note copy-r-exponential: ❨238❩. (function).
        • *note copy-r-gamma: ❨291❩. (function).
        • *note copy-r-geometric: ❨397❩. (function).
        • *note copy-r-inverse-gamma: ❨380❩. (function).
        • *note copy-r-log-normal: ❨383❩. (function).
        • *note copy-r-normal: ❨316❩. (function).
        • *note copy-r-rayleigh: ❨344❩. (function).
        • *note copy-r-t: ❨280❩. (function).
        • *note copy-r-uniform: ❨259❩. (function).
        • *note copy-r-univariate: ❨340❩. (function).
        • *note copy-state: ❨321❩. (generic function).
        • *note default-seed: ❨271❩. (generic reader).
        • *note define-rv: ❨359❩. (macro).
        • *note draw-bernoulli-bit: ❨343❩. (function).
        • *note draw-left-truncated-standard-normal: ❨398❩. (function).
        • *note draw-standard-gamma1: ❨297❩. (function).
        • *note generate-seed: ❨309❩. (function).
        • *note generate-state: ❨244❩. (generic function).
        • *note left-truncated-normal: ❨332❩. (function).
        • *note left-truncated-normal: ❨333❩. (structure).
        • *note left-truncated-normal-alpha: ❨386❩. (reader).
        • *note (setf left-truncated-normal-alpha): ❨387❩. (writer).
        • *note left-truncated-normal-left: ❨261❩. (reader).
        • *note (setf left-truncated-normal-left): ❨262❩. (writer).
        • *note left-truncated-normal-left-standardized: ❨248❩.
          (reader).
        • *note (setf left-truncated-normal-left-standardized): ❨249❩.
          (writer).
        • *note left-truncated-normal-m0: ❨345❩. (reader).
        • *note (setf left-truncated-normal-m0): ❨346❩. (writer).
        • *note left-truncated-normal-mu: ❨287❩. (reader).
        • *note (setf left-truncated-normal-mu): ❨288❩. (writer).
        • *note left-truncated-normal-p: ❨379❩. (function).
        • *note left-truncated-normal-sigma: ❨381❩. (reader).
        • *note (setf left-truncated-normal-sigma): ❨382❩. (writer).
        • *note m: ❨254❩. (generic reader).
        • *note make-left-truncated-normal: ❨250❩. (function).
        • *note make-r-bernoulli: ❨298❩. (function).
        • *note make-r-beta: ❨270❩. (function).
        • *note make-r-binomial: ❨257❩. (function).
        • *note make-r-discrete: ❨390❩. (function).
        • *note make-r-exponential: ❨306❩. (function).
        • *note make-r-gamma: ❨260❩. (function).
        • *note make-r-geometric: ❨225❩. (function).
        • *note make-r-inverse-gamma: ❨389❩. (function).
        • *note make-r-log-normal: ❨378❩. (function).
        • *note make-r-normal: ❨392❩. (function).
        • *note make-r-rayleigh: ❨278❩. (function).
        • *note make-r-t: ❨273❩. (function).
        • *note make-r-uniform: ❨286❩. (function).
        • *note make-r-univariate: ❨401❩. (function).
        • *note n: ❨372❩. (generic function).
        • *note next-chunk: ❨384❩. (generic function).
        • *note next-real: ❨368❩. (generic function).
        • *note pdf-gamma: ❨285❩. (function).
        • *note pdf-gamma%: ❨364❩. (function).
        • *note pdf-gamma*: ❨325❩. (function).
        • *note pdf-gamma+: ❨247❩. (function).
        • *note pdf-normal%: ❨304❩. (function).
        • *note pr: ❨327❩. (generic function).
        • *note quantile-normal%: ❨295❩. (function).
        • *note r-bernoulli-p: ❨296❩. (function).
        • *note r-bernoulli-pr: ❨263❩. (reader).
        • *note (setf r-bernoulli-pr): ❨264❩. (writer).
        • *note r-beta-alpha: ❨353❩. (reader).
        • *note (setf r-beta-alpha): ❨354❩. (writer).
        • *note r-beta-beta: ❨232❩. (reader).
        • *note (setf r-beta-beta): ❨233❩. (writer).
        • *note r-beta-p: ❨265❩. (function).
        • *note r-binomial-n: ❨227❩. (reader).
        • *note (setf r-binomial-n): ❨228❩. (writer).
        • *note r-binomial-p: ❨341❩. (function).
        • *note r-binomial-pr: ❨370❩. (reader).
        • *note (setf r-binomial-pr): ❨371❩. (writer).
        • *note r-discrete-alias: ❨266❩. (reader).
        • *note (setf r-discrete-alias): ❨267❩. (writer).
        • *note r-discrete-n-float: ❨251❩. (reader).
        • *note (setf r-discrete-n-float): ❨252❩. (writer).
        • *note r-discrete-p: ❨349❩. (function).
        • *note r-discrete-prob: ❨239❩. (reader).
        • *note (setf r-discrete-prob): ❨240❩. (writer).
        • *note r-discrete-probabilities: ❨276❩. (reader).
        • *note (setf r-discrete-probabilities): ❨277❩. (writer).
        • *note r-exponential-p: ❨375❩. (function).
        • *note r-exponential-rate: ❨268❩. (reader).
        • *note (setf r-exponential-rate): ❨269❩. (writer).
        • *note r-gamma-alpha: ❨302❩. (reader).
        • *note (setf r-gamma-alpha): ❨303❩. (writer).
        • *note r-gamma-beta: ❨347❩. (reader).
        • *note (setf r-gamma-beta): ❨348❩. (writer).
        • *note r-gamma-p: ❨292❩. (function).
        • *note r-geometric-p: ❨279❩. (function).
        • *note r-geometric-pr: ❨360❩. (reader).
        • *note (setf r-geometric-pr): ❨361❩. (writer).
        • *note r-inverse-gamma-alpha: ❨319❩. (reader).
        • *note (setf r-inverse-gamma-alpha): ❨320❩. (writer).
        • *note r-inverse-gamma-beta: ❨393❩. (reader).
        • *note (setf r-inverse-gamma-beta): ❨394❩. (writer).
        • *note r-inverse-gamma-p: ❨331❩. (function).
        • *note r-log-normal-log-mean: ❨357❩. (reader).
        • *note (setf r-log-normal-log-mean): ❨358❩. (writer).
        • *note r-log-normal-log-sd: ❨299❩. (reader).
        • *note (setf r-log-normal-log-sd): ❨300❩. (writer).
        • *note r-log-normal-p: ❨350❩. (function).
        • *note r-normal-mean: ❨241❩. (reader).
        • *note (setf r-normal-mean): ❨242❩. (writer).
        • *note r-normal-p: ❨258❩. (function).
        • *note r-normal-sd: ❨293❩. (reader).
        • *note (setf r-normal-sd): ❨294❩. (writer).
        • *note r-rayleigh-p: ❨403❩. (function).
        • *note r-rayleigh-scale: ❨365❩. (reader).
        • *note (setf r-rayleigh-scale): ❨366❩. (writer).
        • *note r-t-mean: ❨351❩. (reader).
        • *note (setf r-t-mean): ❨352❩. (writer).
        • *note r-t-nu: ❨395❩. (reader).
        • *note (setf r-t-nu): ❨396❩. (writer).
        • *note r-t-p: ❨230❩. (function).
        • *note r-t-scale: ❨317❩. (reader).
        • *note (setf r-t-scale): ❨318❩. (writer).
        • *note r-uniform-left: ❨399❩. (reader).
        • *note (setf r-uniform-left): ❨400❩. (writer).
        • *note r-uniform-p: ❨315❩. (function).
        • *note r-uniform-right: ❨362❩. (reader).
        • *note (setf r-uniform-right): ❨363❩. (writer).
        • *note r-uniform-width: ❨289❩. (reader).
        • *note (setf r-uniform-width): ❨290❩. (writer).
        • *note r-univariate: ❨374❩. (structure).
        • *note r-univariate-p: ❨342❩. (function).
        • *note s^2: ❨313❩. (generic function).
        • *note sd: ❨311❩. (generic function).
        • *note simple-multiplicative-congruential: ❨281❩. (class).
        • *note standard-gamma1-d-c: ❨310❩. (function).
        • *note state: ❨234❩. (generic reader).
        • *note (setf state): ❨236❩. (generic writer).
        • *note truncated-normal-moments%: ❨231❩. (function).
        • *note truncated-normal-optimal-alpha: ❨243❩. (function).


File: distributions.info,  Node: Definitions,  Next: Indexes,  Prev: Packages,  Up: Top

4 Definitions
*************

Definitions are sorted by export status, category, package, and then by
lexicographic order.

* Menu:

* Public Interface::
* Internals::


File: distributions.info,  Node: Public Interface,  Next: Internals,  Prev: Definitions,  Up: Definitions

4.1 Public Interface
====================

* Menu:

* Public macros::
* Public ordinary functions::
* Public generic functions::
* Public standalone methods::
* Public structures::
* Public classes::
* Public types::


File: distributions.info,  Node: Public macros,  Next: Public ordinary functions,  Prev: Public Interface,  Up: Public Interface

4.1.1 Macros
------------

 -- Macro: maybe-ignore-constant (ignore-constant? value constant)
     Handle a constant that is calculated only when IGNORE-CONSTANT? is
     NIL and VALUE is not negative infinity (represented by NIL).
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.
 -- Macro: try ((&rest bindings) condition value)
     Evaluate bindings (expanding into LET+, so all features can be
     used) until condition is satisfied, then return value.
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.
 -- Macro: with-floats ((&rest variables) &body body)
     Rebind each variable, coerced to the internal float type used by
     DISTRIBUTIONS.
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.


File: distributions.info,  Node: Public ordinary functions,  Next: Public generic functions,  Prev: Public macros,  Up: Public Interface

4.1.2 Ordinary functions
------------------------

 -- Function: as-float (x)
     Return the argument coerced to the DISTRIBUTIONS library’s internal
     float type.
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.
 -- Function: as-float-probabilities (vector)
     Normalize vector as probabilities, assert that all are positive,
     return them as a VECTOR-DOUBLE-FLOAT. Vector is always copied.
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.
 -- Function: as-float-vector (vector &key copy?)
     Return VECTOR converted to another vector with elements converted
     to INTERNAL-FLOAT if necessary.  When COPY?, the vector is always
     copied.
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.
 -- Function: distinct-random-integers (count limit &key rng)
     Return a vector of COUNT distinct random integers, in increasing
     order, drawn from the uniform discrete distribution on {0 , ...,
     limit-1}.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
 -- Function: distinct-random-integers-dense (count limit &key rng)
     Implementation of DISTINCT-RANDOM-INTEGERS when count/limit is
     (relatively) high.  Implements algorithm S from @cite{taocp3}, p
     142.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
 -- Function: draw-bernoulli (p &key rng)
     Return T with probability p, otherwise NIL. Rationals are handled
     exactly.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
 -- Function: draw-binomial (p n &key rng)
     Return the number of successes out of N Bernoulli trials with
     probability of success P.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
 -- Function: draw-exponential (rate &key rng)
     Return a random variable from the Exponential(rate) distribution
     which has density rate*exp(-rate*x) for x>=0 and 0 for x<0.  rate >
     0.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
 -- Function: draw-geometric (p &key rng)
     Return the number of Bernoulli trials, with probability of success
     P, that were needed to reach the first success.  This is >= 1.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
 -- Function: draw-poisson (lamda &key rng)
     Return the number of events that occur with probability LAMDA. The
     algorithm is from Donald E. Knuth (1969).  Seminumerical
     Algorithms.  The Art of Computer Programming, Volume 2.  Addison
     Wesley.  WARNING: It’s simple but only linear in the return value K
     and is numerically unstable for large LAMDA.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note poisson.lisp: ❨23❩.
 -- Function: draw-rayleigh (scale &key rng)
     Return a random variable from the Rayleigh(scale) distribution,
     where scale > 0 and density x * exp(-x^2 / (2 scale^2)) / scale^2
     for x>=0 and 0 for x<0.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
 -- Function: draw-standard-exponential (&key rng)
     Return a random variable from the Exponential(1) distribution,
     which has density exp(-x) for x>=0 and 0 for x<0.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
 -- Function: draw-standard-normal (&key rng)
     Draw a random number from N(0,1).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: draw-standard-t (nu &key rng)
     Draw a standard T random variate, with NU degrees of freedom.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
 -- Function: draw-uniform (left right &key rng)
     Return a random variable from the uniform distribution between LEFT
     and RIGHT. It’s type is the same as that of (- LEFT RIGHT).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
 -- Function: from-standard-normal (x mu sigma)
     Scale x from standard normal.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: make-generator (&key seed type)
     Make a random number generator object.  SEED can be any of NIL, T,
     an other generator, an integer, or any type of seed that a
     generator of type TYPE supports: - NIL: the generator’s STD-SEED is
     used;
     - T: a random seed is used;
     - a generator: a clone is returned;
     - otherwise: SEED is used as depends on the generator.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
 -- Function: next (limit &optional rng)
     Generates a uniformly distributed pseudo-random number greater than
     or equal to zero and less than LIMIT. RNG, if supplied, is the
     random generator to use.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
 -- Function: pdf (rv x &optional ignore-constant?)
     Probability distribution function of RANDOM-VARIABLE at X. See
     LOG-PDF for the semantics of IGNORE-CONSTANT?.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
 -- Function: r-bernoulli (pr)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
 -- Function: r-beta (alpha beta)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
 -- Function: r-binomial (pr n)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
 -- Function: r-chi-square (nu)
     Chi-square distribution with NU degrees of freedom.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note chi-square.lisp: ❨17❩.
 -- Function: r-discrete (probabilities)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
 -- Function: r-exponential (rate)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
 -- Function: r-gamma (alpha beta)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: r-geometric (pr)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
 -- Function: r-inverse-chi-square (nu &optional s^2)
     Generalized inverse chi-square distribution.  Reparametrized to
     INVERSE-GAMMA.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note chi-square.lisp: ❨17❩.
 -- Function: r-inverse-gamma (alpha beta)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: r-log-normal (log-mean log-sd)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
 -- Function: r-normal (&optional mean variance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: r-rayleigh (scale)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
 -- Function: r-t (mean scale nu)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
 -- Function: r-truncated-normal (left right &optional mu sigma)
     Truncated normal distribution.  If LEFT or RIGHT is NIL, it
     corresponds to -/+ infinity.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Function: r-uniform (left right)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
 -- Function: t-scale-to-variance-coefficient (nu)
     Return the coefficient that multiplies the Sigma matrix or the
     squared scale to get the variance of a (multivariate) Student-T
     distribution.  Also checks that nu > 2, ie the variance is defined.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
 -- Function: to-standard-normal (x mu sigma)
     Scale x to standard normal.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.


File: distributions.info,  Node: Public generic functions,  Next: Public standalone methods,  Prev: Public ordinary functions,  Up: Public Interface

4.1.3 Generic functions
-----------------------

 -- Generic Function: alpha (r-gamma0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: alpha ((r-beta0 *note r-beta: ❨186❩.))
               *Source*
                    *note beta.lisp: ❨18❩.
           -- Method: alpha ((r-inverse-gamma0 *note r-inverse-gamma:
                    ❨130❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: alpha ((r-gamma0 *note r-gamma: ❨58❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
 -- Generic Function: beta (r-gamma0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: beta ((r-beta0 *note r-beta: ❨186❩.))
               *Source*
                    *note beta.lisp: ❨18❩.
           -- Method: beta ((r-inverse-gamma0 *note r-inverse-gamma:
                    ❨130❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: beta ((r-gamma0 *note r-gamma: ❨58❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
 -- Generic Function: cdf (random-variable x)
     Cumulative distribution function of RANDOM-VARIABLE at X.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
     *Methods*
           -- Method: cdf ((r-bernoulli0 *note r-bernoulli: ❨94❩.) x)
               *Source*
                    *note bernoulli.lisp: ❨20❩.
           -- Method: cdf ((r-rayleigh0 *note r-rayleigh: ❨199❩.) x)
               *Source*
                    *note rayleigh.lisp: ❨19❩.
           -- Method: cdf ((r-gamma0 *note r-gamma: ❨58❩.) x)
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: cdf ((left-truncated-normal0 *note
                    left-truncated-normal: ❨333❩.) x)
               *Source*
                    *note truncated-normal.lisp: ❨14❩.
           -- Method: cdf ((r-log-normal0 *note r-log-normal: ❨54❩.) x)
               *Source*
                    *note log-normal.lisp: ❨13❩.
           -- Method: cdf ((r-normal0 *note r-normal: ❨207❩.) x)
               *Source*
                    *note normal.lisp: ❨12❩.
           -- Method: cdf ((r-exponential0 *note r-exponential: ❨140❩.)
                    x)
               *Source*
                    *note exponential.lisp: ❨11❩.
           -- Method: cdf ((r-uniform0 *note r-uniform: ❨102❩.) x)
               *Source*
                    *note uniform.lisp: ❨10❩.
           -- Method: cdf ((instance *note r-discrete: ❨36❩.) i)
               *Source*
                    *note discrete.lisp: ❨9❩.
 -- Generic Function: draw (random-variable &key rng &allow-other-keys)
     Draw random variates.  Can also be used on generators.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
     *Methods*
           -- Method: draw ((r-geometric0 *note r-geometric: ❨89❩.) &key
                    rng)
               *Source*
                    *note geometric.lisp: ❨22❩.
           -- Method: draw ((r-binomial0 *note r-binomial: ❨48❩.) &key
                    rng)
               *Source*
                    *note binomial.lisp: ❨21❩.
           -- Method: draw ((r-bernoulli0 *note r-bernoulli: ❨94❩.) &key
                    rng)
               *Source*
                    *note bernoulli.lisp: ❨20❩.
           -- Method: draw ((r-rayleigh0 *note r-rayleigh: ❨199❩.) &key
                    rng)
               *Source*
                    *note rayleigh.lisp: ❨19❩.
           -- Method: draw ((r-beta0 *note r-beta: ❨186❩.) &key rng)
               *Source*
                    *note beta.lisp: ❨18❩.
           -- Method: draw ((r-inverse-gamma0 *note r-inverse-gamma:
                    ❨130❩.) &key rng)
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: draw ((r-gamma0 *note r-gamma: ❨58❩.) &key rng)
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: draw ((r-t0 *note r-t: ❨97❩.) &key rng)
               *Source*
                    *note t-distribution.lisp: ❨15❩.
           -- Method: draw ((left-truncated-normal0 *note
                    left-truncated-normal: ❨333❩.) &key rng)
               *Source*
                    *note truncated-normal.lisp: ❨14❩.
           -- Method: draw ((r-log-normal0 *note r-log-normal: ❨54❩.)
                    &key rng)
               *Source*
                    *note log-normal.lisp: ❨13❩.
           -- Method: draw ((r-normal0 *note r-normal: ❨207❩.) &key rng)
               *Source*
                    *note normal.lisp: ❨12❩.
           -- Method: draw ((r-exponential0 *note r-exponential: ❨140❩.)
                    &key rng)
               *Source*
                    *note exponential.lisp: ❨11❩.
           -- Method: draw ((r-uniform0 *note r-uniform: ❨102❩.) &key
                    rng)
               *Source*
                    *note uniform.lisp: ❨10❩.
           -- Method: draw ((instance *note r-discrete: ❨36❩.) &key rng)
               *Source*
                    *note discrete.lisp: ❨9❩.
           -- Method: draw ((function function) &key rng)
 -- Generic Function: generator (random-variable &key rng)
     Return a closure that returns random draws.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
     *Methods*
           -- Method: generator (random-variable &key rng)
 -- Generic Function: left (r-uniform0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: left ((r-uniform0 *note r-uniform: ❨102❩.))
               *Source*
                    *note uniform.lisp: ❨10❩.
 -- Generic Function: log-pdf (random-variable x &optional
          ignore-constant?)
     Log of probability distribution function of RANDOM-VARIABLE at X.
     NIL corresponds to log(-infinity).  When IGNORE-CONSTANT?, the
     result may be shifted by an arbitrary real constant that does not
     change between calls of the same RANDOM-VARIABLE. This may save
     computation, and is useful for MCMC methods, etc.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
     *Methods*
           -- Method: log-pdf ((r-inverse-gamma0 *note r-inverse-gamma:
                    ❨130❩.) x &optional ignore-constant?)
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: log-pdf ((r-gamma0 *note r-gamma: ❨58❩.) x
                    &optional ignore-constant?)
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: log-pdf ((left-truncated-normal0 *note
                    left-truncated-normal: ❨333❩.) x &optional
                    ignore-constant?)
               *Source*
                    *note truncated-normal.lisp: ❨14❩.
           -- Method: log-pdf ((r-log-normal0 *note r-log-normal: ❨54❩.)
                    x &optional ignore-constant?)
               *Source*
                    *note log-normal.lisp: ❨13❩.
           -- Method: log-pdf ((r-normal0 *note r-normal: ❨207❩.) x
                    &optional ignore-constant?)
               *Source*
                    *note normal.lisp: ❨12❩.
           -- Method: log-pdf ((r-exponential0 *note r-exponential:
                    ❨140❩.) x &optional ignore-constant?)
               *Source*
                    *note exponential.lisp: ❨11❩.
           -- Method: log-pdf ((r-uniform0 *note r-uniform: ❨102❩.) x
                    &optional ignore-constant?)
               *Source*
                    *note uniform.lisp: ❨10❩.
           -- Method: log-pdf ((instance *note r-discrete: ❨36❩.) i
                    &optional ignore-constant?)
               *Source*
                    *note discrete.lisp: ❨9❩.
 -- Generic Function: mean (random-variable)
     Mean of random variable.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
     *Methods*
           -- Method: mean ((r-geometric0 *note r-geometric: ❨89❩.))
               *Source*
                    *note geometric.lisp: ❨22❩.
           -- Method: mean ((r-binomial0 *note r-binomial: ❨48❩.))
               *Source*
                    *note binomial.lisp: ❨21❩.
           -- Method: mean ((r-bernoulli0 *note r-bernoulli: ❨94❩.))
               *Source*
                    *note bernoulli.lisp: ❨20❩.
           -- Method: mean ((r-rayleigh0 *note r-rayleigh: ❨199❩.))
               *Source*
                    *note rayleigh.lisp: ❨19❩.
           -- Method: mean ((r-beta0 *note r-beta: ❨186❩.))
               *Source*
                    *note beta.lisp: ❨18❩.
           -- Method: mean ((r-inverse-gamma0 *note r-inverse-gamma:
                    ❨130❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: mean ((r-gamma0 *note r-gamma: ❨58❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: mean ((r-t0 *note r-t: ❨97❩.))
               *Source*
                    *note t-distribution.lisp: ❨15❩.
           -- Method: mean ((left-truncated-normal0 *note
                    left-truncated-normal: ❨333❩.))
               *Source*
                    *note truncated-normal.lisp: ❨14❩.
           -- Method: mean ((r-log-normal0 *note r-log-normal: ❨54❩.))
               *Source*
                    *note log-normal.lisp: ❨13❩.
           -- Method: mean ((r-normal0 *note r-normal: ❨207❩.))
               *Source*
                    *note normal.lisp: ❨12❩.
           -- Method: mean ((r-exponential0 *note r-exponential:
                    ❨140❩.))
               *Source*
                    *note exponential.lisp: ❨11❩.
           -- Method: mean ((r-uniform0 *note r-uniform: ❨102❩.))
               *Source*
                    *note uniform.lisp: ❨10❩.
           -- Method: mean ((instance *note r-discrete: ❨36❩.))
               *Source*
                    *note discrete.lisp: ❨9❩.
 -- Generic Function: nu (distribution)
     Return the degrees of freedom when applicable.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
     *Methods*
           -- Method: nu ((r-inverse-gamma *note r-inverse-gamma:
                    ❨130❩.))
               *Source*
                    *note chi-square.lisp: ❨17❩.
           -- Method: nu ((r-gamma *note r-gamma: ❨58❩.))
               *Source*
                    *note chi-square.lisp: ❨17❩.
           -- Method: nu ((r-t0 *note r-t: ❨97❩.))
               *Source*
                    *note t-distribution.lisp: ❨15❩.
 -- Generic Function: probabilities (instance)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: probabilities ((instance *note r-discrete: ❨36❩.))
               *Source*
                    *note discrete.lisp: ❨9❩.
 -- Generic Function: quantile (r-uniform0 p)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: quantile ((r-beta0 *note r-beta: ❨186❩.) q)
               *Source*
                    *note beta.lisp: ❨18❩.
           -- Method: quantile ((r-gamma0 *note r-gamma: ❨58❩.) q)
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: quantile ((left-truncated-normal0 *note
                    left-truncated-normal: ❨333❩.) q)
               *Source*
                    *note truncated-normal.lisp: ❨14❩.
           -- Method: quantile ((r-log-normal0 *note r-log-normal:
                    ❨54❩.) q)
               *Source*
                    *note log-normal.lisp: ❨13❩.
           -- Method: quantile ((r-normal0 *note r-normal: ❨207❩.) q)
               *Source*
                    *note normal.lisp: ❨12❩.
           -- Method: quantile ((r-exponential0 *note r-exponential:
                    ❨140❩.) p)
               *Source*
                    *note exponential.lisp: ❨11❩.
           -- Method: quantile ((r-uniform0 *note r-uniform: ❨102❩.) p)
               *Source*
                    *note uniform.lisp: ❨10❩.
 -- Generic Function: rate (r-exponential0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: rate ((r-exponential0 *note r-exponential:
                    ❨140❩.))
               *Source*
                    *note exponential.lisp: ❨11❩.
 -- Generic Function: right (r-uniform0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: right ((r-uniform0 *note r-uniform: ❨102❩.))
               *Source*
                    *note uniform.lisp: ❨10❩.
 -- Generic Function: scale (r-t0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: scale ((r-rayleigh0 *note r-rayleigh: ❨199❩.))
               *Source*
                    *note rayleigh.lisp: ❨19❩.
           -- Method: scale ((r-t0 *note r-t: ❨97❩.))
               *Source*
                    *note t-distribution.lisp: ❨15❩.
 -- Generic Function: standard-deviation (random-variable)
     Standard deviation of random variable.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
     *Methods*
           -- Method: standard-deviation ((random-variable *note
                    r-univariate: ❨374❩.))
 -- Generic Function: variance (random-variable)
     Variance of random variable.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
     *Methods*
           -- Method: variance ((r-geometric0 *note r-geometric: ❨89❩.))
               *Source*
                    *note geometric.lisp: ❨22❩.
           -- Method: variance ((r-binomial0 *note r-binomial: ❨48❩.))
               *Source*
                    *note binomial.lisp: ❨21❩.
           -- Method: variance ((r-bernoulli0 *note r-bernoulli: ❨94❩.))
               *Source*
                    *note bernoulli.lisp: ❨20❩.
           -- Method: variance ((r-rayleigh0 *note r-rayleigh: ❨199❩.))
               *Source*
                    *note rayleigh.lisp: ❨19❩.
           -- Method: variance ((r-beta0 *note r-beta: ❨186❩.))
               *Source*
                    *note beta.lisp: ❨18❩.
           -- Method: variance ((r-inverse-gamma0 *note r-inverse-gamma:
                    ❨130❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: variance ((r-gamma0 *note r-gamma: ❨58❩.))
               *Source*
                    *note gamma.lisp: ❨16❩.
           -- Method: variance ((r-t0 *note r-t: ❨97❩.))
               *Source*
                    *note t-distribution.lisp: ❨15❩.
           -- Method: variance ((left-truncated-normal0 *note
                    left-truncated-normal: ❨333❩.))
               *Source*
                    *note truncated-normal.lisp: ❨14❩.
           -- Method: variance ((r-log-normal0 *note r-log-normal:
                    ❨54❩.))
               *Source*
                    *note log-normal.lisp: ❨13❩.
           -- Method: variance ((r-normal0 *note r-normal: ❨207❩.))
               *Source*
                    *note normal.lisp: ❨12❩.
           -- Method: variance ((r-exponential0 *note r-exponential:
                    ❨140❩.))
               *Source*
                    *note exponential.lisp: ❨11❩.
           -- Method: variance ((r-uniform0 *note r-uniform: ❨102❩.))
               *Source*
                    *note uniform.lisp: ❨10❩.
           -- Method: variance ((instance *note r-discrete: ❨36❩.))
               *Source*
                    *note discrete.lisp: ❨9❩.


File: distributions.info,  Node: Public standalone methods,  Next: Public structures,  Prev: Public generic functions,  Up: Public Interface

4.1.4 Standalone methods
------------------------

 -- Method: initialize-instance :after ((rng *note generator: ❨213❩.)
          &key seed &allow-other-keys)
     *Source*
          *note generator.lisp: ❨5❩.
 -- Method: initialize-instance :after ((self *note
          simple-multiplicative-congruential: ❨281❩.) &key
          &allow-other-keys)
     *Source*
          *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
 -- Method: num= ((a1 *note r-inverse-gamma: ❨130❩.) (b2 *note
          r-inverse-gamma: ❨130❩.) &optional tolerance3)
     *Package*
          num-utils.num=.
     *Source*
          *note gamma.lisp: ❨16❩.


File: distributions.info,  Node: Public structures,  Next: Public classes,  Prev: Public standalone methods,  Up: Public Interface

4.1.5 Structures
----------------

 -- Structure: r-bernoulli
     Bernoulli(pr) distribution, with probability PR for success and
     1-PR for failure.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨62❩.
             • *note draw: ❨145❩.
             • *note mean: ❨166❩.
             • *note pr: ❨330❩.
             • *note variance: ❨75❩.
     *Direct slots*
           -- Slot: pr
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-bernoulli-pr: ❨263❩.
               *Writers*
                    *note (setf r-bernoulli-pr): ❨264❩.
 -- Structure: r-beta
     Beta(alpha,beta) distribution, with density proportional to
     x^(alpha-1)*(1-x)^(beta-1).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note alpha: ❨107❩.
             • *note beta: ❨123❩.
             • *note draw: ❨147❩.
             • *note mean: ❨168❩.
             • *note quantile: ❨190❩.
             • *note variance: ❨77❩.
     *Direct slots*
           -- Slot: alpha
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-beta-alpha: ❨353❩.
               *Writers*
                    *note (setf r-beta-alpha): ❨354❩.
           -- Slot: beta
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-beta-beta: ❨232❩.
               *Writers*
                    *note (setf r-beta-beta): ❨233❩.
 -- Structure: r-binomial
     Binomial(pr,n) distribution, with N Bernoulli trials with
     probability PR for success.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note draw: ❨144❩.
             • *note mean: ❨165❩.
             • *note n: ❨373❩.
             • *note pr: ❨329❩.
             • *note variance: ❨74❩.
     *Direct slots*
           -- Slot: pr
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-binomial-pr: ❨370❩.
               *Writers*
                    *note (setf r-binomial-pr): ❨371❩.
           -- Slot: n
               *Type*
                    integer
               *Readers*
                    *note r-binomial-n: ❨227❩.
               *Writers*
                    *note (setf r-binomial-n): ❨228❩.
 -- Structure: r-discrete
     Discrete probabilities.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨70❩.
             • *note draw: ❨156❩.
             • *note log-pdf: ❨118❩.
             • *note mean: ❨177❩.
             • *note probabilities: ❨159❩.
             • *note variance: ❨86❩.
     *Direct slots*
           -- Slot: probabilities
               *Type*
                    distributions.internals:float-vector
               *Readers*
                    *note r-discrete-probabilities: ❨276❩.
               *Writers*
                    *note (setf r-discrete-probabilities): ❨277❩.
           -- Slot: prob
               *Type*
                    distributions.internals:float-vector
               *Readers*
                    *note r-discrete-prob: ❨239❩.
               *Writers*
                    *note (setf r-discrete-prob): ❨240❩.
           -- Slot: alias
               *Type*
                    (simple-array fixnum (*))
               *Readers*
                    *note r-discrete-alias: ❨266❩.
               *Writers*
                    *note (setf r-discrete-alias): ❨267❩.
           -- Slot: n-float
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-discrete-n-float: ❨251❩.
               *Writers*
                    *note (setf r-discrete-n-float): ❨252❩.
 -- Structure: r-exponential
     Exponential(rate) distribution, with density rate*exp(-rate*x) for
     x>=0 and 0 for x<0.  rate > 0.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨68❩.
             • *note draw: ❨154❩.
             • *note log-pdf: ❨116❩.
             • *note mean: ❨175❩.
             • *note quantile: ❨195❩.
             • *note rate: ❨42❩.
             • *note variance: ❨84❩.
     *Direct slots*
           -- Slot: rate
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-exponential-rate: ❨268❩.
               *Writers*
                    *note (setf r-exponential-rate): ❨269❩.
 -- Structure: r-gamma
     Gamma(alpha,beta) distribution, with density proportional to
     x^(alpha-1) exp(-x*beta).  Alpha and beta are known as shape and
     inverse scale (or rate) parameters, respectively.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note alpha: ❨109❩.
             • *note beta: ❨125❩.
             • *note cdf: ❨64❩.
             • *note draw: ❨149❩.
             • *note log-pdf: ❨112❩.
             • *note mean: ❨170❩.
             • *note nu: ❨45❩.
             • *note quantile: ❨191❩.
             • *note variance: ❨79❩.
     *Direct slots*
           -- Slot: alpha
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-gamma-alpha: ❨302❩.
               *Writers*
                    *note (setf r-gamma-alpha): ❨303❩.
           -- Slot: beta
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-gamma-beta: ❨347❩.
               *Writers*
                    *note (setf r-gamma-beta): ❨348❩.
 -- Structure: r-geometric
     Geometric(pr) distribution.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note draw: ❨143❩.
             • *note mean: ❨164❩.
             • *note pr: ❨328❩.
             • *note variance: ❨73❩.
     *Direct slots*
           -- Slot: pr
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-geometric-pr: ❨360❩.
               *Writers*
                    *note (setf r-geometric-pr): ❨361❩.
 -- Structure: r-inverse-gamma
     Inverse-Gamma(alpha,beta) distribution, with density p(x)
     proportional to x^(-alpha+1) exp(-beta/x)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note alpha: ❨108❩.
             • *note beta: ❨124❩.
             • *note draw: ❨148❩.
             • *note log-pdf: ❨111❩.
             • *note mean: ❨169❩.
             • *note nu: ❨44❩.
             • *note num=: ❨422❩.
             • *note s^2: ❨314❩.
             • *note variance: ❨78❩.
     *Direct slots*
           -- Slot: alpha
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-inverse-gamma-alpha: ❨319❩.
               *Writers*
                    *note (setf r-inverse-gamma-alpha): ❨320❩.
           -- Slot: beta
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-inverse-gamma-beta: ❨393❩.
               *Writers*
                    *note (setf r-inverse-gamma-beta): ❨394❩.
 -- Structure: r-log-normal
     Log-normal distribution with location log-mean and scale log-sd.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨66❩.
             • *note draw: ❨152❩.
             • *note log-pdf: ❨114❩.
             • *note mean: ❨173❩.
             • *note quantile: ❨193❩.
             • *note variance: ❨82❩.
     *Direct slots*
           -- Slot: log-mean
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-log-normal-log-mean: ❨357❩.
               *Writers*
                    *note (setf r-log-normal-log-mean): ❨358❩.
           -- Slot: log-sd
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-log-normal-log-sd: ❨299❩.
               *Writers*
                    *note (setf r-log-normal-log-sd): ❨300❩.
 -- Structure: r-normal
     Normal(mean,variance) distribution.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨67❩.
             • *note draw: ❨153❩.
             • *note log-pdf: ❨115❩.
             • *note mean: ❨174❩.
             • *note quantile: ❨194❩.
             • *note sd: ❨312❩.
             • *note variance: ❨83❩.
     *Direct slots*
           -- Slot: mean
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-normal-mean: ❨241❩.
               *Writers*
                    *note (setf r-normal-mean): ❨242❩.
           -- Slot: sd
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-normal-sd: ❨293❩.
               *Writers*
                    *note (setf r-normal-sd): ❨294❩.
 -- Structure: r-rayleigh
     Rayleigh(scale) distribution with scale > 0 and density x *
     exp(-x^2 / (2 scale^2)) / scale^2 for x>=0 and 0 for x<0.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨63❩.
             • *note draw: ❨146❩.
             • *note mean: ❨167❩.
             • *note scale: ❨183❩.
             • *note variance: ❨76❩.
     *Direct slots*
           -- Slot: scale
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-rayleigh-scale: ❨365❩.
               *Writers*
                    *note (setf r-rayleigh-scale): ❨366❩.
 -- Structure: r-t
     T(mean,scale,nu) random variate.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note draw: ❨150❩.
             • *note mean: ❨171❩.
             • *note nu: ❨46❩.
             • *note scale: ❨184❩.
             • *note variance: ❨80❩.
     *Direct slots*
           -- Slot: mean
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-t-mean: ❨351❩.
               *Writers*
                    *note (setf r-t-mean): ❨352❩.
           -- Slot: scale
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-t-scale: ❨317❩.
               *Writers*
                    *note (setf r-t-scale): ❨318❩.
           -- Slot: nu
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-t-nu: ❨395❩.
               *Writers*
                    *note (setf r-t-nu): ❨396❩.
 -- Structure: r-uniform
     Uniform(left,right) distribution.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨69❩.
             • *note draw: ❨155❩.
             • *note left: ❨120❩.
             • *note log-pdf: ❨117❩.
             • *note mean: ❨176❩.
             • *note quantile: ❨196❩.
             • *note right: ❨179❩.
             • *note variance: ❨85❩.
     *Direct slots*
           -- Slot: left
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-uniform-left: ❨399❩.
               *Writers*
                    *note (setf r-uniform-left): ❨400❩.
           -- Slot: right
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-uniform-right: ❨362❩.
               *Writers*
                    *note (setf r-uniform-right): ❨363❩.
           -- Slot: width
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note r-uniform-width: ❨289❩.
               *Writers*
                    *note (setf r-uniform-width): ❨290❩.


File: distributions.info,  Node: Public classes,  Next: Public types,  Prev: Public structures,  Up: Public Interface

4.1.6 Classes
-------------

 -- Class: borosh13
     Donald E. Knuth’s Borosh-Niederreiter, The Art of Computer
     Programming, Volume 2, Third Edition, Addison-Wesley, pp 106-108.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
     *Direct superclasses*
          *note simple-multiplicative-congruential: ❨281❩.
     *Direct slots*
           -- Slot: a
               *Initform*
                    1812433253
           -- Slot: chunk-length
               *Initform*
                    32
 -- Class: generator
     Base class for random number generators.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
     *Direct subclasses*
          *note simple-multiplicative-congruential: ❨281❩.
     *Direct methods*
             • *note chunk-length: ❨275❩.
             • *note copy-state: ❨322❩.
             • *note default-seed: ❨272❩.
             • *note generate-state: ❨246❩.
             • *note initialize-instance: ❨425❩.
             • *note (setf state): ❨237❩.
             • *note state: ❨235❩.
     *Direct slots*
           -- Slot: state
               All information needed by the generator to create the
               next chunk of random bits.  This state is modified after
               each call to NEXT-CHUNK.
               *Initargs*
                    :state
               *Readers*
                    *note state: ❨235❩.
               *Writers*
                    *note (setf state): ❨237❩.
           -- Slot: min
               The minimum value return by NEXT-CHUNK.
               *Package*
                    common-lisp.
               *Initargs*
                    :min
           -- Slot: max
               The maximum value return by NEXT-CHUNK.
               *Package*
                    common-lisp.
               *Initargs*
                    :max
           -- Slot: chunk-length
               The length in bits of the integer returned by NEXT-CHUNK.
               *Readers*
                    *note chunk-length: ❨275❩.
               *Writers*
                    This slot is read-only.
           -- Slot: default-seed
               The seed used by default, when the seed is NIL.
               *Initform*
                    0
               *Readers*
                    *note default-seed: ❨272❩.
               *Writers*
                    This slot is read-only.
 -- Class: randu
     The poor IBM randu generator.  Park and Miller, Random Number
     Generators: Good ones are hard to find, Communications of the ACM,
     October 1988, Volume 31, No 10, pp 1192-1201.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
     *Direct superclasses*
          *note simple-multiplicative-congruential: ❨281❩.
     *Direct slots*
           -- Slot: a
               *Initform*
                    65539
           -- Slot: chunk-length
               *Initform*
                    31
 -- Class: transputer
     INMOS Transputer Development System generator.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
     *Direct superclasses*
          *note simple-multiplicative-congruential: ❨281❩.
     *Direct slots*
           -- Slot: a
               *Initform*
                    1664525
           -- Slot: chunk-length
               *Initform*
                    32
 -- Class: waterman14
     Donald E. Knuth’s Waterman, The Art of Computer Programming, Volume
     2, Third Edition, Addison-Wesley, pp 106-108.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
     *Direct superclasses*
          *note simple-multiplicative-congruential: ❨281❩.
     *Direct slots*
           -- Slot: a
               *Initform*
                    1566083941
           -- Slot: chunk-length
               *Initform*
                    32


File: distributions.info,  Node: Public types,  Prev: Public classes,  Up: Public Interface

4.1.7 Types
-----------

 -- Type: float-vector (&optional n)
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.
 -- Type: internal-float (&optional lower-limit upper-limit)
     Type used for internal representation of floats in the
     DISTRIBUTIONS library.
     *Package*
          *note distributions.internals: ❨24❩.
     *Source*
          *note internals.lisp: ❨4❩.


File: distributions.info,  Node: Internals,  Prev: Public Interface,  Up: Definitions

4.2 Internals
=============

* Menu:

* Private constants::
* Private special variables::
* Private macros::
* Private ordinary functions::
* Private generic functions::
* Private structures::
* Private classes::


File: distributions.info,  Node: Private constants,  Next: Private special variables,  Prev: Internals,  Up: Internals

4.2.1 Constants
---------------

 -- Constant: +normal-log-pdf-constant+
     Normalizing constant for a standard normal PDF.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.


File: distributions.info,  Node: Private special variables,  Next: Private macros,  Prev: Private constants,  Up: Internals

4.2.2 Special variables
-----------------------

 -- Special Variable: *default-generator-type*
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.


File: distributions.info,  Node: Private macros,  Next: Private ordinary functions,  Prev: Private special variables,  Up: Internals

4.2.3 Macros
------------

 -- Macro: define-rv (name constructor-lambda-list options slots
          constructor-form &rest methods)
     Define a random variable, abstracting from the representation.
     Syntax:

     NAME is a symbol, and will name the class and the creation
     function.

     CONSTRUCTOR-LAMBDA-LIST will be used to wrap the CONSTRUCTOR-FORM,
     which can use the locally define macro (MAKE :slot-name value1 ...)
     to initialize slots.

     SLOTS is a list of (slot-name &key type read-only reader) slot
     specifications.  When READER is T, SLOT-NAME is used instead,
     otherwise a method is defined using the given symbol.

     OPTIONS is (&key documentation instance), the default instance is a
     gensym.

     METHODS are (function-name lambda-list &body body), with (INSTANCE
     NAME) prepended to the lambda-list, ie the instance is accessible
     using INSTANCE. Also, within BODY, slots are accessible by their
     names.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.


File: distributions.info,  Node: Private ordinary functions,  Next: Private generic functions,  Prev: Private macros,  Up: Internals

4.2.4 Ordinary functions
------------------------

 -- Function: %next-double-float (limit rng)
     Handle the single or double float case of RANDOM. We generate a
     float in [0d0, 1d0) by clobbering the mantissa of 1d0 with random
     bits (52 bits); this yields a number in [1d0, 2d0).  Then 1d0 is
     subtracted.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
 -- Function: %next-integer (limit rng)
     Generates an integer greater than or equal to zero and less than
     LIMIT. Successive chunks are concatenated without overlap to
     construct integers larger than a single chunk.  The return value
     has this property: If two integers are generated from the same RNG
     with LIMIT equal to 2^m and 2^n, respectively, then bit k is the
     same in both integers for 0 <= k < min(m,n).  Each call to
     %NEXT-INTEGER consumes at least one chunk; bits left over from
     previous chunks are not re-used.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
 -- Function: %next-single-float (limit rng)
     Handle the single or double float case of RANDOM. We generate a
     float in [0f0, 1f0) by clobbering the mantissa of 1f0 with random
     bits (23 bits); this yields a number in [1f0, 2f0).  Then 1f0 is
     subtracted.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
 -- Function: cdf-gamma% (x shape &key rate scale upper-tail log)
     CDF of Gamma with parameterisation like that of R pgamma
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: cdf-gamma%+ (x k θ)
     Return the cumulative gamma distribution function, shape k>0, scale
     θ>0
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: cdf-normal% (x mu sigma)
     Internal function for normal CDF.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: check-probability (p &optional open)
     Assert that P is a probability (ie a real number between 0 and 1).
     When OPEN is given, it is checked that p is not 0 (:LEFT), 1
     (:RIGHT), or 0/1 (:BOTH).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note defs.lisp: ❨7❩.
 -- Function: copy-left-truncated-normal (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Function: copy-r-bernoulli (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
 -- Function: copy-r-beta (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
 -- Function: copy-r-binomial (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
 -- Function: copy-r-discrete (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
 -- Function: copy-r-exponential (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
 -- Function: copy-r-gamma (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: copy-r-geometric (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
 -- Function: copy-r-inverse-gamma (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: copy-r-log-normal (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
 -- Function: copy-r-normal (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: copy-r-rayleigh (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
 -- Function: copy-r-t (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
 -- Function: copy-r-uniform (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
 -- Function: copy-r-univariate (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
 -- Function: draw-bernoulli-bit (p &key rng)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
 -- Function: draw-left-truncated-standard-normal (left alpha &key rng)
     Draw a left truncated standard normal, using an Exp(alpha,left)
     distribution.  LEFT is the standardized boundary, ALPHA should be
     calculated with TRUNCATED-NORMAL-OPTIMAL-ALPHA.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Function: draw-standard-gamma1 (alpha d c &key rng)
     Return a standard gamma variate (beta=1) with shape parameter alpha
     >= 1.  See Marsaglia and Tsang (2004).  You should precalculate d
     and c using the utility function above.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: generate-seed ()
     Return a 64-bit random seed, based on current time.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
 -- Function: left-truncated-normal (mu sigma left)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Reader: left-truncated-normal-alpha (instance)
 -- Writer: (setf left-truncated-normal-alpha) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Target Slot*
          *note alpha: ❨339❩.
 -- Reader: left-truncated-normal-left (instance)
 -- Writer: (setf left-truncated-normal-left) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Target Slot*
          *note left: ❨336❩.
 -- Reader: left-truncated-normal-left-standardized (instance)
 -- Writer: (setf left-truncated-normal-left-standardized) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Target Slot*
          *note left-standardized: ❨337❩.
 -- Reader: left-truncated-normal-m0 (instance)
 -- Writer: (setf left-truncated-normal-m0) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Target Slot*
          *note m0: ❨338❩.
 -- Reader: left-truncated-normal-mu (instance)
 -- Writer: (setf left-truncated-normal-mu) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Target Slot*
          *note mu: ❨334❩.
 -- Function: left-truncated-normal-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Reader: left-truncated-normal-sigma (instance)
 -- Writer: (setf left-truncated-normal-sigma) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Target Slot*
          *note sigma: ❨335❩.
 -- Function: make-left-truncated-normal (&key mu sigma left
          left-standardized m0 alpha)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Function: make-r-bernoulli (&key pr)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
 -- Function: make-r-beta (&key alpha beta)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
 -- Function: make-r-binomial (&key pr n)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
 -- Function: make-r-discrete (&key probabilities prob alias n-float)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
 -- Function: make-r-exponential (&key rate)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
 -- Function: make-r-gamma (&key alpha beta)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: make-r-geometric (&key pr)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
 -- Function: make-r-inverse-gamma (&key alpha beta)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: make-r-log-normal (&key log-mean log-sd)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
 -- Function: make-r-normal (&key mean sd)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: make-r-rayleigh (&key scale)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
 -- Function: make-r-t (&key mean scale nu)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
 -- Function: make-r-uniform (&key left right width)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
 -- Function: make-r-univariate (&key)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
 -- Function: pdf-gamma (x a b)
     Return the probability density function of a gamma distribution
     with shape a>0, scale b>0 Returns: x^(a-1)*exp(-x/b)/gamma(a)/b^a,
     x>0
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: pdf-gamma% (x shape scale)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: pdf-gamma* (x shape scale)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: pdf-gamma+ (x k θ)
     Return the probability density function where:
     K is the shape of the distribution
     θ (theta) is the scale
     X is the random variate
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: pdf-normal% (x &key mu sigma)
     Direct calculation of the Probability Density of the normal
     distribution.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: quantile-normal% (q mu sigma)
     Internal function for normal quantile.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Function: r-bernoulli-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
 -- Reader: r-bernoulli-pr (instance)
 -- Writer: (setf r-bernoulli-pr) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note bernoulli.lisp: ❨20❩.
     *Target Slot*
          *note pr: ❨95❩.
 -- Reader: r-beta-alpha (instance)
 -- Writer: (setf r-beta-alpha) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
     *Target Slot*
          *note alpha: ❨187❩.
 -- Reader: r-beta-beta (instance)
 -- Writer: (setf r-beta-beta) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
     *Target Slot*
          *note beta: ❨188❩.
 -- Function: r-beta-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note beta.lisp: ❨18❩.
 -- Reader: r-binomial-n (instance)
 -- Writer: (setf r-binomial-n) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
     *Target Slot*
          *note n: ❨50❩.
 -- Function: r-binomial-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
 -- Reader: r-binomial-pr (instance)
 -- Writer: (setf r-binomial-pr) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note binomial.lisp: ❨21❩.
     *Target Slot*
          *note pr: ❨49❩.
 -- Reader: r-discrete-alias (instance)
 -- Writer: (setf r-discrete-alias) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
     *Target Slot*
          *note alias: ❨39❩.
 -- Reader: r-discrete-n-float (instance)
 -- Writer: (setf r-discrete-n-float) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
     *Target Slot*
          *note n-float: ❨40❩.
 -- Function: r-discrete-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
 -- Reader: r-discrete-prob (instance)
 -- Writer: (setf r-discrete-prob) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
     *Target Slot*
          *note prob: ❨38❩.
 -- Reader: r-discrete-probabilities (instance)
 -- Writer: (setf r-discrete-probabilities) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note discrete.lisp: ❨9❩.
     *Target Slot*
          *note probabilities: ❨37❩.
 -- Function: r-exponential-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
 -- Reader: r-exponential-rate (instance)
 -- Writer: (setf r-exponential-rate) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note exponential.lisp: ❨11❩.
     *Target Slot*
          *note rate: ❨141❩.
 -- Reader: r-gamma-alpha (instance)
 -- Writer: (setf r-gamma-alpha) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
     *Target Slot*
          *note alpha: ❨59❩.
 -- Reader: r-gamma-beta (instance)
 -- Writer: (setf r-gamma-beta) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
     *Target Slot*
          *note beta: ❨60❩.
 -- Function: r-gamma-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: r-geometric-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
 -- Reader: r-geometric-pr (instance)
 -- Writer: (setf r-geometric-pr) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note geometric.lisp: ❨22❩.
     *Target Slot*
          *note pr: ❨90❩.
 -- Reader: r-inverse-gamma-alpha (instance)
 -- Writer: (setf r-inverse-gamma-alpha) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
     *Target Slot*
          *note alpha: ❨131❩.
 -- Reader: r-inverse-gamma-beta (instance)
 -- Writer: (setf r-inverse-gamma-beta) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
     *Target Slot*
          *note beta: ❨132❩.
 -- Function: r-inverse-gamma-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Reader: r-log-normal-log-mean (instance)
 -- Writer: (setf r-log-normal-log-mean) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
     *Target Slot*
          *note log-mean: ❨55❩.
 -- Reader: r-log-normal-log-sd (instance)
 -- Writer: (setf r-log-normal-log-sd) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
     *Target Slot*
          *note log-sd: ❨56❩.
 -- Function: r-log-normal-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note log-normal.lisp: ❨13❩.
 -- Reader: r-normal-mean (instance)
 -- Writer: (setf r-normal-mean) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
     *Target Slot*
          *note mean: ❨208❩.
 -- Function: r-normal-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
 -- Reader: r-normal-sd (instance)
 -- Writer: (setf r-normal-sd) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note normal.lisp: ❨12❩.
     *Target Slot*
          *note sd: ❨209❩.
 -- Function: r-rayleigh-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
 -- Reader: r-rayleigh-scale (instance)
 -- Writer: (setf r-rayleigh-scale) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note rayleigh.lisp: ❨19❩.
     *Target Slot*
          *note scale: ❨200❩.
 -- Reader: r-t-mean (instance)
 -- Writer: (setf r-t-mean) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
     *Target Slot*
          *note mean: ❨98❩.
 -- Reader: r-t-nu (instance)
 -- Writer: (setf r-t-nu) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
     *Target Slot*
          *note nu: ❨100❩.
 -- Function: r-t-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
 -- Reader: r-t-scale (instance)
 -- Writer: (setf r-t-scale) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note t-distribution.lisp: ❨15❩.
     *Target Slot*
          *note scale: ❨99❩.
 -- Reader: r-uniform-left (instance)
 -- Writer: (setf r-uniform-left) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
     *Target Slot*
          *note left: ❨103❩.
 -- Function: r-uniform-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
 -- Reader: r-uniform-right (instance)
 -- Writer: (setf r-uniform-right) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
     *Target Slot*
          *note right: ❨104❩.
 -- Reader: r-uniform-width (instance)
 -- Writer: (setf r-uniform-width) (instance)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note uniform.lisp: ❨10❩.
     *Target Slot*
          *note width: ❨105❩.
 -- Function: r-univariate-p (object)
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
 -- Function: standard-gamma1-d-c (alpha)
     Return precalculated constants (values d c), useful for drawing
     from a gamma distribution.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note gamma.lisp: ❨16❩.
 -- Function: truncated-normal-moments% (n mu sigma left right &optional
          m0)
     N=0 gives the total mass of the truncated normal, used for
     normalization,
     N=1 the mean, and N=2 the variance.  where p(x) is the normal
     density.  When LEFT or RIGHT are NIL, they are taken to be - or +
     infinity, respectively.  M0 may be provided for efficiency if would
     be calculated multiple times.  The formulas are from Jawitz (2004).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
 -- Function: truncated-normal-optimal-alpha (left)
     Calculate optimal exponential parameter for left-truncated normals.
     LEFT is the standardized boundary.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.


File: distributions.info,  Node: Private generic functions,  Next: Private structures,  Prev: Private ordinary functions,  Up: Internals

4.2.5 Generic functions
-----------------------

 -- Generic Reader: a (object)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Reader Method: a ((simple-multiplicative-congruential
                    *note simple-multiplicative-congruential: ❨281❩.))
               The multiplier of the sequence x(n+1) = A * x(n) mod M.
               *Source*
                    *note
                    simple-multiplicative-congruential-generators.lisp:
                    ❨6❩.
               *Target Slot*
                    *note a: ❨283❩.
 -- Generic Reader: chunk-length (object)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Reader Method: chunk-length ((generator *note generator:
                    ❨213❩.))
               The length in bits of the integer returned by NEXT-CHUNK.
               *Source*
                    *note generator.lisp: ❨5❩.
               *Target Slot*
                    *note chunk-length: ❨217❩.
 -- Generic Function: clone (self)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: clone ((self *note
                    simple-multiplicative-congruential: ❨281❩.))
               *Source*
                    *note
                    simple-multiplicative-congruential-generators.lisp:
                    ❨6❩.
 -- Generic Function: copy-state (rng)
     Return a deep copy of RNG. The stream of random numbers drawn from
     RNG and its clone should be the same (given you draw according to
     the same distributions).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
     *Methods*
           -- Method: copy-state ((rng *note generator: ❨213❩.))
           -- Method: copy-state ((rng random-state))
 -- Generic Reader: default-seed (object)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Reader Method: default-seed ((generator *note generator:
                    ❨213❩.))
               The seed used by default, when the seed is NIL.
               *Source*
                    *note generator.lisp: ❨5❩.
               *Target Slot*
                    *note default-seed: ❨218❩.
 -- Generic Function: generate-state (rng seed)
     Return a state for a generator of RNG’s type using seed.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generator.lisp: ❨5❩.
     *Methods*
           -- Method: generate-state ((self *note
                    simple-multiplicative-congruential: ❨281❩.) seed)
               *Source*
                    *note
                    simple-multiplicative-congruential-generators.lisp:
                    ❨6❩.
           -- Method: generate-state ((rng *note generator: ❨213❩.)
                    seed)
 -- Generic Reader: m (object)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Reader Method: m ((simple-multiplicative-congruential
                    *note simple-multiplicative-congruential: ❨281❩.))
               The modulo of the sequence x(n+1) = A * x(n) mod M.
               *Source*
                    *note
                    simple-multiplicative-congruential-generators.lisp:
                    ❨6❩.
               *Target Slot*
                    *note m: ❨284❩.
 -- Generic Function: n (r-binomial0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: n ((r-binomial0 *note r-binomial: ❨48❩.))
               *Source*
                    *note binomial.lisp: ❨21❩.
 -- Generic Function: next-chunk (self)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: next-chunk ((self *note
                    simple-multiplicative-congruential: ❨281❩.))
               *Source*
                    *note
                    simple-multiplicative-congruential-generators.lisp:
                    ❨6❩.
 -- Generic Function: next-real (self)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: next-real ((self *note
                    simple-multiplicative-congruential: ❨281❩.))
               *Source*
                    *note
                    simple-multiplicative-congruential-generators.lisp:
                    ❨6❩.
 -- Generic Function: pr (r-bernoulli0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: pr ((r-geometric0 *note r-geometric: ❨89❩.))
               *Source*
                    *note geometric.lisp: ❨22❩.
           -- Method: pr ((r-binomial0 *note r-binomial: ❨48❩.))
               *Source*
                    *note binomial.lisp: ❨21❩.
           -- Method: pr ((r-bernoulli0 *note r-bernoulli: ❨94❩.))
               *Source*
                    *note bernoulli.lisp: ❨20❩.
 -- Generic Function: s^2 (distribution)
     Return the scale when applicable.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
     *Methods*
           -- Method: s^2 ((r-inverse-gamma *note r-inverse-gamma:
                    ❨130❩.))
               *Source*
                    *note chi-square.lisp: ❨17❩.
 -- Generic Function: sd (r-normal0)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Method: sd ((r-normal0 *note r-normal: ❨207❩.))
               *Source*
                    *note normal.lisp: ❨12❩.
 -- Generic Reader: state (object)
 -- Generic Writer: (setf state) (object)
     *Package*
          *note distributions: ❨25❩.
     *Methods*
           -- Reader Method: state ((generator *note generator: ❨213❩.))
           -- Writer Method: (setf state) ((generator *note generator:
                    ❨213❩.))
               All information needed by the generator to create the
               next chunk of random bits.  This state is modified after
               each call to NEXT-CHUNK.
               *Source*
                    *note generator.lisp: ❨5❩.
               *Target Slot*
                    *note state: ❨214❩.


File: distributions.info,  Node: Private structures,  Next: Private classes,  Prev: Private generic functions,  Up: Internals

4.2.6 Structures
----------------

 -- Structure: left-truncated-normal
     Truncated normal distribution with given mu and sigma (corresponds
     to the mean and standard deviation in the untruncated case,
     respectively), on the interval [left, infinity).
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note truncated-normal.lisp: ❨14❩.
     *Direct superclasses*
          *note r-univariate: ❨374❩.
     *Direct methods*
             • *note cdf: ❨65❩.
             • *note draw: ❨151❩.
             • *note log-pdf: ❨113❩.
             • *note mean: ❨172❩.
             • *note quantile: ❨192❩.
             • *note variance: ❨81❩.
     *Direct slots*
           -- Slot: mu
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note left-truncated-normal-mu: ❨287❩.
               *Writers*
                    *note (setf left-truncated-normal-mu): ❨288❩.
           -- Slot: sigma
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note left-truncated-normal-sigma: ❨381❩.
               *Writers*
                    *note (setf left-truncated-normal-sigma): ❨382❩.
           -- Slot: left
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note left-truncated-normal-left: ❨261❩.
               *Writers*
                    *note (setf left-truncated-normal-left): ❨262❩.
           -- Slot: left-standardized
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note left-truncated-normal-left-standardized:
                    ❨248❩.
               *Writers*
                    *note (setf
                    left-truncated-normal-left-standardized): ❨249❩.
           -- Slot: m0
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note left-truncated-normal-m0: ❨345❩.
               *Writers*
                    *note (setf left-truncated-normal-m0): ❨346❩.
           -- Slot: alpha
               *Type*
                    distributions.internals:internal-float
               *Readers*
                    *note left-truncated-normal-alpha: ❨386❩.
               *Writers*
                    *note (setf left-truncated-normal-alpha): ❨387❩.
 -- Structure: r-univariate
     Univariate distribution.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note generics.lisp: ❨8❩.
     *Direct superclasses*
          structure-object.
     *Direct subclasses*
             • *note left-truncated-normal: ❨333❩.
             • *note r-bernoulli: ❨94❩.
             • *note r-beta: ❨186❩.
             • *note r-binomial: ❨48❩.
             • *note r-discrete: ❨36❩.
             • *note r-exponential: ❨140❩.
             • *note r-gamma: ❨58❩.
             • *note r-geometric: ❨89❩.
             • *note r-inverse-gamma: ❨130❩.
             • *note r-log-normal: ❨54❩.
             • *note r-normal: ❨207❩.
             • *note r-rayleigh: ❨199❩.
             • *note r-t: ❨97❩.
             • *note r-uniform: ❨102❩.
     *Direct methods*
          *note standard-deviation: ❨220❩.


File: distributions.info,  Node: Private classes,  Prev: Private structures,  Up: Internals

4.2.7 Classes
-------------

 -- Class: simple-multiplicative-congruential
     A multiplicative congruential generator generates the sequence
     x(n+1) =
     A * x(n) mod M and uses the seed as x(1).  A simple multiplicative
     congruential generator is a multiplicative congruential generator
     with M a power of 2.  This allows to implement the modulo operation
     as a bitwise and operation of M-1, which is also the maximum value
     of a random chunk.
     *Package*
          *note distributions: ❨25❩.
     *Source*
          *note simple-multiplicative-congruential-generators.lisp: ❨6❩.
     *Direct superclasses*
          *note generator: ❨213❩.
     *Direct subclasses*
             • *note borosh13: ❨126❩.
             • *note randu: ❨201❩.
             • *note transputer: ❨136❩.
             • *note waterman14: ❨221❩.
     *Direct methods*
             • *note a: ❨377❩.
             • *note clone: ❨308❩.
             • *note generate-state: ❨245❩.
             • *note initialize-instance: ❨426❩.
             • *note m: ❨255❩.
             • *note next-chunk: ❨385❩.
             • *note next-real: ❨369❩.
     *Direct slots*
           -- Slot: default-seed
               *Initform*
                    1
           -- Slot: a
               The multiplier of the sequence x(n+1) = A * x(n) mod M.
               *Readers*
                    *note a: ❨377❩.
               *Writers*
                    This slot is read-only.
           -- Slot: m
               The modulo of the sequence x(n+1) = A * x(n) mod M.
               *Readers*
                    *note m: ❨255❩.
               *Writers*
                    This slot is read-only.


File: distributions.info,  Node: Indexes,  Prev: Definitions,  Up: Top

Appendix A Indexes
******************

* Menu:

* Concept index::
* Function index::
* Variable index::
* Data type index::


File: distributions.info,  Node: Concept index,  Next: Function index,  Prev: Indexes,  Up: Indexes

A.1 Concepts
============


File: distributions.info,  Node: Function index,  Next: Variable index,  Prev: Concept index,  Up: Indexes

A.2 Functions
=============

 [index ]
* Menu:

* %next-double-float:                    Private ordinary functions.
                                                              (line   6)
* %next-integer:                         Private ordinary functions.
                                                              (line  15)
* %next-single-float:                    Private ordinary functions.
                                                              (line  28)
* (setf left-truncated-normal-alpha):    Private ordinary functions.
                                                              (line 172)
* (setf left-truncated-normal-left):     Private ordinary functions.
                                                              (line 180)
* (setf left-truncated-normal-left-standardized): Private ordinary functions.
                                                              (line 188)
* (setf left-truncated-normal-m0):       Private ordinary functions.
                                                              (line 196)
* (setf left-truncated-normal-mu):       Private ordinary functions.
                                                              (line 204)
* (setf left-truncated-normal-sigma):    Private ordinary functions.
                                                              (line 217)
* (setf r-bernoulli-pr):                 Private ordinary functions.
                                                              (line 346)
* (setf r-beta-alpha):                   Private ordinary functions.
                                                              (line 354)
* (setf r-beta-beta):                    Private ordinary functions.
                                                              (line 362)
* (setf r-binomial-n):                   Private ordinary functions.
                                                              (line 375)
* (setf r-binomial-pr):                  Private ordinary functions.
                                                              (line 388)
* (setf r-discrete-alias):               Private ordinary functions.
                                                              (line 396)
* (setf r-discrete-n-float):             Private ordinary functions.
                                                              (line 404)
* (setf r-discrete-prob):                Private ordinary functions.
                                                              (line 417)
* (setf r-discrete-probabilities):       Private ordinary functions.
                                                              (line 425)
* (setf r-exponential-rate):             Private ordinary functions.
                                                              (line 438)
* (setf r-gamma-alpha):                  Private ordinary functions.
                                                              (line 446)
* (setf r-gamma-beta):                   Private ordinary functions.
                                                              (line 454)
* (setf r-geometric-pr):                 Private ordinary functions.
                                                              (line 472)
* (setf r-inverse-gamma-alpha):          Private ordinary functions.
                                                              (line 480)
* (setf r-inverse-gamma-beta):           Private ordinary functions.
                                                              (line 488)
* (setf r-log-normal-log-mean):          Private ordinary functions.
                                                              (line 501)
* (setf r-log-normal-log-sd):            Private ordinary functions.
                                                              (line 509)
* (setf r-normal-mean):                  Private ordinary functions.
                                                              (line 522)
* (setf r-normal-sd):                    Private ordinary functions.
                                                              (line 535)
* (setf r-rayleigh-scale):               Private ordinary functions.
                                                              (line 548)
* (setf r-t-mean):                       Private ordinary functions.
                                                              (line 556)
* (setf r-t-nu):                         Private ordinary functions.
                                                              (line 564)
* (setf r-t-scale):                      Private ordinary functions.
                                                              (line 577)
* (setf r-uniform-left):                 Private ordinary functions.
                                                              (line 585)
* (setf r-uniform-right):                Private ordinary functions.
                                                              (line 598)
* (setf r-uniform-width):                Private ordinary functions.
                                                              (line 606)
* (setf state):                          Private generic functions.
                                                              (line 149)
* (setf state) <1>:                      Private generic functions.
                                                              (line 154)
* a:                                     Private generic functions.
                                                              (line   6)
* a <1>:                                 Private generic functions.
                                                              (line  10)
* alpha:                                 Public generic functions.
                                                              (line   6)
* alpha <1>:                             Public generic functions.
                                                              (line  10)
* alpha <2>:                             Public generic functions.
                                                              (line  13)
* alpha <3>:                             Public generic functions.
                                                              (line  17)
* as-float:                              Public ordinary functions.
                                                              (line   6)
* as-float-probabilities:                Public ordinary functions.
                                                              (line  13)
* as-float-vector:                       Public ordinary functions.
                                                              (line  20)
* beta:                                  Public generic functions.
                                                              (line  20)
* beta <1>:                              Public generic functions.
                                                              (line  24)
* beta <2>:                              Public generic functions.
                                                              (line  27)
* beta <3>:                              Public generic functions.
                                                              (line  31)
* cdf:                                   Public generic functions.
                                                              (line  34)
* cdf <1>:                               Public generic functions.
                                                              (line  41)
* cdf <2>:                               Public generic functions.
                                                              (line  44)
* cdf <3>:                               Public generic functions.
                                                              (line  47)
* cdf <4>:                               Public generic functions.
                                                              (line  50)
* cdf <5>:                               Public generic functions.
                                                              (line  54)
* cdf <6>:                               Public generic functions.
                                                              (line  57)
* cdf <7>:                               Public generic functions.
                                                              (line  60)
* cdf <8>:                               Public generic functions.
                                                              (line  64)
* cdf <9>:                               Public generic functions.
                                                              (line  67)
* cdf-gamma%:                            Private ordinary functions.
                                                              (line  37)
* cdf-gamma%+:                           Private ordinary functions.
                                                              (line  43)
* cdf-normal%:                           Private ordinary functions.
                                                              (line  50)
* check-probability:                     Private ordinary functions.
                                                              (line  56)
* chunk-length:                          Private generic functions.
                                                              (line  19)
* chunk-length <1>:                      Private generic functions.
                                                              (line  23)
* clone:                                 Private generic functions.
                                                              (line  30)
* clone <1>:                             Private generic functions.
                                                              (line  34)
* copy-left-truncated-normal:            Private ordinary functions.
                                                              (line  64)
* copy-r-bernoulli:                      Private ordinary functions.
                                                              (line  69)
* copy-r-beta:                           Private ordinary functions.
                                                              (line  74)
* copy-r-binomial:                       Private ordinary functions.
                                                              (line  79)
* copy-r-discrete:                       Private ordinary functions.
                                                              (line  84)
* copy-r-exponential:                    Private ordinary functions.
                                                              (line  89)
* copy-r-gamma:                          Private ordinary functions.
                                                              (line  94)
* copy-r-geometric:                      Private ordinary functions.
                                                              (line  99)
* copy-r-inverse-gamma:                  Private ordinary functions.
                                                              (line 104)
* copy-r-log-normal:                     Private ordinary functions.
                                                              (line 109)
* copy-r-normal:                         Private ordinary functions.
                                                              (line 114)
* copy-r-rayleigh:                       Private ordinary functions.
                                                              (line 119)
* copy-r-t:                              Private ordinary functions.
                                                              (line 124)
* copy-r-uniform:                        Private ordinary functions.
                                                              (line 129)
* copy-r-univariate:                     Private ordinary functions.
                                                              (line 134)
* copy-state:                            Private generic functions.
                                                              (line  40)
* copy-state <1>:                        Private generic functions.
                                                              (line  49)
* copy-state <2>:                        Private generic functions.
                                                              (line  50)
* default-seed:                          Private generic functions.
                                                              (line  51)
* default-seed <1>:                      Private generic functions.
                                                              (line  55)
* define-rv:                             Private macros.      (line   6)
* distinct-random-integers:              Public ordinary functions.
                                                              (line  28)
* distinct-random-integers-dense:        Public ordinary functions.
                                                              (line  36)
* draw:                                  Public generic functions.
                                                              (line  70)
* draw <1>:                              Public generic functions.
                                                              (line  77)
* draw <2>:                              Public generic functions.
                                                              (line  81)
* draw <3>:                              Public generic functions.
                                                              (line  85)
* draw <4>:                              Public generic functions.
                                                              (line  89)
* draw <5>:                              Public generic functions.
                                                              (line  93)
* draw <6>:                              Public generic functions.
                                                              (line  96)
* draw <7>:                              Public generic functions.
                                                              (line 100)
* draw <8>:                              Public generic functions.
                                                              (line 103)
* draw <9>:                              Public generic functions.
                                                              (line 106)
* draw <10>:                             Public generic functions.
                                                              (line 110)
* draw <11>:                             Public generic functions.
                                                              (line 114)
* draw <12>:                             Public generic functions.
                                                              (line 117)
* draw <13>:                             Public generic functions.
                                                              (line 121)
* draw <14>:                             Public generic functions.
                                                              (line 125)
* draw <15>:                             Public generic functions.
                                                              (line 128)
* draw-bernoulli:                        Public ordinary functions.
                                                              (line  44)
* draw-bernoulli-bit:                    Private ordinary functions.
                                                              (line 139)
* draw-binomial:                         Public ordinary functions.
                                                              (line  51)
* draw-exponential:                      Public ordinary functions.
                                                              (line  58)
* draw-geometric:                        Public ordinary functions.
                                                              (line  66)
* draw-left-truncated-standard-normal:   Private ordinary functions.
                                                              (line 144)
* draw-poisson:                          Public ordinary functions.
                                                              (line  73)
* draw-rayleigh:                         Public ordinary functions.
                                                              (line  83)
* draw-standard-exponential:             Public ordinary functions.
                                                              (line  91)
* draw-standard-gamma1:                  Private ordinary functions.
                                                              (line 152)
* draw-standard-normal:                  Public ordinary functions.
                                                              (line  98)
* draw-standard-t:                       Public ordinary functions.
                                                              (line 104)
* draw-uniform:                          Public ordinary functions.
                                                              (line 110)
* from-standard-normal:                  Public ordinary functions.
                                                              (line 117)
* Function, %next-double-float:          Private ordinary functions.
                                                              (line   7)
* Function, %next-integer:               Private ordinary functions.
                                                              (line  16)
* Function, %next-single-float:          Private ordinary functions.
                                                              (line  29)
* Function, (setf left-truncated-normal-alpha): Private ordinary functions.
                                                              (line 173)
* Function, (setf left-truncated-normal-left): Private ordinary functions.
                                                              (line 181)
* Function, (setf left-truncated-normal-left-standardized): Private ordinary functions.
                                                              (line 189)
* Function, (setf left-truncated-normal-m0): Private ordinary functions.
                                                              (line 197)
* Function, (setf left-truncated-normal-mu): Private ordinary functions.
                                                              (line 205)
* Function, (setf left-truncated-normal-sigma): Private ordinary functions.
                                                              (line 218)
* Function, (setf r-bernoulli-pr):       Private ordinary functions.
                                                              (line 347)
* Function, (setf r-beta-alpha):         Private ordinary functions.
                                                              (line 355)
* Function, (setf r-beta-beta):          Private ordinary functions.
                                                              (line 363)
* Function, (setf r-binomial-n):         Private ordinary functions.
                                                              (line 376)
* Function, (setf r-binomial-pr):        Private ordinary functions.
                                                              (line 389)
* Function, (setf r-discrete-alias):     Private ordinary functions.
                                                              (line 397)
* Function, (setf r-discrete-n-float):   Private ordinary functions.
                                                              (line 405)
* Function, (setf r-discrete-prob):      Private ordinary functions.
                                                              (line 418)
* Function, (setf r-discrete-probabilities): Private ordinary functions.
                                                              (line 426)
* Function, (setf r-exponential-rate):   Private ordinary functions.
                                                              (line 439)
* Function, (setf r-gamma-alpha):        Private ordinary functions.
                                                              (line 447)
* Function, (setf r-gamma-beta):         Private ordinary functions.
                                                              (line 455)
* Function, (setf r-geometric-pr):       Private ordinary functions.
                                                              (line 473)
* Function, (setf r-inverse-gamma-alpha): Private ordinary functions.
                                                              (line 481)
* Function, (setf r-inverse-gamma-beta): Private ordinary functions.
                                                              (line 489)
* Function, (setf r-log-normal-log-mean): Private ordinary functions.
                                                              (line 502)
* Function, (setf r-log-normal-log-sd):  Private ordinary functions.
                                                              (line 510)
* Function, (setf r-normal-mean):        Private ordinary functions.
                                                              (line 523)
* Function, (setf r-normal-sd):          Private ordinary functions.
                                                              (line 536)
* Function, (setf r-rayleigh-scale):     Private ordinary functions.
                                                              (line 549)
* Function, (setf r-t-mean):             Private ordinary functions.
                                                              (line 557)
* Function, (setf r-t-nu):               Private ordinary functions.
                                                              (line 565)
* Function, (setf r-t-scale):            Private ordinary functions.
                                                              (line 578)
* Function, (setf r-uniform-left):       Private ordinary functions.
                                                              (line 586)
* Function, (setf r-uniform-right):      Private ordinary functions.
                                                              (line 599)
* Function, (setf r-uniform-width):      Private ordinary functions.
                                                              (line 607)
* Function, as-float:                    Public ordinary functions.
                                                              (line   7)
* Function, as-float-probabilities:      Public ordinary functions.
                                                              (line  14)
* Function, as-float-vector:             Public ordinary functions.
                                                              (line  21)
* Function, cdf-gamma%:                  Private ordinary functions.
                                                              (line  38)
* Function, cdf-gamma%+:                 Private ordinary functions.
                                                              (line  44)
* Function, cdf-normal%:                 Private ordinary functions.
                                                              (line  51)
* Function, check-probability:           Private ordinary functions.
                                                              (line  57)
* Function, copy-left-truncated-normal:  Private ordinary functions.
                                                              (line  65)
* Function, copy-r-bernoulli:            Private ordinary functions.
                                                              (line  70)
* Function, copy-r-beta:                 Private ordinary functions.
                                                              (line  75)
* Function, copy-r-binomial:             Private ordinary functions.
                                                              (line  80)
* Function, copy-r-discrete:             Private ordinary functions.
                                                              (line  85)
* Function, copy-r-exponential:          Private ordinary functions.
                                                              (line  90)
* Function, copy-r-gamma:                Private ordinary functions.
                                                              (line  95)
* Function, copy-r-geometric:            Private ordinary functions.
                                                              (line 100)
* Function, copy-r-inverse-gamma:        Private ordinary functions.
                                                              (line 105)
* Function, copy-r-log-normal:           Private ordinary functions.
                                                              (line 110)
* Function, copy-r-normal:               Private ordinary functions.
                                                              (line 115)
* Function, copy-r-rayleigh:             Private ordinary functions.
                                                              (line 120)
* Function, copy-r-t:                    Private ordinary functions.
                                                              (line 125)
* Function, copy-r-uniform:              Private ordinary functions.
                                                              (line 130)
* Function, copy-r-univariate:           Private ordinary functions.
                                                              (line 135)
* Function, distinct-random-integers:    Public ordinary functions.
                                                              (line  29)
* Function, distinct-random-integers-dense: Public ordinary functions.
                                                              (line  37)
* Function, draw-bernoulli:              Public ordinary functions.
                                                              (line  45)
* Function, draw-bernoulli-bit:          Private ordinary functions.
                                                              (line 140)
* Function, draw-binomial:               Public ordinary functions.
                                                              (line  52)
* Function, draw-exponential:            Public ordinary functions.
                                                              (line  59)
* Function, draw-geometric:              Public ordinary functions.
                                                              (line  67)
* Function, draw-left-truncated-standard-normal: Private ordinary functions.
                                                              (line 145)
* Function, draw-poisson:                Public ordinary functions.
                                                              (line  74)
* Function, draw-rayleigh:               Public ordinary functions.
                                                              (line  84)
* Function, draw-standard-exponential:   Public ordinary functions.
                                                              (line  92)
* Function, draw-standard-gamma1:        Private ordinary functions.
                                                              (line 153)
* Function, draw-standard-normal:        Public ordinary functions.
                                                              (line  99)
* Function, draw-standard-t:             Public ordinary functions.
                                                              (line 105)
* Function, draw-uniform:                Public ordinary functions.
                                                              (line 111)
* Function, from-standard-normal:        Public ordinary functions.
                                                              (line 118)
* Function, generate-seed:               Private ordinary functions.
                                                              (line 161)
* Function, left-truncated-normal:       Private ordinary functions.
                                                              (line 167)
* Function, left-truncated-normal-alpha: Private ordinary functions.
                                                              (line 172)
* Function, left-truncated-normal-left:  Private ordinary functions.
                                                              (line 180)
* Function, left-truncated-normal-left-standardized: Private ordinary functions.
                                                              (line 188)
* Function, left-truncated-normal-m0:    Private ordinary functions.
                                                              (line 196)
* Function, left-truncated-normal-mu:    Private ordinary functions.
                                                              (line 204)
* Function, left-truncated-normal-p:     Private ordinary functions.
                                                              (line 212)
* Function, left-truncated-normal-sigma: Private ordinary functions.
                                                              (line 217)
* Function, make-generator:              Public ordinary functions.
                                                              (line 124)
* Function, make-left-truncated-normal:  Private ordinary functions.
                                                              (line 226)
* Function, make-r-bernoulli:            Private ordinary functions.
                                                              (line 231)
* Function, make-r-beta:                 Private ordinary functions.
                                                              (line 236)
* Function, make-r-binomial:             Private ordinary functions.
                                                              (line 241)
* Function, make-r-discrete:             Private ordinary functions.
                                                              (line 246)
* Function, make-r-exponential:          Private ordinary functions.
                                                              (line 251)
* Function, make-r-gamma:                Private ordinary functions.
                                                              (line 256)
* Function, make-r-geometric:            Private ordinary functions.
                                                              (line 261)
* Function, make-r-inverse-gamma:        Private ordinary functions.
                                                              (line 266)
* Function, make-r-log-normal:           Private ordinary functions.
                                                              (line 271)
* Function, make-r-normal:               Private ordinary functions.
                                                              (line 276)
* Function, make-r-rayleigh:             Private ordinary functions.
                                                              (line 281)
* Function, make-r-t:                    Private ordinary functions.
                                                              (line 286)
* Function, make-r-uniform:              Private ordinary functions.
                                                              (line 291)
* Function, make-r-univariate:           Private ordinary functions.
                                                              (line 296)
* Function, next:                        Public ordinary functions.
                                                              (line 136)
* Function, pdf:                         Public ordinary functions.
                                                              (line 144)
* Function, pdf-gamma:                   Private ordinary functions.
                                                              (line 301)
* Function, pdf-gamma%:                  Private ordinary functions.
                                                              (line 309)
* Function, pdf-gamma*:                  Private ordinary functions.
                                                              (line 314)
* Function, pdf-gamma+:                  Private ordinary functions.
                                                              (line 319)
* Function, pdf-normal%:                 Private ordinary functions.
                                                              (line 328)
* Function, quantile-normal%:            Private ordinary functions.
                                                              (line 335)
* Function, r-bernoulli:                 Public ordinary functions.
                                                              (line 151)
* Function, r-bernoulli-p:               Private ordinary functions.
                                                              (line 341)
* Function, r-bernoulli-pr:              Private ordinary functions.
                                                              (line 346)
* Function, r-beta:                      Public ordinary functions.
                                                              (line 156)
* Function, r-beta-alpha:                Private ordinary functions.
                                                              (line 354)
* Function, r-beta-beta:                 Private ordinary functions.
                                                              (line 362)
* Function, r-beta-p:                    Private ordinary functions.
                                                              (line 370)
* Function, r-binomial:                  Public ordinary functions.
                                                              (line 161)
* Function, r-binomial-n:                Private ordinary functions.
                                                              (line 375)
* Function, r-binomial-p:                Private ordinary functions.
                                                              (line 383)
* Function, r-binomial-pr:               Private ordinary functions.
                                                              (line 388)
* Function, r-chi-square:                Public ordinary functions.
                                                              (line 166)
* Function, r-discrete:                  Public ordinary functions.
                                                              (line 172)
* Function, r-discrete-alias:            Private ordinary functions.
                                                              (line 396)
* Function, r-discrete-n-float:          Private ordinary functions.
                                                              (line 404)
* Function, r-discrete-p:                Private ordinary functions.
                                                              (line 412)
* Function, r-discrete-prob:             Private ordinary functions.
                                                              (line 417)
* Function, r-discrete-probabilities:    Private ordinary functions.
                                                              (line 425)
* Function, r-exponential:               Public ordinary functions.
                                                              (line 177)
* Function, r-exponential-p:             Private ordinary functions.
                                                              (line 433)
* Function, r-exponential-rate:          Private ordinary functions.
                                                              (line 438)
* Function, r-gamma:                     Public ordinary functions.
                                                              (line 182)
* Function, r-gamma-alpha:               Private ordinary functions.
                                                              (line 446)
* Function, r-gamma-beta:                Private ordinary functions.
                                                              (line 454)
* Function, r-gamma-p:                   Private ordinary functions.
                                                              (line 462)
* Function, r-geometric:                 Public ordinary functions.
                                                              (line 187)
* Function, r-geometric-p:               Private ordinary functions.
                                                              (line 467)
* Function, r-geometric-pr:              Private ordinary functions.
                                                              (line 472)
* Function, r-inverse-chi-square:        Public ordinary functions.
                                                              (line 192)
* Function, r-inverse-gamma:             Public ordinary functions.
                                                              (line 199)
* Function, r-inverse-gamma-alpha:       Private ordinary functions.
                                                              (line 480)
* Function, r-inverse-gamma-beta:        Private ordinary functions.
                                                              (line 488)
* Function, r-inverse-gamma-p:           Private ordinary functions.
                                                              (line 496)
* Function, r-log-normal:                Public ordinary functions.
                                                              (line 204)
* Function, r-log-normal-log-mean:       Private ordinary functions.
                                                              (line 501)
* Function, r-log-normal-log-sd:         Private ordinary functions.
                                                              (line 509)
* Function, r-log-normal-p:              Private ordinary functions.
                                                              (line 517)
* Function, r-normal:                    Public ordinary functions.
                                                              (line 209)
* Function, r-normal-mean:               Private ordinary functions.
                                                              (line 522)
* Function, r-normal-p:                  Private ordinary functions.
                                                              (line 530)
* Function, r-normal-sd:                 Private ordinary functions.
                                                              (line 535)
* Function, r-rayleigh:                  Public ordinary functions.
                                                              (line 214)
* Function, r-rayleigh-p:                Private ordinary functions.
                                                              (line 543)
* Function, r-rayleigh-scale:            Private ordinary functions.
                                                              (line 548)
* Function, r-t:                         Public ordinary functions.
                                                              (line 219)
* Function, r-t-mean:                    Private ordinary functions.
                                                              (line 556)
* Function, r-t-nu:                      Private ordinary functions.
                                                              (line 564)
* Function, r-t-p:                       Private ordinary functions.
                                                              (line 572)
* Function, r-t-scale:                   Private ordinary functions.
                                                              (line 577)
* Function, r-truncated-normal:          Public ordinary functions.
                                                              (line 224)
* Function, r-uniform:                   Public ordinary functions.
                                                              (line 231)
* Function, r-uniform-left:              Private ordinary functions.
                                                              (line 585)
* Function, r-uniform-p:                 Private ordinary functions.
                                                              (line 593)
* Function, r-uniform-right:             Private ordinary functions.
                                                              (line 598)
* Function, r-uniform-width:             Private ordinary functions.
                                                              (line 606)
* Function, r-univariate-p:              Private ordinary functions.
                                                              (line 614)
* Function, standard-gamma1-d-c:         Private ordinary functions.
                                                              (line 619)
* Function, t-scale-to-variance-coefficient: Public ordinary functions.
                                                              (line 236)
* Function, to-standard-normal:          Public ordinary functions.
                                                              (line 244)
* Function, truncated-normal-moments%:   Private ordinary functions.
                                                              (line 627)
* Function, truncated-normal-optimal-alpha: Private ordinary functions.
                                                              (line 638)
* generate-seed:                         Private ordinary functions.
                                                              (line 160)
* generate-state:                        Private generic functions.
                                                              (line  62)
* generate-state <1>:                    Private generic functions.
                                                              (line  69)
* generate-state <2>:                    Private generic functions.
                                                              (line  75)
* generator:                             Public generic functions.
                                                              (line 129)
* generator <1>:                         Public generic functions.
                                                              (line 136)
* Generic Function, (setf state):        Private generic functions.
                                                              (line 150)
* Generic Function, a:                   Private generic functions.
                                                              (line   7)
* Generic Function, alpha:               Public generic functions.
                                                              (line   7)
* Generic Function, beta:                Public generic functions.
                                                              (line  21)
* Generic Function, cdf:                 Public generic functions.
                                                              (line  35)
* Generic Function, chunk-length:        Private generic functions.
                                                              (line  20)
* Generic Function, clone:               Private generic functions.
                                                              (line  31)
* Generic Function, copy-state:          Private generic functions.
                                                              (line  41)
* Generic Function, default-seed:        Private generic functions.
                                                              (line  52)
* Generic Function, draw:                Public generic functions.
                                                              (line  71)
* Generic Function, generate-state:      Private generic functions.
                                                              (line  63)
* Generic Function, generator:           Public generic functions.
                                                              (line 130)
* Generic Function, left:                Public generic functions.
                                                              (line 138)
* Generic Function, log-pdf:             Public generic functions.
                                                              (line 146)
* Generic Function, m:                   Private generic functions.
                                                              (line  78)
* Generic Function, mean:                Public generic functions.
                                                              (line 190)
* Generic Function, n:                   Private generic functions.
                                                              (line  91)
* Generic Function, next-chunk:          Private generic functions.
                                                              (line  98)
* Generic Function, next-real:           Private generic functions.
                                                              (line 108)
* Generic Function, nu:                  Public generic functions.
                                                              (line 242)
* Generic Function, pr:                  Private generic functions.
                                                              (line 118)
* Generic Function, probabilities:       Public generic functions.
                                                              (line 259)
* Generic Function, quantile:            Public generic functions.
                                                              (line 266)
* Generic Function, rate:                Public generic functions.
                                                              (line 294)
* Generic Function, right:               Public generic functions.
                                                              (line 302)
* Generic Function, scale:               Public generic functions.
                                                              (line 309)
* Generic Function, sd:                  Private generic functions.
                                                              (line 142)
* Generic Function, standard-deviation:  Public generic functions.
                                                              (line 319)
* Generic Function, state:               Private generic functions.
                                                              (line 149)
* Generic Function, s^2:                 Private generic functions.
                                                              (line 131)
* Generic Function, variance:            Public generic functions.
                                                              (line 328)
* initialize-instance:                   Public standalone methods.
                                                              (line   6)
* initialize-instance <1>:               Public standalone methods.
                                                              (line  10)
* left:                                  Public generic functions.
                                                              (line 137)
* left <1>:                              Public generic functions.
                                                              (line 141)
* left-truncated-normal:                 Private ordinary functions.
                                                              (line 166)
* left-truncated-normal-alpha:           Private ordinary functions.
                                                              (line 171)
* left-truncated-normal-left:            Private ordinary functions.
                                                              (line 179)
* left-truncated-normal-left-standardized: Private ordinary functions.
                                                              (line 187)
* left-truncated-normal-m0:              Private ordinary functions.
                                                              (line 195)
* left-truncated-normal-mu:              Private ordinary functions.
                                                              (line 203)
* left-truncated-normal-p:               Private ordinary functions.
                                                              (line 211)
* left-truncated-normal-sigma:           Private ordinary functions.
                                                              (line 216)
* log-pdf:                               Public generic functions.
                                                              (line 144)
* log-pdf <1>:                           Public generic functions.
                                                              (line 156)
* log-pdf <2>:                           Public generic functions.
                                                              (line 160)
* log-pdf <3>:                           Public generic functions.
                                                              (line 164)
* log-pdf <4>:                           Public generic functions.
                                                              (line 169)
* log-pdf <5>:                           Public generic functions.
                                                              (line 173)
* log-pdf <6>:                           Public generic functions.
                                                              (line 177)
* log-pdf <7>:                           Public generic functions.
                                                              (line 181)
* log-pdf <8>:                           Public generic functions.
                                                              (line 185)
* m:                                     Private generic functions.
                                                              (line  77)
* m <1>:                                 Private generic functions.
                                                              (line  81)
* Macro, define-rv:                      Private macros.      (line   8)
* Macro, maybe-ignore-constant:          Public macros.       (line   7)
* Macro, try:                            Public macros.       (line  14)
* Macro, with-floats:                    Public macros.       (line  21)
* make-generator:                        Public ordinary functions.
                                                              (line 123)
* make-left-truncated-normal:            Private ordinary functions.
                                                              (line 224)
* make-r-bernoulli:                      Private ordinary functions.
                                                              (line 230)
* make-r-beta:                           Private ordinary functions.
                                                              (line 235)
* make-r-binomial:                       Private ordinary functions.
                                                              (line 240)
* make-r-discrete:                       Private ordinary functions.
                                                              (line 245)
* make-r-exponential:                    Private ordinary functions.
                                                              (line 250)
* make-r-gamma:                          Private ordinary functions.
                                                              (line 255)
* make-r-geometric:                      Private ordinary functions.
                                                              (line 260)
* make-r-inverse-gamma:                  Private ordinary functions.
                                                              (line 265)
* make-r-log-normal:                     Private ordinary functions.
                                                              (line 270)
* make-r-normal:                         Private ordinary functions.
                                                              (line 275)
* make-r-rayleigh:                       Private ordinary functions.
                                                              (line 280)
* make-r-t:                              Private ordinary functions.
                                                              (line 285)
* make-r-uniform:                        Private ordinary functions.
                                                              (line 290)
* make-r-univariate:                     Private ordinary functions.
                                                              (line 295)
* maybe-ignore-constant:                 Public macros.       (line   6)
* mean:                                  Public generic functions.
                                                              (line 189)
* mean <1>:                              Public generic functions.
                                                              (line 196)
* mean <2>:                              Public generic functions.
                                                              (line 199)
* mean <3>:                              Public generic functions.
                                                              (line 202)
* mean <4>:                              Public generic functions.
                                                              (line 205)
* mean <5>:                              Public generic functions.
                                                              (line 208)
* mean <6>:                              Public generic functions.
                                                              (line 211)
* mean <7>:                              Public generic functions.
                                                              (line 215)
* mean <8>:                              Public generic functions.
                                                              (line 218)
* mean <9>:                              Public generic functions.
                                                              (line 221)
* mean <10>:                             Public generic functions.
                                                              (line 225)
* mean <11>:                             Public generic functions.
                                                              (line 228)
* mean <12>:                             Public generic functions.
                                                              (line 231)
* mean <13>:                             Public generic functions.
                                                              (line 235)
* mean <14>:                             Public generic functions.
                                                              (line 238)
* Method, (setf state):                  Private generic functions.
                                                              (line 156)
* Method, a:                             Private generic functions.
                                                              (line  12)
* Method, alpha:                         Public generic functions.
                                                              (line  11)
* Method, alpha <1>:                     Public generic functions.
                                                              (line  15)
* Method, alpha <2>:                     Public generic functions.
                                                              (line  18)
* Method, beta:                          Public generic functions.
                                                              (line  25)
* Method, beta <1>:                      Public generic functions.
                                                              (line  29)
* Method, beta <2>:                      Public generic functions.
                                                              (line  32)
* Method, cdf:                           Public generic functions.
                                                              (line  42)
* Method, cdf <1>:                       Public generic functions.
                                                              (line  45)
* Method, cdf <2>:                       Public generic functions.
                                                              (line  48)
* Method, cdf <3>:                       Public generic functions.
                                                              (line  52)
* Method, cdf <4>:                       Public generic functions.
                                                              (line  55)
* Method, cdf <5>:                       Public generic functions.
                                                              (line  58)
* Method, cdf <6>:                       Public generic functions.
                                                              (line  62)
* Method, cdf <7>:                       Public generic functions.
                                                              (line  65)
* Method, cdf <8>:                       Public generic functions.
                                                              (line  68)
* Method, chunk-length:                  Private generic functions.
                                                              (line  25)
* Method, clone:                         Private generic functions.
                                                              (line  36)
* Method, copy-state:                    Private generic functions.
                                                              (line  50)
* Method, copy-state <1>:                Private generic functions.
                                                              (line  51)
* Method, default-seed:                  Private generic functions.
                                                              (line  57)
* Method, draw:                          Public generic functions.
                                                              (line  79)
* Method, draw <1>:                      Public generic functions.
                                                              (line  83)
* Method, draw <2>:                      Public generic functions.
                                                              (line  87)
* Method, draw <3>:                      Public generic functions.
                                                              (line  91)
* Method, draw <4>:                      Public generic functions.
                                                              (line  94)
* Method, draw <5>:                      Public generic functions.
                                                              (line  98)
* Method, draw <6>:                      Public generic functions.
                                                              (line 101)
* Method, draw <7>:                      Public generic functions.
                                                              (line 104)
* Method, draw <8>:                      Public generic functions.
                                                              (line 108)
* Method, draw <9>:                      Public generic functions.
                                                              (line 112)
* Method, draw <10>:                     Public generic functions.
                                                              (line 115)
* Method, draw <11>:                     Public generic functions.
                                                              (line 119)
* Method, draw <12>:                     Public generic functions.
                                                              (line 123)
* Method, draw <13>:                     Public generic functions.
                                                              (line 126)
* Method, draw <14>:                     Public generic functions.
                                                              (line 129)
* Method, generate-state:                Private generic functions.
                                                              (line  71)
* Method, generate-state <1>:            Private generic functions.
                                                              (line  77)
* Method, generator:                     Public generic functions.
                                                              (line 137)
* Method, initialize-instance:           Public standalone methods.
                                                              (line   8)
* Method, initialize-instance <1>:       Public standalone methods.
                                                              (line  13)
* Method, left:                          Public generic functions.
                                                              (line 142)
* Method, log-pdf:                       Public generic functions.
                                                              (line 158)
* Method, log-pdf <1>:                   Public generic functions.
                                                              (line 162)
* Method, log-pdf <2>:                   Public generic functions.
                                                              (line 167)
* Method, log-pdf <3>:                   Public generic functions.
                                                              (line 171)
* Method, log-pdf <4>:                   Public generic functions.
                                                              (line 175)
* Method, log-pdf <5>:                   Public generic functions.
                                                              (line 179)
* Method, log-pdf <6>:                   Public generic functions.
                                                              (line 183)
* Method, log-pdf <7>:                   Public generic functions.
                                                              (line 187)
* Method, m:                             Private generic functions.
                                                              (line  83)
* Method, mean:                          Public generic functions.
                                                              (line 197)
* Method, mean <1>:                      Public generic functions.
                                                              (line 200)
* Method, mean <2>:                      Public generic functions.
                                                              (line 203)
* Method, mean <3>:                      Public generic functions.
                                                              (line 206)
* Method, mean <4>:                      Public generic functions.
                                                              (line 209)
* Method, mean <5>:                      Public generic functions.
                                                              (line 213)
* Method, mean <6>:                      Public generic functions.
                                                              (line 216)
* Method, mean <7>:                      Public generic functions.
                                                              (line 219)
* Method, mean <8>:                      Public generic functions.
                                                              (line 223)
* Method, mean <9>:                      Public generic functions.
                                                              (line 226)
* Method, mean <10>:                     Public generic functions.
                                                              (line 229)
* Method, mean <11>:                     Public generic functions.
                                                              (line 233)
* Method, mean <12>:                     Public generic functions.
                                                              (line 236)
* Method, mean <13>:                     Public generic functions.
                                                              (line 239)
* Method, n:                             Private generic functions.
                                                              (line  95)
* Method, next-chunk:                    Private generic functions.
                                                              (line 103)
* Method, next-real:                     Private generic functions.
                                                              (line 113)
* Method, nu:                            Public generic functions.
                                                              (line 250)
* Method, nu <1>:                        Public generic functions.
                                                              (line 253)
* Method, nu <2>:                        Public generic functions.
                                                              (line 256)
* Method, num=:                          Public standalone methods.
                                                              (line  17)
* Method, pr:                            Private generic functions.
                                                              (line 122)
* Method, pr <1>:                        Private generic functions.
                                                              (line 125)
* Method, pr <2>:                        Private generic functions.
                                                              (line 128)
* Method, probabilities:                 Public generic functions.
                                                              (line 263)
* Method, quantile:                      Public generic functions.
                                                              (line 270)
* Method, quantile <1>:                  Public generic functions.
                                                              (line 273)
* Method, quantile <2>:                  Public generic functions.
                                                              (line 277)
* Method, quantile <3>:                  Public generic functions.
                                                              (line 281)
* Method, quantile <4>:                  Public generic functions.
                                                              (line 284)
* Method, quantile <5>:                  Public generic functions.
                                                              (line 288)
* Method, quantile <6>:                  Public generic functions.
                                                              (line 291)
* Method, rate:                          Public generic functions.
                                                              (line 299)
* Method, right:                         Public generic functions.
                                                              (line 306)
* Method, scale:                         Public generic functions.
                                                              (line 313)
* Method, scale <1>:                     Public generic functions.
                                                              (line 316)
* Method, sd:                            Private generic functions.
                                                              (line 146)
* Method, standard-deviation:            Public generic functions.
                                                              (line 327)
* Method, state:                         Private generic functions.
                                                              (line 154)
* Method, s^2:                           Private generic functions.
                                                              (line 139)
* Method, variance:                      Public generic functions.
                                                              (line 335)
* Method, variance <1>:                  Public generic functions.
                                                              (line 338)
* Method, variance <2>:                  Public generic functions.
                                                              (line 341)
* Method, variance <3>:                  Public generic functions.
                                                              (line 344)
* Method, variance <4>:                  Public generic functions.
                                                              (line 347)
* Method, variance <5>:                  Public generic functions.
                                                              (line 351)
* Method, variance <6>:                  Public generic functions.
                                                              (line 354)
* Method, variance <7>:                  Public generic functions.
                                                              (line 357)
* Method, variance <8>:                  Public generic functions.
                                                              (line 361)
* Method, variance <9>:                  Public generic functions.
                                                              (line 365)
* Method, variance <10>:                 Public generic functions.
                                                              (line 368)
* Method, variance <11>:                 Public generic functions.
                                                              (line 372)
* Method, variance <12>:                 Public generic functions.
                                                              (line 375)
* Method, variance <13>:                 Public generic functions.
                                                              (line 378)
* n:                                     Private generic functions.
                                                              (line  90)
* n <1>:                                 Private generic functions.
                                                              (line  94)
* next:                                  Public ordinary functions.
                                                              (line 135)
* next-chunk:                            Private generic functions.
                                                              (line  97)
* next-chunk <1>:                        Private generic functions.
                                                              (line 101)
* next-real:                             Private generic functions.
                                                              (line 107)
* next-real <1>:                         Private generic functions.
                                                              (line 111)
* nu:                                    Public generic functions.
                                                              (line 241)
* nu <1>:                                Public generic functions.
                                                              (line 248)
* nu <2>:                                Public generic functions.
                                                              (line 252)
* nu <3>:                                Public generic functions.
                                                              (line 255)
* num=:                                  Public standalone methods.
                                                              (line  15)
* pdf:                                   Public ordinary functions.
                                                              (line 143)
* pdf-gamma:                             Private ordinary functions.
                                                              (line 300)
* pdf-gamma%:                            Private ordinary functions.
                                                              (line 308)
* pdf-gamma*:                            Private ordinary functions.
                                                              (line 313)
* pdf-gamma+:                            Private ordinary functions.
                                                              (line 318)
* pdf-normal%:                           Private ordinary functions.
                                                              (line 327)
* pr:                                    Private generic functions.
                                                              (line 117)
* pr <1>:                                Private generic functions.
                                                              (line 121)
* pr <2>:                                Private generic functions.
                                                              (line 124)
* pr <3>:                                Private generic functions.
                                                              (line 127)
* probabilities:                         Public generic functions.
                                                              (line 258)
* probabilities <1>:                     Public generic functions.
                                                              (line 262)
* quantile:                              Public generic functions.
                                                              (line 265)
* quantile <1>:                          Public generic functions.
                                                              (line 269)
* quantile <2>:                          Public generic functions.
                                                              (line 272)
* quantile <3>:                          Public generic functions.
                                                              (line 275)
* quantile <4>:                          Public generic functions.
                                                              (line 279)
* quantile <5>:                          Public generic functions.
                                                              (line 283)
* quantile <6>:                          Public generic functions.
                                                              (line 286)
* quantile <7>:                          Public generic functions.
                                                              (line 290)
* quantile-normal%:                      Private ordinary functions.
                                                              (line 334)
* r-bernoulli:                           Public ordinary functions.
                                                              (line 150)
* r-bernoulli-p:                         Private ordinary functions.
                                                              (line 340)
* r-bernoulli-pr:                        Private ordinary functions.
                                                              (line 345)
* r-beta:                                Public ordinary functions.
                                                              (line 155)
* r-beta-alpha:                          Private ordinary functions.
                                                              (line 353)
* r-beta-beta:                           Private ordinary functions.
                                                              (line 361)
* r-beta-p:                              Private ordinary functions.
                                                              (line 369)
* r-binomial:                            Public ordinary functions.
                                                              (line 160)
* r-binomial-n:                          Private ordinary functions.
                                                              (line 374)
* r-binomial-p:                          Private ordinary functions.
                                                              (line 382)
* r-binomial-pr:                         Private ordinary functions.
                                                              (line 387)
* r-chi-square:                          Public ordinary functions.
                                                              (line 165)
* r-discrete:                            Public ordinary functions.
                                                              (line 171)
* r-discrete-alias:                      Private ordinary functions.
                                                              (line 395)
* r-discrete-n-float:                    Private ordinary functions.
                                                              (line 403)
* r-discrete-p:                          Private ordinary functions.
                                                              (line 411)
* r-discrete-prob:                       Private ordinary functions.
                                                              (line 416)
* r-discrete-probabilities:              Private ordinary functions.
                                                              (line 424)
* r-exponential:                         Public ordinary functions.
                                                              (line 176)
* r-exponential-p:                       Private ordinary functions.
                                                              (line 432)
* r-exponential-rate:                    Private ordinary functions.
                                                              (line 437)
* r-gamma:                               Public ordinary functions.
                                                              (line 181)
* r-gamma-alpha:                         Private ordinary functions.
                                                              (line 445)
* r-gamma-beta:                          Private ordinary functions.
                                                              (line 453)
* r-gamma-p:                             Private ordinary functions.
                                                              (line 461)
* r-geometric:                           Public ordinary functions.
                                                              (line 186)
* r-geometric-p:                         Private ordinary functions.
                                                              (line 466)
* r-geometric-pr:                        Private ordinary functions.
                                                              (line 471)
* r-inverse-chi-square:                  Public ordinary functions.
                                                              (line 191)
* r-inverse-gamma:                       Public ordinary functions.
                                                              (line 198)
* r-inverse-gamma-alpha:                 Private ordinary functions.
                                                              (line 479)
* r-inverse-gamma-beta:                  Private ordinary functions.
                                                              (line 487)
* r-inverse-gamma-p:                     Private ordinary functions.
                                                              (line 495)
* r-log-normal:                          Public ordinary functions.
                                                              (line 203)
* r-log-normal-log-mean:                 Private ordinary functions.
                                                              (line 500)
* r-log-normal-log-sd:                   Private ordinary functions.
                                                              (line 508)
* r-log-normal-p:                        Private ordinary functions.
                                                              (line 516)
* r-normal:                              Public ordinary functions.
                                                              (line 208)
* r-normal-mean:                         Private ordinary functions.
                                                              (line 521)
* r-normal-p:                            Private ordinary functions.
                                                              (line 529)
* r-normal-sd:                           Private ordinary functions.
                                                              (line 534)
* r-rayleigh:                            Public ordinary functions.
                                                              (line 213)
* r-rayleigh-p:                          Private ordinary functions.
                                                              (line 542)
* r-rayleigh-scale:                      Private ordinary functions.
                                                              (line 547)
* r-t:                                   Public ordinary functions.
                                                              (line 218)
* r-t-mean:                              Private ordinary functions.
                                                              (line 555)
* r-t-nu:                                Private ordinary functions.
                                                              (line 563)
* r-t-p:                                 Private ordinary functions.
                                                              (line 571)
* r-t-scale:                             Private ordinary functions.
                                                              (line 576)
* r-truncated-normal:                    Public ordinary functions.
                                                              (line 223)
* r-uniform:                             Public ordinary functions.
                                                              (line 230)
* r-uniform-left:                        Private ordinary functions.
                                                              (line 584)
* r-uniform-p:                           Private ordinary functions.
                                                              (line 592)
* r-uniform-right:                       Private ordinary functions.
                                                              (line 597)
* r-uniform-width:                       Private ordinary functions.
                                                              (line 605)
* r-univariate-p:                        Private ordinary functions.
                                                              (line 613)
* rate:                                  Public generic functions.
                                                              (line 293)
* rate <1>:                              Public generic functions.
                                                              (line 297)
* right:                                 Public generic functions.
                                                              (line 301)
* right <1>:                             Public generic functions.
                                                              (line 305)
* scale:                                 Public generic functions.
                                                              (line 308)
* scale <1>:                             Public generic functions.
                                                              (line 312)
* scale <2>:                             Public generic functions.
                                                              (line 315)
* sd:                                    Private generic functions.
                                                              (line 141)
* sd <1>:                                Private generic functions.
                                                              (line 145)
* standard-deviation:                    Public generic functions.
                                                              (line 318)
* standard-deviation <1>:                Public generic functions.
                                                              (line 325)
* standard-gamma1-d-c:                   Private ordinary functions.
                                                              (line 618)
* state:                                 Private generic functions.
                                                              (line 148)
* state <1>:                             Private generic functions.
                                                              (line 153)
* s^2:                                   Private generic functions.
                                                              (line 130)
* s^2 <1>:                               Private generic functions.
                                                              (line 137)
* t-scale-to-variance-coefficient:       Public ordinary functions.
                                                              (line 235)
* to-standard-normal:                    Public ordinary functions.
                                                              (line 243)
* truncated-normal-moments%:             Private ordinary functions.
                                                              (line 625)
* truncated-normal-optimal-alpha:        Private ordinary functions.
                                                              (line 637)
* try:                                   Public macros.       (line  13)
* variance:                              Public generic functions.
                                                              (line 327)
* variance <1>:                          Public generic functions.
                                                              (line 334)
* variance <2>:                          Public generic functions.
                                                              (line 337)
* variance <3>:                          Public generic functions.
                                                              (line 340)
* variance <4>:                          Public generic functions.
                                                              (line 343)
* variance <5>:                          Public generic functions.
                                                              (line 346)
* variance <6>:                          Public generic functions.
                                                              (line 349)
* variance <7>:                          Public generic functions.
                                                              (line 353)
* variance <8>:                          Public generic functions.
                                                              (line 356)
* variance <9>:                          Public generic functions.
                                                              (line 359)
* variance <10>:                         Public generic functions.
                                                              (line 363)
* variance <11>:                         Public generic functions.
                                                              (line 367)
* variance <12>:                         Public generic functions.
                                                              (line 370)
* variance <13>:                         Public generic functions.
                                                              (line 374)
* variance <14>:                         Public generic functions.
                                                              (line 377)
* with-floats:                           Public macros.       (line  20)


File: distributions.info,  Node: Variable index,  Next: Data type index,  Prev: Function index,  Up: Indexes

A.3 Variables
=============

 [index ]
* Menu:

* *default-generator-type*:              Private special variables.
                                                              (line   6)
* +normal-log-pdf-constant+:             Private constants.   (line   6)
* a:                                     Public classes.      (line  16)
* a <1>:                                 Public classes.      (line  86)
* a <2>:                                 Public classes.      (line 101)
* a <3>:                                 Public classes.      (line 117)
* a <4>:                                 Private classes.     (line  37)
* alias:                                 Public structures.   (line 120)
* alpha:                                 Public structures.   (line  46)
* alpha <1>:                             Public structures.   (line 180)
* alpha <2>:                             Public structures.   (line 235)
* alpha <3>:                             Private structures.  (line  61)
* beta:                                  Public structures.   (line  53)
* beta <1>:                              Public structures.   (line 187)
* beta <2>:                              Public structures.   (line 242)
* chunk-length:                          Public classes.      (line  19)
* chunk-length <1>:                      Public classes.      (line  61)
* chunk-length <2>:                      Public classes.      (line  89)
* chunk-length <3>:                      Public classes.      (line 104)
* chunk-length <4>:                      Public classes.      (line 120)
* Constant, +normal-log-pdf-constant+:   Private constants.   (line   7)
* default-seed:                          Public classes.      (line  67)
* default-seed <1>:                      Private classes.     (line  34)
* left:                                  Public structures.   (line 387)
* left <1>:                              Private structures.  (line  38)
* left-standardized:                     Private structures.  (line  45)
* log-mean:                              Public structures.   (line 265)
* log-sd:                                Public structures.   (line 272)
* m:                                     Private classes.     (line  43)
* m0:                                    Private structures.  (line  54)
* max:                                   Public classes.      (line  55)
* mean:                                  Public structures.   (line 296)
* mean <1>:                              Public structures.   (line 348)
* min:                                   Public classes.      (line  49)
* mu:                                    Private structures.  (line  24)
* n:                                     Public structures.   (line  83)
* n-float:                               Public structures.   (line 127)
* nu:                                    Public structures.   (line 362)
* pr:                                    Public structures.   (line  22)
* pr <1>:                                Public structures.   (line  76)
* pr <2>:                                Public structures.   (line 208)
* prob:                                  Public structures.   (line 113)
* probabilities:                         Public structures.   (line 106)
* rate:                                  Public structures.   (line 152)
* right:                                 Public structures.   (line 394)
* scale:                                 Public structures.   (line 326)
* scale <1>:                             Public structures.   (line 355)
* sd:                                    Public structures.   (line 303)
* sigma:                                 Private structures.  (line  31)
* Slot, a:                               Public classes.      (line  17)
* Slot, a <1>:                           Public classes.      (line  87)
* Slot, a <2>:                           Public classes.      (line 102)
* Slot, a <3>:                           Public classes.      (line 118)
* Slot, a <4>:                           Private classes.     (line  38)
* Slot, alias:                           Public structures.   (line 121)
* Slot, alpha:                           Public structures.   (line  47)
* Slot, alpha <1>:                       Public structures.   (line 181)
* Slot, alpha <2>:                       Public structures.   (line 236)
* Slot, alpha <3>:                       Private structures.  (line  62)
* Slot, beta:                            Public structures.   (line  54)
* Slot, beta <1>:                        Public structures.   (line 188)
* Slot, beta <2>:                        Public structures.   (line 243)
* Slot, chunk-length:                    Public classes.      (line  20)
* Slot, chunk-length <1>:                Public classes.      (line  62)
* Slot, chunk-length <2>:                Public classes.      (line  90)
* Slot, chunk-length <3>:                Public classes.      (line 105)
* Slot, chunk-length <4>:                Public classes.      (line 121)
* Slot, default-seed:                    Public classes.      (line  68)
* Slot, default-seed <1>:                Private classes.     (line  35)
* Slot, left:                            Public structures.   (line 388)
* Slot, left <1>:                        Private structures.  (line  39)
* Slot, left-standardized:               Private structures.  (line  46)
* Slot, log-mean:                        Public structures.   (line 266)
* Slot, log-sd:                          Public structures.   (line 273)
* Slot, m:                               Private classes.     (line  44)
* Slot, m0:                              Private structures.  (line  55)
* Slot, max:                             Public classes.      (line  56)
* Slot, mean:                            Public structures.   (line 297)
* Slot, mean <1>:                        Public structures.   (line 349)
* Slot, min:                             Public classes.      (line  50)
* Slot, mu:                              Private structures.  (line  25)
* Slot, n:                               Public structures.   (line  84)
* Slot, n-float:                         Public structures.   (line 128)
* Slot, nu:                              Public structures.   (line 363)
* Slot, pr:                              Public structures.   (line  23)
* Slot, pr <1>:                          Public structures.   (line  77)
* Slot, pr <2>:                          Public structures.   (line 209)
* Slot, prob:                            Public structures.   (line 114)
* Slot, probabilities:                   Public structures.   (line 107)
* Slot, rate:                            Public structures.   (line 153)
* Slot, right:                           Public structures.   (line 395)
* Slot, scale:                           Public structures.   (line 327)
* Slot, scale <1>:                       Public structures.   (line 356)
* Slot, sd:                              Public structures.   (line 304)
* Slot, sigma:                           Private structures.  (line  32)
* Slot, state:                           Public classes.      (line  40)
* Slot, width:                           Public structures.   (line 402)
* Special Variable, *default-generator-type*: Private special variables.
                                                              (line   7)
* state:                                 Public classes.      (line  39)
* width:                                 Public structures.   (line 401)


File: distributions.info,  Node: Data type index,  Prev: Variable index,  Up: Indexes

A.4 Data types
==============

 [index ]
* Menu:

* bernoulli.lisp:                        The distributions/bernoulli․lisp file.
                                                              (line   6)
* beta.lisp:                             The distributions/beta․lisp file.
                                                              (line   6)
* binomial.lisp:                         The distributions/binomial․lisp file.
                                                              (line   6)
* borosh13:                              Public classes.      (line   6)
* chi-square.lisp:                       The distributions/chi-square․lisp file.
                                                              (line   6)
* Class, borosh13:                       Public classes.      (line   7)
* Class, generator:                      Public classes.      (line  23)
* Class, randu:                          Public classes.      (line  76)
* Class, simple-multiplicative-congruential: Private classes. (line   7)
* Class, transputer:                     Public classes.      (line  93)
* Class, waterman14:                     Public classes.      (line 108)
* defs.lisp:                             The distributions/defs․lisp file.
                                                              (line   6)
* discrete.lisp:                         The distributions/discrete․lisp file.
                                                              (line   6)
* distributions:                         The distributions system.
                                                              (line   6)
* distributions <1>:                     The distributions package.
                                                              (line   6)
* distributions.asd:                     The distributions/distributions․asd file.
                                                              (line   6)
* distributions.internals:               The distributions․internals package.
                                                              (line   6)
* exponential.lisp:                      The distributions/exponential․lisp file.
                                                              (line   6)
* File, bernoulli.lisp:                  The distributions/bernoulli․lisp file.
                                                              (line   6)
* File, beta.lisp:                       The distributions/beta․lisp file.
                                                              (line   6)
* File, binomial.lisp:                   The distributions/binomial․lisp file.
                                                              (line   6)
* File, chi-square.lisp:                 The distributions/chi-square․lisp file.
                                                              (line   6)
* File, defs.lisp:                       The distributions/defs․lisp file.
                                                              (line   6)
* File, discrete.lisp:                   The distributions/discrete․lisp file.
                                                              (line   6)
* File, distributions.asd:               The distributions/distributions․asd file.
                                                              (line   6)
* File, exponential.lisp:                The distributions/exponential․lisp file.
                                                              (line   6)
* File, gamma.lisp:                      The distributions/gamma․lisp file.
                                                              (line   6)
* File, generator.lisp:                  The distributions/generator․lisp file.
                                                              (line   6)
* File, generics.lisp:                   The distributions/generics․lisp file.
                                                              (line   6)
* File, geometric.lisp:                  The distributions/geometric․lisp file.
                                                              (line   6)
* File, internals.lisp:                  The distributions/internals․lisp file.
                                                              (line   6)
* File, log-normal.lisp:                 The distributions/log-normal․lisp file.
                                                              (line   6)
* File, normal.lisp:                     The distributions/normal․lisp file.
                                                              (line   6)
* File, packages.lisp:                   The distributions/packages․lisp file.
                                                              (line   6)
* File, poisson.lisp:                    The distributions/poisson․lisp file.
                                                              (line   6)
* File, rayleigh.lisp:                   The distributions/rayleigh․lisp file.
                                                              (line   6)
* File, simple-multiplicative-congruential-generators.lisp: The distributions/simple-multiplicative-congruential-generators․lisp file.
                                                              (line   6)
* File, t-distribution.lisp:             The distributions/t-distribution․lisp file.
                                                              (line   6)
* File, truncated-normal.lisp:           The distributions/truncated-normal․lisp file.
                                                              (line   6)
* File, uniform.lisp:                    The distributions/uniform․lisp file.
                                                              (line   6)
* float-vector:                          Public types.        (line   6)
* gamma.lisp:                            The distributions/gamma․lisp file.
                                                              (line   6)
* generator:                             Public classes.      (line  22)
* generator.lisp:                        The distributions/generator․lisp file.
                                                              (line   6)
* generics.lisp:                         The distributions/generics․lisp file.
                                                              (line   6)
* geometric.lisp:                        The distributions/geometric․lisp file.
                                                              (line   6)
* internal-float:                        Public types.        (line  11)
* internals.lisp:                        The distributions/internals․lisp file.
                                                              (line   6)
* left-truncated-normal:                 Private structures.  (line   6)
* log-normal.lisp:                       The distributions/log-normal․lisp file.
                                                              (line   6)
* normal.lisp:                           The distributions/normal․lisp file.
                                                              (line   6)
* Package, distributions:                The distributions package.
                                                              (line   6)
* Package, distributions.internals:      The distributions․internals package.
                                                              (line   6)
* packages.lisp:                         The distributions/packages․lisp file.
                                                              (line   6)
* poisson.lisp:                          The distributions/poisson․lisp file.
                                                              (line   6)
* r-bernoulli:                           Public structures.   (line   6)
* r-beta:                                Public structures.   (line  29)
* r-binomial:                            Public structures.   (line  60)
* r-discrete:                            Public structures.   (line  90)
* r-exponential:                         Public structures.   (line 134)
* r-gamma:                               Public structures.   (line 159)
* r-geometric:                           Public structures.   (line 194)
* r-inverse-gamma:                       Public structures.   (line 215)
* r-log-normal:                          Public structures.   (line 249)
* r-normal:                              Public structures.   (line 279)
* r-rayleigh:                            Public structures.   (line 310)
* r-t:                                   Public structures.   (line 333)
* r-uniform:                             Public structures.   (line 369)
* r-univariate:                          Private structures.  (line  68)
* randu:                                 Public classes.      (line  75)
* rayleigh.lisp:                         The distributions/rayleigh․lisp file.
                                                              (line   6)
* simple-multiplicative-congruential:    Private classes.     (line   6)
* simple-multiplicative-congruential-generators.lisp: The distributions/simple-multiplicative-congruential-generators․lisp file.
                                                              (line   6)
* Structure, left-truncated-normal:      Private structures.  (line   7)
* Structure, r-bernoulli:                Public structures.   (line   7)
* Structure, r-beta:                     Public structures.   (line  30)
* Structure, r-binomial:                 Public structures.   (line  61)
* Structure, r-discrete:                 Public structures.   (line  91)
* Structure, r-exponential:              Public structures.   (line 135)
* Structure, r-gamma:                    Public structures.   (line 160)
* Structure, r-geometric:                Public structures.   (line 195)
* Structure, r-inverse-gamma:            Public structures.   (line 216)
* Structure, r-log-normal:               Public structures.   (line 250)
* Structure, r-normal:                   Public structures.   (line 280)
* Structure, r-rayleigh:                 Public structures.   (line 311)
* Structure, r-t:                        Public structures.   (line 334)
* Structure, r-uniform:                  Public structures.   (line 370)
* Structure, r-univariate:               Private structures.  (line  69)
* System, distributions:                 The distributions system.
                                                              (line   6)
* t-distribution.lisp:                   The distributions/t-distribution․lisp file.
                                                              (line   6)
* transputer:                            Public classes.      (line  92)
* truncated-normal.lisp:                 The distributions/truncated-normal․lisp file.
                                                              (line   6)
* Type, float-vector:                    Public types.        (line   7)
* Type, internal-float:                  Public types.        (line  12)
* uniform.lisp:                          The distributions/uniform․lisp file.
                                                              (line   6)
* waterman14:                            Public classes.      (line 107)



Tag Table:
Node: Top928
Node: Copying2137
Node: Systems2324
Node: The distributions system2538
Ref: ❨1❩2666
Node: Files5063
Node: Lisp files5279
Node: The distributions/distributions․asd file6378
Ref: ❨2❩6617
Node: The distributions/packages․lisp file6780
Ref: ❨3❩7040
Node: The distributions/internals․lisp file7260
Ref: ❨4❩7519
Node: The distributions/generator․lisp file8132
Ref: ❨5❩8428
Node: The distributions/simple-multiplicative-congruential-generators․lisp file9509
Ref: ❨6❩9872
Node: The distributions/defs․lisp file10700
Ref: ❨7❩10980
Node: The distributions/generics․lisp file11716
Ref: ❨8❩11967
Node: The distributions/discrete․lisp file12571
Ref: ❨9❩12825
Node: The distributions/uniform․lisp file14225
Ref: ❨10❩14480
Node: The distributions/exponential․lisp file15731
Ref: ❨11❩15994
Node: The distributions/normal․lisp file17060
Ref: ❨12❩17316
Node: The distributions/log-normal․lisp file18756
Ref: ❨13❩19025
Node: The distributions/truncated-normal․lisp file20046
Ref: ❨14❩20335
Node: The distributions/t-distribution․lisp file22317
Ref: ❨15❩22597
Node: The distributions/gamma․lisp file23718
Ref: ❨16❩23974
Node: The distributions/chi-square․lisp file26367
Ref: ❨17❩26623
Node: The distributions/beta․lisp file27060
Ref: ❨18❩27307
Node: The distributions/rayleigh․lisp file28270
Ref: ❨19❩28524
Node: The distributions/bernoulli․lisp file29403
Ref: ❨20❩29663
Node: The distributions/binomial․lisp file30604
Ref: ❨21❩30863
Node: The distributions/geometric․lisp file31847
Ref: ❨22❩32106
Node: The distributions/poisson․lisp file32942
Ref: ❨23❩33150
Node: Packages33388
Node: The distributions․internals package33624
Ref: ❨24❩33821
Node: The distributions package34443
Ref: ❨25❩34603
Node: Definitions47766
Node: Public Interface48025
Node: Public macros48352
Ref: ❨31❩48578
Ref: ❨33❩48887
Ref: ❨27❩49190
Node: Public ordinary functions49402
Ref: ❨29❩49620
Ref: ❨30❩49879
Ref: ❨32❩50188
Ref: ❨135❩50526
Ref: ❨91❩50859
Ref: ❨204❩51159
Ref: ❨52❩51399
Ref: ❨161❩51655
Ref: ❨92❩51962
Ref: ❨181❩52258
Ref: ❨160❩52742
Ref: ❨87❩53073
Ref: ❨162❩53356
Ref: ❨134❩53548
Ref: ❨71❩53781
Ref: ❨121❩54079
Ref: ❨210❩54269
Ref: ❨34❩54777
Ref: ❨180❩55111
Ref: ❨93❩55368
Ref: ❨185❩55514
Ref: ❨47❩55653
Ref: ❨197❩55796
Ref: ❨35❩56007
Ref: ❨139❩56152
Ref: ❨57❩56301
Ref: ❨88❩56440
Ref: ❨133❩56606
Ref: ❨129❩56851
Ref: ❨53❩57004
Ref: ❨206❩57166
Ref: ❨198❩57308
Ref: ❨96❩57453
Ref: ❨205❩57635
Ref: ❨101❩57890
Ref: ❨224❩58051
Ref: ❨51❩58424
Node: Public generic functions58567
Ref: ❨106❩58807
Ref: ❨107❩58943
Ref: ❨108❩59117
Ref: ❨109❩59255
Ref: ❨122❩59365
Ref: ❨123❩59500
Ref: ❨124❩59673
Ref: ❨125❩59810
Ref: ❨61❩59928
Ref: ❨62❩60186
Ref: ❨63❩60335
Ref: ❨64❩60476
Ref: ❨65❩60663
Ref: ❨66❩60822
Ref: ❨67❩60968
Ref: ❨68❩61140
Ref: ❨69❩61289
Ref: ❨70❩61432
Ref: ❨142❩61578
Ref: ❨143❩61861
Ref: ❨144❩62037
Ref: ❨145❩62214
Ref: ❨146❩62391
Ref: ❨147❩62539
Ref: ❨148❩62721
Ref: ❨149❩62867
Ref: ❨150❩63005
Ref: ❨151❩63209
Ref: ❨152❩63396
Ref: ❨153❩63550
Ref: ❨154❩63730
Ref: ❨155❩63907
Ref: ❨156❩64058
Ref: ❨157❩64190
Ref: ❨211❩64249
Ref: ❨212❩64478
Ref: ❨119❩64518
Ref: ❨120❩64659
Ref: ❨110❩64820
Ref: ❨111❩65409
Ref: ❨112❩65598
Ref: ❨113❩65836
Ref: ❨114❩66046
Ref: ❨115❩66243
Ref: ❨116❩66446
Ref: ❨117❩66646
Ref: ❨118❩66840
Ref: ❨163❩66959
Ref: ❨164❩67183
Ref: ❨165❩67330
Ref: ❨166❩67478
Ref: ❨167❩67626
Ref: ❨168❩67765
Ref: ❨169❩67938
Ref: ❨170❩68075
Ref: ❨171❩68204
Ref: ❨172❩68399
Ref: ❨173❩68557
Ref: ❨174❩68702
Ref: ❨175❩68873
Ref: ❨176❩69021
Ref: ❨177❩69163
Ref: ❨43❩69277
Ref: ❨44❩69553
Ref: ❨45❩69692
Ref: ❨46❩69824
Ref: ❨158❩69952
Ref: ❨159❩70100
Ref: ❨189❩70220
Ref: ❨190❩70361
Ref: ❨191❩70503
Ref: ❨192❩70695
Ref: ❨193❩70879
Ref: ❨194❩71030
Ref: ❨195❩71207
Ref: ❨196❩71361
Ref: ❨41❩71479
Ref: ❨42❩71648
Ref: ❨178❩71767
Ref: ❨179❩71909
Ref: ❨182❩72018
Ref: ❨183❩72162
Ref: ❨184❩72295
Ref: ❨219❩72435
Ref: ❨220❩72716
Ref: ❨72❩72765
Ref: ❨73❩72997
Ref: ❨74❩73148
Ref: ❨75❩73300
Ref: ❨76❩73452
Ref: ❨77❩73595
Ref: ❨78❩73772
Ref: ❨79❩73913
Ref: ❨80❩74046
Ref: ❨81❩74245
Ref: ❨82❩74427
Ref: ❨83❩74576
Ref: ❨84❩74751
Ref: ❨85❩74903
Ref: ❨86❩75049
Node: Public standalone methods75124
Ref: ❨425❩75432
Ref: ❨426❩75631
Ref: ❨422❩75850
Node: Public structures75944
Ref: ❨94❩76140
Ref: ❨95❩76676
Ref: ❨186❩76942
Ref: ❨187❩77531
Ref: ❨188❩77796
Ref: ❨48❩78060
Ref: ❨49❩78598
Ref: ❨50❩78862
Ref: ❨36❩79097
Ref: ❨37❩79633
Ref: ❨38❩79920
Ref: ❨39❩80190
Ref: ❨40❩80453
Ref: ❨140❩80734
Ref: ❨141❩81378
Ref: ❨58❩81653
Ref: ❨59❩82454
Ref: ❨60❩82721
Ref: ❨89❩82988
Ref: ❨90❩83427
Ref: ❨130❩83702
Ref: ❨131❩84419
Ref: ❨132❩84702
Ref: ❨54❩84986
Ref: ❨55❩85556
Ref: ❨56❩85841
Ref: ❨207❩86119
Ref: ❨208❩86690
Ref: ❨209❩86955
Ref: ❨199❩87219
Ref: ❨200❩87796
Ref: ❨97❩88063
Ref: ❨98❩88554
Ref: ❨99❩88812
Ref: ❨100❩89069
Ref: ❨102❩89322
Ref: ❨103❩89935
Ref: ❨104❩90205
Ref: ❨105❩90477
Node: Public classes90724
Ref: ❨126❩90894
Ref: ❨127❩91310
Ref: ❨128❩91400
Ref: ❨213❩91470
Ref: ❨214❩92119
Ref: ❨215❩92522
Ref: ❨216❩92710
Ref: ❨217❩92907
Ref: ❨218❩93158
Ref: ❨201❩93431
Ref: ❨202❩93900
Ref: ❨203❩93985
Ref: ❨136❩94056
Ref: ❨137❩94387
Ref: ❨138❩94474
Ref: ❨221❩94545
Ref: ❨222❩94950
Ref: ❨223❩95040
Node: Public types95090
Ref: ❨26❩95247
Ref: ❨28❩95429
Node: Internals95639
Node: Private constants95942
Ref: ❨367❩96137
Node: Private special variables96300
Ref: ❨391❩96523
Node: Private macros96635
Ref: ❨359❩96905
Node: Private ordinary functions97853
Ref: ❨253❩98085
Ref: ❨402❩98463
Ref: ❨356❩99137
Ref: ❨324❩99541
Ref: ❨301❩99746
Ref: ❨355❩99976
Ref: ❨326❩100175
Ref: ❨388❩100502
Ref: ❨226❩100663
Ref: ❨256❩100812
Ref: ❨305❩100960
Ref: ❨229❩101112
Ref: ❨238❩101266
Ref: ❨291❩101418
Ref: ❨397❩101568
Ref: ❨380❩101726
Ref: ❨383❩101877
Ref: ❨316❩102029
Ref: ❨344❩102179
Ref: ❨280❩102324
Ref: ❨259❩102481
Ref: ❨340❩102634
Ref: ❨343❩102790
Ref: ❨398❩102974
Ref: ❨297❩103342
Ref: ❨309❩103670
Ref: ❨332❩103890
Ref: ❨386❩104060
Ref: ❨387❩104118
Ref: ❨261❩104340
Ref: ❨262❩104397
Ref: ❨248❩104631
Ref: ❨249❩104701
Ref: ❨345❩104933
Ref: ❨346❩104988
Ref: ❨287❩105205
Ref: ❨288❩105260
Ref: ❨379❩105476
Ref: ❨381❩105646
Ref: ❨382❩105704
Ref: ❨250❩105975
Ref: ❨298❩106135
Ref: ❨270❩106291
Ref: ❨257❩106440
Ref: ❨390❩106621
Ref: ❨306❩106776
Ref: ❨260❩106935
Ref: ❨225❩107084
Ref: ❨389❩107249
Ref: ❨378❩107412
Ref: ❨392❩107568
Ref: ❨278❩107720
Ref: ❨273❩107875
Ref: ❨286❩108045
Ref: ❨401❩108194
Ref: ❨285❩108336
Ref: ❨364❩108635
Ref: ❨325❩108784
Ref: ❨247❩108926
Ref: ❨304❩109228
Ref: ❨295❩109465
Ref: ❨296❩109655
Ref: ❨263❩109805
Ref: ❨264❩109850
Ref: ❨353❩110047
Ref: ❨354❩110090
Ref: ❨232❩110285
Ref: ❨233❩110327
Ref: ❨265❩110518
Ref: ❨227❩110661
Ref: ❨228❩110704
Ref: ❨341❩110899
Ref: ❨370❩111047
Ref: ❨371❩111091
Ref: ❨266❩111291
Ref: ❨267❩111338
Ref: ❨251❩111542
Ref: ❨252❩111591
Ref: ❨349❩111791
Ref: ❨239❩111940
Ref: ❨240❩111986
Ref: ❨276❩112195
Ref: ❨277❩112250
Ref: ❨375❩112459
Ref: ❨268❩112615
Ref: ❨269❩112664
Ref: ❨302❩112867
Ref: ❨303❩112911
Ref: ❨347❩113107
Ref: ❨348❩113150
Ref: ❨292❩113342
Ref: ❨279❩113487
Ref: ❨360❩113637
Ref: ❨361❩113682
Ref: ❨319❩113888
Ref: ❨320❩113940
Ref: ❨393❩114145
Ref: ❨394❩114196
Ref: ❨331❩114397
Ref: ❨357❩114550
Ref: ❨358❩114602
Ref: ❨299❩114813
Ref: ❨300❩114863
Ref: ❨350❩115067
Ref: ❨241❩115217
Ref: ❨242❩115261
Ref: ❨258❩115456
Ref: ❨293❩115600
Ref: ❨294❩115642
Ref: ❨403❩115837
Ref: ❨365❩115988
Ref: ❨366❩116035
Ref: ❨351❩116231
Ref: ❨352❩116270
Ref: ❨395❩116468
Ref: ❨396❩116505
Ref: ❨230❩116701
Ref: ❨317❩116851
Ref: ❨318❩116891
Ref: ❨399❩117098
Ref: ❨400❩117143
Ref: ❨315❩117340
Ref: ❨362❩117489
Ref: ❨363❩117535
Ref: ❨289❩117737
Ref: ❨290❩117783
Ref: ❨342❩117984
Ref: ❨310❩118136
Ref: ❨231❩118432
Ref: ❨243❩118971
Node: Private generic functions119204
Ref: ❨376❩119424
Ref: ❨377❩119638
Ref: ❨274❩119971
Ref: ❨275❩120146
Ref: ❨307❩120409
Ref: ❨308❩120590
Ref: ❨321❩120780
Ref: ❨322❩121148
Ref: ❨323❩121202
Ref: ❨271❩121244
Ref: ❨272❩121419
Ref: ❨244❩121685
Ref: ❨245❩121999
Ref: ❨246❩122248
Ref: ❨254❩122279
Ref: ❨255❩122493
Ref: ❨372❩122818
Ref: ❨373❩122957
Ref: ❨384❩123072
Ref: ❨385❩123258
Ref: ❨368❩123448
Ref: ❨369❩123633
Ref: ❨327❩123824
Ref: ❨328❩123966
Ref: ❨329❩124111
Ref: ❨330❩124257
Ref: ❨313❩124374
Ref: ❨314❩124638
Ref: ❨311❩124752
Ref: ❨312❩124889
Ref: ❨234❩124997
Ref: ❨236❩125039
Ref: ❨235❩125187
Ref: ❨237❩125291
Node: Private structures125621
Ref: ❨333❩125822
Ref: ❨334❩126513
Ref: ❨335❩126803
Ref: ❨336❩127098
Ref: ❨337❩127404
Ref: ❨338❩127761
Ref: ❨339❩128051
Ref: ❨374❩128349
Node: Private classes129282
Ref: ❨281❩129452
Ref: ❨282❩130646
Ref: ❨283❩130716
Ref: ❨284❩130943
Node: Indexes131145
Node: Concept index131344
Node: Function index131474
Node: Variable index218101
Node: Data type index225705

End Tag Table


Local Variables:
coding: utf-8
End:

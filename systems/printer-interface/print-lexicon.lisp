(ql:quickload :utils)
(ql:quickload :printer-interface)

(in-package :utils)

#|
(print-lexicon "Canon_SELPHY_CP1300"
               :chip1 '((.8 .67 .34) ((bolima 0.7) (wabadu 0.1)))
               :chip2 '((0 1 0) ((a 0.7) (b 0.4)))
               :chip3 '((0 0 1) ((c 0.7) (d 0.4)))
               :chip4 '((1 1 0) ((e 1) (f 0.4)))
              ; :chip5 '((0 1 1) ((g 0.7) (h 0.4)))
              ; :chip6 '((1 0 1) ((i 0.7) (j 0.4)))
               )
|#

(defun print-lexicon (printer &key chip1 chip2 chip3 chip4 chip5 chip6)
       (if chip5
         (print-lexicon-6-chips printer
                                :chip1 chip1
                                :chip2 chip2
                                :chip3 chip3
                                :chip4 chip4
                                :chip5 chip5
                                :chip6 chip6)
         (print-lexicon-4chips printer
                               :chip1 chip1
                               :chip2 chip2
                               :chip3 chip3
                               :chip4 chip4)))

(defun print-lexicon-4chips (printer &key chip1 chip2 chip3 chip4)
  (let* ((name (capi:prompt-for-string "Name: "))
         ;; chip1
         (chip1-rgb (first chip1))
         (chip1-red (first chip1-rgb))
         (chip1-green (second chip1-rgb))
         (chip1-blue (third chip1-rgb))
         (chip1-words (second chip1))
         (chip1-word1 (caar chip1-words))
         (chip1-word2 (caadr chip1-words))
         (chip1-score1 (cadar chip1-words))
         (chip1-score2 (cadadr chip1-words))
         ;; chip2
         (chip2-rgb (first chip2))
         (chip2-red (first chip2-rgb))
         (chip2-green (second chip2-rgb))
         (chip2-blue (third chip2-rgb))
         (chip2-words (second chip2))
         (chip2-word1 (caar chip2-words))
         (chip2-word2 (caadr chip2-words))
         (chip2-score1 (cadar chip2-words))
         (chip2-score2 (cadadr chip2-words))
         ;; chip3
         (chip3-rgb (first chip3))
         (chip3-red (first chip3-rgb))
         (chip3-green (second chip3-rgb))
         (chip3-blue (third chip3-rgb))
         (chip3-words (second chip3))
         (chip3-word1 (caar chip3-words))
         (chip3-word2 (caadr chip3-words))
         (chip3-score1 (cadar chip3-words))
         (chip3-score2 (cadadr chip3-words))
         ;; chip4
         (chip4-rgb (first chip4))
         (chip4-red (first chip4-rgb))
         (chip4-green (second chip4-rgb))
         (chip4-blue (third chip4-rgb))
         (chip4-words (second chip4))
         (chip4-word1 (caar chip4-words))
         (chip4-word2 (caadr chip4-words))
         (chip4-score1 (cadar chip4-words))
         (chip4-score2 (cadadr chip4-words))
                       
         (path-to-tex (merge-pathnames (babel-pathname :directory '(".tmp")
                                                      :name (append-time "lexicon")
                                                      :type "tex")))
        (path-to-pdf (merge-pathnames (babel-pathname :directory '(".tmp")
                                                      :name (append-time "lexicon")
                                                      :type "pdf"))))
    (with-open-file (tex-stream path-to-tex :direction :output :if-exists :supersede)

      (format tex-stream "% Generated by Babel3

% Document Class
\\documentclass[final]{article}
% Paper size, orientation and margins
\\usepackage[a6paper, landscape, top=0.5cm,left=0.5cm,right=0.5cm,bottom=0.1cm]{geometry}
% No page numbers
\\pagestyle{empty}
% No indentation of paragraphs
\\usepackage{parskip}
% Font
\\usepackage[sfdefault]{roboto} 
\\usepackage[T1]{fontenc}
% Drawing
\\usepackage{tikz}
%url
\\usepackage{hyperref}
\\urlstyle{same}
\\hypersetup{colorlinks=true,urlcolor=blue}
% pbox
\\usepackage{pbox}
% graphics
\\usepackage{graphicx}
% colortext
\\usepackage{xcolor}
\\usepackage{array}

%%%%%%%%%%%%%%%
% Defining a few macros %
%%%%%%%%%%%%%%%

% A colorchip takes four arguments: id, R, G, and B
\\newcommand{\\colorchip[5]}
	{
		\\definecolor{color#2}{rgb}{#3,#4,#5}
		\\begin{center}
		\\begin{tikzpicture}
			\\draw  [rounded corners,fill=color#2]  rectangle(2.5,2.5);
			\\draw [color=white,font=\\bf\\scriptsize,align=left] (1.25,1.25) node {
			\\normalsize R: \\pgfmathparse{int(round(255 * #3))}\\pgfmathprintnumber[assume math mode=true]{\\pgfmathresult} \\\\\\\\
			\\normalsize G: \\pgfmathparse{int(round(255 * #4))}\\pgfmathprintnumber[assume math mode=true]{\\pgfmathresult}\\\\\\\\
			\\normalsize B: \\pgfmathparse{int(round(255 * #5))}\\pgfmathprintnumber[assume math mode=true]{\\pgfmathresult}}; 
		\\end{tikzpicture}
		\\end{center}
	}

\\newcommand{\\colorword[4]}{
	\\pgfmathparse{1-#4} 
	\\definecolor{textcolor#2}{rgb}{\\pgfmathresult,\\pgfmathresult,\\pgfmathresult}
	\\begin{center}\\large\\textbf{ \\textcolor{textcolor#2}{#3}}\\end{center}}

% Variable INPUT

\\newcommand{\\name}{~a}

\\newcommand{\\firstcolorchip}{\\colorchip{1}{~a}{~a}{~a}}
\\newcommand{\\secondcolorchip}{\\colorchip{2}{~a}{~a}{~a}}
\\newcommand{\\thirdcolorchip}{\\colorchip{3}{~a}{~a}{~a}}
\\newcommand{\\fourthcolorchip}{\\colorchip{4}{~a}{~a}{~a}}

\\newcommand{\\firstcolorfirstword}{\\colorword{1}{~(~a~)}{~a}}
\\newcommand{\\firstcolorsecondword}{\\colorword{2}{~(~a~)}{~a}}
\\newcommand{\\secondcolorfirstword}{\\colorword{3}{~(~a~)}{~a}}
\\newcommand{\\secondcolorsecondword}{\\colorword{4}{~(~a~)}{~a}}
\\newcommand{\\thirdcolorfirstword}{\\colorword{5}{~(~a~)}{~a}}
\\newcommand{\\thirdcolorsecondword}{\\colorword{6}{~(~a~)}{~a}}
\\newcommand{\\fourthcolorfirstword}{\\colorword{7}{~(~a~)}{~a}}
\\newcommand{\\fourthcolorsecondword}{\\colorword{8}{~(~a~)}{~a}}


\\begin{document}

% HEADER
\\parbox{\\linewidth}{\\centering\\LARGE\\bf{Spreek jij al Robots, \\name?}}
\\vspace{.4em}

% MAIN
% MAIN
\\parbox{\\linewidth}{
\\centering 
\\begin{tabular}{|p{.1em} p{.17\\textwidth} p{.18\\textwidth} p{.1\\textwidth} p{.17\\textwidth} p{.15\\textwidth}p{.1em}|}
\\hline
& \\vspace{3pt}  ~a & \\vspace{1cm} ~a  ~a & & 
 \\vspace{3pt} ~a  &  \\vspace{1cm} ~a ~a &\\\\
%\\hline
& \\vspace{-5pt} ~a & \\vspace{.75cm} ~a  ~a & &
 \\vspace{-5pt} ~a & \\vspace{.75cm} ~a ~a &\\\\
\\hline
\\end{tabular}}

\\vspace{1em}

% FOOTER
\\mbox{\\includegraphics[height=32pt]{~a}}
\\hfill
\\raisebox{13pt}{\\pbox{4.6cm}{\\centering \\textbf{ \\url{https://know.ai.vub.ac.be}}}}
\\hfill
\\mbox{\\includegraphics[height=32pt]{~a}}

\\end{document}


"
              name
              chip1-red chip1-green chip1-blue
              chip2-red chip2-green chip2-blue
              chip3-red chip3-green chip3-blue
              chip4-red chip4-green chip4-blue
              chip1-word1 chip1-score1 chip1-word2 chip1-score2
              chip2-word1 chip2-score1 chip2-word2 chip2-score2 
              chip3-word1 chip3-score1 chip3-word2 chip3-score2 
              chip4-word1 chip4-score1 chip4-word2 chip4-score2 
              (if chip1 "\\firstcolorchip" "") (if chip1-word1 "\\firstcolorfirstword" "") (if chip1-word2 "\\firstcolorsecondword" "")
              (if chip2 "\\secondcolorchip" "") (if chip2-word1 "\\secondcolorfirstword" "") (if chip2-word2 "\\secondcolorsecondword" "")
              (if chip3 "\\thirdcolorchip" "") (if chip3-word1 "\\thirdcolorfirstword" "") (if chip3-word2 "\\thirdcolorsecondword" "")
              (if chip4 "\\fourthcolorchip" "") (if chip4-word1 "\\fourthcolorfirstword" "") (if chip4-word2 "\\fourthcolorsecondword" "")
              (babel-pathname :directory '("systems" "printer-interface" "logos") :name "logo-lab")
              (babel-pathname :directory '("systems" "printer-interface" "logos") :name "wf-logo")))
    (let ((output-directory  (string-append "-output-directory=" (babel-pathname :directory '(".tmp")))))
      (exec-and-return  "pdflatex" "-synctex=1" "-interaction=nonstopmode" output-directory path-to-tex))
    (printer-interface:print-document path-to-pdf
                                      :printer printer
                                      :copies 1
                                      :orientation 4
                                      :size "postcard"
                                      :fit-to-page t)
    ))

(defun print-lexicon-6-chips (printer &key chip1 chip2 chip3 chip4 chip5 chip6)
  (let* ((name (capi:prompt-for-string "Name: "))
         ;; chip1
         (chip1-rgb (first chip1))
         (chip1-red (first chip1-rgb))
         (chip1-green (second chip1-rgb))
         (chip1-blue (third chip1-rgb))
         (chip1-words (second chip1))
         (chip1-word1 (caar chip1-words))
         (chip1-word2 (caadr chip1-words))
         (chip1-score1 (cadar chip1-words))
         (chip1-score2 (cadadr chip1-words))
         ;; chip2
         (chip2-rgb (first chip2))
         (chip2-red (first chip2-rgb))
         (chip2-green (second chip2-rgb))
         (chip2-blue (third chip2-rgb))
         (chip2-words (second chip2))
         (chip2-word1 (caar chip2-words))
         (chip2-word2 (caadr chip2-words))
         (chip2-score1 (cadar chip2-words))
         (chip2-score2 (cadadr chip2-words))
         ;; chip3
         (chip3-rgb (first chip3))
         (chip3-red (first chip3-rgb))
         (chip3-green (second chip3-rgb))
         (chip3-blue (third chip3-rgb))
         (chip3-words (second chip3))
         (chip3-word1 (caar chip3-words))
         (chip3-word2 (caadr chip3-words))
         (chip3-score1 (cadar chip3-words))
         (chip3-score2 (cadadr chip3-words))
         ;; chip4
         (chip4-rgb (first chip4))
         (chip4-red (first chip4-rgb))
         (chip4-green (second chip4-rgb))
         (chip4-blue (third chip4-rgb))
         (chip4-words (second chip4))
         (chip4-word1 (caar chip4-words))
         (chip4-word2 (caadr chip4-words))
         (chip4-score1 (cadar chip4-words))
         (chip4-score2 (cadadr chip4-words))
         ;; chip5
         (chip5-rgb (first chip5))
         (chip5-red (first chip5-rgb))
         (chip5-green (second chip5-rgb))
         (chip5-blue (third chip5-rgb))
         (chip5-words (second chip5))
         (chip5-word1 (caar chip5-words))
         (chip5-word2 (caadr chip5-words))
         (chip5-score1 (cadar chip5-words))
         (chip5-score2 (cadadr chip5-words))
         ;; chip6
         (chip6-rgb (first chip6))
         (chip6-red (first chip6-rgb))
         (chip6-green (second chip6-rgb))
         (chip6-blue (third chip6-rgb))
         (chip6-words (second chip6))
         (chip6-word1 (caar chip6-words))
         (chip6-word2 (caadr chip6-words))
         (chip6-score1 (cadar chip6-words))
         (chip6-score2 (cadadr chip6-words))
                       
         (path-to-tex (merge-pathnames (babel-pathname :directory '(".tmp")
                                                      :name (append-time "lexicon")
                                                      :type "tex")))
        (path-to-pdf (merge-pathnames (babel-pathname :directory '(".tmp")
                                                      :name (append-time "lexicon")
                                                      :type "pdf"))))
    (with-open-file (tex-stream path-to-tex :direction :output :if-exists :supersede)

      (format tex-stream "% Generated by Babel3

% Document Class
\\documentclass[final]{article}
% Paper size, orientation and margins
\\usepackage[a6paper, landscape, top=0.5cm,left=0.5cm,right=0.5cm,bottom=0.1cm]{geometry}
% No page numbers
\\pagestyle{empty}
% No indentation of paragraphs
\\usepackage{parskip}
% Font
\\usepackage[sfdefault]{roboto} 
\\usepackage[T1]{fontenc}
% Drawing
\\usepackage{tikz}
%url
\\usepackage{hyperref}
\\urlstyle{same}
\\hypersetup{colorlinks=true,urlcolor=blue}
% pbox
\\usepackage{pbox}
% graphics
\\usepackage{graphicx}
% colortext
\\usepackage{xcolor}
\\usepackage{array}

%%%%%%%%%%%%%%%
% Defining a few macros %
%%%%%%%%%%%%%%%

% A colorchip takes four arguments: id, R, G, and B
\\newcommand{\\colorchip[5]}
	{
		\\definecolor{color#2}{rgb}{#3,#4,#5}
		\\begin{center}
		\\begin{tikzpicture}
			\\draw  [rounded corners,fill=color#2]  rectangle(1.5,1.5);
			\\draw [color=white,font=\\bf\\scriptsize,align=left] (0.75,0.75) node {
			\\footnotesize R: \\pgfmathparse{int(round(255 * #3))}\\pgfmathprintnumber[assume math mode=true]{\\pgfmathresult} \\\\
			\\footnotesize G: \\pgfmathparse{int(round(255 * #4))}\\pgfmathprintnumber[assume math mode=true]{\\pgfmathresult}\\\\
			\\footnotesize B: \\pgfmathparse{int(round(255 * #5))}\\pgfmathprintnumber[assume math mode=true]{\\pgfmathresult}}; 
		\\end{tikzpicture}
		\\end{center}
	}

\\newcommand{\\colorword[4]}{
	\\pgfmathparse{1-#4} 
	\\definecolor{textcolor#2}{rgb}{\\pgfmathresult,\\pgfmathresult,\\pgfmathresult}
	\\begin{center}\\large\\textbf{ \\textcolor{textcolor#2}{#3}}\\end{center}}

% Variable INPUT

\\newcommand{\\name}{~a}

\\newcommand{\\firstcolorchip}{\\colorchip{1}{~a}{~a}{~a}}
\\newcommand{\\secondcolorchip}{\\colorchip{2}{~a}{~a}{~a}}
\\newcommand{\\thirdcolorchip}{\\colorchip{3}{~a}{~a}{~a}}
\\newcommand{\\fourthcolorchip}{\\colorchip{4}{~a}{~a}{~a}}
\\newcommand{\\fifthcolorchip}{\\colorchip{5}{~a}{~a}{~a}}
\\newcommand{\\sixthcolorchip}{\\colorchip{6}{~a}{~a}{~a}}

\\newcommand{\\firstcolorfirstword}{\\colorword{1}{~(~a~)}{~a}}
\\newcommand{\\firstcolorsecondword}{\\colorword{2}{~(~a~)}{~a}}
\\newcommand{\\secondcolorfirstword}{\\colorword{3}{~(~a~)}{~a}}
\\newcommand{\\secondcolorsecondword}{\\colorword{4}{~(~a~)}{~a}}
\\newcommand{\\thirdcolorfirstword}{\\colorword{5}{~(~a~)}{~a}}
\\newcommand{\\thirdcolorsecondword}{\\colorword{6}{~(~a~)}{~a}}
\\newcommand{\\fourthcolorfirstword}{\\colorword{7}{~(~a~)}{~a}}
\\newcommand{\\fourthcolorsecondword}{\\colorword{8}{~(~a~)}{~a}}
\\newcommand{\\fifthcolorfirstword}{\\colorword{9}{~(~a~)}{~a}}
\\newcommand{\\fifthcolorsecondword}{\\colorword{10}{~(~a~)}{~a}}
\\newcommand{\\sixthcolorfirstword}{\\colorword{11}{~(~a~)}{~a}}
\\newcommand{\\sixthcolorsecondword}{\\colorword{12}{~(~a~)}{~a}}


\\begin{document}

% HEADER
\\parbox{\\linewidth}{\\centering\\LARGE\\bf{Spreek jij al Robots, \\name?}}
\\vspace{.4em}

% MAIN
\\parbox{\\linewidth}{
\\centering 
\\begin{tabular}{|p{.303\\textwidth}p{.303\\textwidth}p{.303\\textwidth}|}
\\hline
\\vspace{3pt} ~a \\vspace{.5em} ~a  ~a & 
\\vspace{3pt} ~a  \\vspace{.5em } ~a ~a &  
\\vspace{3pt} ~a  \\vspace{.5em } ~a ~a \\\\
%\\hline
\\vspace{-5pt} ~a \\vspace{.5em} ~a  ~a &
\\vspace{-5pt} ~a \\vspace{.5em} ~a ~a  & 
\\vspace{-5pt} ~a \\vspace{.5em} ~a ~a \\\\
\\hline
\\end{tabular}}

\\vspace{.8em}

% FOOTER
\\mbox{\\includegraphics[height=32pt]{~a}}
\\hfill
\\raisebox{13pt}{\\pbox{4.6cm}{\\centering \\textbf{ \\url{https://know.ai.vub.ac.be}}}}
\\hfill
\\mbox{\\includegraphics[height=32pt]{~a}}

\\end{document}


"
              name
              chip1-red chip1-green chip1-blue
              chip2-red chip2-green chip2-blue
              chip3-red chip3-green chip3-blue
              chip4-red chip4-green chip4-blue
              chip5-red chip5-green chip5-blue
              chip6-red chip6-green chip6-blue
              chip1-word1 chip1-score1 chip1-word2 chip1-score2
              chip2-word1 chip2-score1 chip2-word2 chip2-score2 
              chip3-word1 chip3-score1 chip3-word2 chip3-score2 
              chip4-word1 chip4-score1 chip4-word2 chip4-score2 
              chip5-word1 chip5-score1 chip5-word2 chip5-score2 
              chip6-word1 chip6-score1 chip6-word2 chip6-score2
              (if chip1 "\\firstcolorchip" "") (if chip1-word1 "\\firstcolorfirstword" "") (if chip1-word2 "\\firstcolorsecondword" "")
              (if chip2 "\\secondcolorchip" "") (if chip2-word1 "\\secondcolorfirstword" "") (if chip2-word2 "\\secondcolorsecondword" "")
              (if chip3 "\\thirdcolorchip" "") (if chip3-word1 "\\thirdcolorfirstword" "") (if chip3-word2 "\\thirdcolorsecondword" "")
              (if chip4 "\\fourthcolorchip" "") (if chip4-word1 "\\fourthcolorfirstword" "") (if chip4-word2 "\\fourthcolorsecondword" "")
              (if chip5 "\\fifthcolorchip" "") (if chip5-word1 "\\fifthcolorfirstword" "") (if chip5-word2 "\\fifthcolorsecondword" "")
              (if chip6 "\\sixthcolorchip" "") (if chip6-word1 "\\sixthcolorfirstword" "") (if chip6-word2 "\\sixthcolorsecondword" "")
              (babel-pathname :directory '("systems" "printer-interface" "logos") :name "logo-lab")
              (babel-pathname :directory '("systems" "printer-interface" "logos") :name "wf-logo")))
    (let ((output-directory  (string-append "-output-directory=" (babel-pathname :directory '(".tmp")))))
      (exec-and-return  "pdflatex" "-synctex=1" "-interaction=nonstopmode" output-directory path-to-tex))
    (printer-interface:print-document path-to-pdf
                                      :printer printer
                                      :copies 1
                                      :orientation 4
                                      :size "postcard"
                                      :fit-to-page t)
    ))

(defun append-time (string)
  "Appends year-month-day-hour-minute-second to string"
  (multiple-value-bind (sec min hour day month year)
      (decode-universal-time (get-universal-time))
    (string-append string (format nil "-~d-~2,'0d-~2,'0d-~2,'0d-~2,'0d-~2,'0d"
            year month day hour min sec))))
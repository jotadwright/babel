(in-package :grammar-learning)

(deftest test-diff-clevr-networks ()
  (let ((network-1 '((query ?target-4 ?target-object-1 ?attribute-2)
                     (unique ?target-object-1 ?target-33324)
                     (filter ?target-33324 ?target-33323 ?size-4)
                     (filter ?target-33323 ?target-2 ?color-2)
                     (filter ?target-2 ?target-1 ?material-4)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (get-context ?source-1)
                     (bind attribute-category ?attribute-2 shape)
                     (bind size-category ?size-4 large)
                     (bind color-category ?color-2 gray)
                     (bind material-category ?material-4 metal)
                     (bind shape-category ?shape-8 thing)))
        (network-2 '((query ?target-4 ?target-object-1 ?attribute-2)
                     (unique ?target-object-1 ?target-2)
                     (filter ?target-2 ?target-1 ?size-4)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (get-context ?source-1)
                     (bind attribute-category ?attribute-2 shape)
                     (bind size-category ?size-4 large)
                     (bind shape-category ?shape-8 thing)))
        (network-3 '((query ?target-4 ?target-object-1 ?attribute-2)
                     (unique ?target-object-1 ?target-33324)
                     (filter ?target-33324 ?target-33323 ?size-4)
                     (filter ?target-33323 ?target-2 ?color-2)
                     (filter ?target-2 ?target-1 ?material-4)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (get-context ?source-1)
                     (bind attribute-category ?attribute-2 shape)
                     (bind size-category ?size-4 large)
                     (bind color-category ?color-2 blue)
                     (bind material-category ?material-4 metal)
                     (bind shape-category ?shape-8 thing)))
        (network-5 '((get-context ?source-1)
                     (filter ?target-39552 ?target-2 ?size-4)
                     (unique ?source-10 ?target-39552)
                     (bind color-category ?color-2 gray)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (bind attribute-category ?attribute-2 shape)
                     (bind shape-category ?shape-8 thing)
                     (filter ?target-2 ?target-1 ?color-2)
                     (bind size-category ?size-4 large)
                     (query ?target-8 ?source-10 ?attribute-2)))
        (network-6 '((get-context ?source-1)
                     (filter ?target-14197 ?target-2 ?size-2)
                     (unique ?source-10 ?target-14197)
                     (bind color-category ?color-16 gray)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (bind attribute-category ?attribute-2 material)
                     (bind shape-category ?shape-8 thing)
                     (filter ?target-2 ?target-1 ?color-16)
                     (bind size-category ?size-2 large)
                     (query ?target-8 ?source-10 ?attribute-2)))
        (network-7 '((get-context ?source-1)
                     (filter ?target-2 ?target-1 ?size-4)
                     (unique ?target-object-1 ?target-2)
                     (bind shape-category ?shape-8 thing)
                     (bind attribute-category ?attribute-4 color)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (bind size-category ?size-4 large)
                     (query ?target-4 ?target-object-1 ?attribute-4)))
        (network-8 '((filter ?target-39552 ?target-2 ?size-4)
                     (bind size-category ?size-4 large)))
        (result-7-vs-8 '(((query ?target-4 ?target-object-1 ?attribute-4)
                          (filter ?target-1 ?source-1 ?shape-8)
                          (bind attribute-category ?attribute-4 color)
                          (bind shape-category ?shape-8 thing)
                          (unique ?target-object-1 ?target-2)
                          (get-context ?source-1)) nil))
        (result-5-vs-6 '(((query ?target-8 ?source-10 ?attribute-2)
                         (bind attribute-category ?attribute-2 shape))
                         ((query ?target-8 ?source-10 ?attribute-2)
                          (bind attribute-category ?attribute-2 material))
                         ))
        (result-1-vs-2 '((bind material-category ?material-4 metal)
                         (bind color-category ?color-2 gray)
                         (filter ?target-2 ?target-1 ?material-4)
                         (filter ?target-33323 ?target-2 ?color-2)
                         ))
        (result-3-vs-1 '(((bind color-category ?color-2 blue)
                          (filter ?target-33323 ?target-2 ?color-2))
                         ((bind color-category ?color-2 gray)
                          (filter ?target-33323 ?target-2 ?color-2))))
        (result-1-vs-3 '(((bind color-category ?color-2 gray)
                          (filter ?target-33323 ?target-2 ?color-2))
                         ((bind color-category ?color-2 blue)
                          (filter ?target-33323 ?target-2 ?color-2)))))

    (test-equal (first (multiple-value-list (diff-clevr-networks network-1 network-2)))
                result-1-vs-2)
    (test-equal (second (multiple-value-list (diff-clevr-networks network-2 network-1)))
                result-1-vs-2)
    (test-equal (multiple-value-list (diff-clevr-networks network-1 network-3))
                result-1-vs-3)
    (test-equal (multiple-value-list (diff-clevr-networks network-3 network-1))
                result-3-vs-1)
    (test-equal (multiple-value-list (diff-clevr-networks network-5 network-6))
                result-5-vs-6)
    (test-equal (multiple-value-list (diff-clevr-networks network-7 network-8))
                result-7-vs-8)
    ))

(deftest test-commutative-irl-subset-diff()
  (let* ((network-1 '((bind material-category ?material-2 rubber)
                     (filter ?target-9839 ?source-1 ?shape-5228)
                     (bind color-category ?color-8 green)
                     (filter ?target-2 ?target-1 ?material-4)
                     (bind material-category ?material-4 metal)
                     ;(filter ?target-1 ?source-1 ?shape-2)
                     ;(bind shape-category ?shape-2 cube)
                     (bind shape-category ?shape-5228 cube)
                     (filter ?target-9842 ?target-2 ?color-8)
                     (bind size-category ?size-4 large)
                     (get-context ?source-1)
                     (filter ?target-9843 ?target-9842 ?size-4)
                     (filter ?target-9845 ?target-9839 ?material-2)
                     (count! ?count-5 ?target-9845)
                     (count! ?count-6 ?target-9843)
                     (less-than ?target-74 ?count-5 ?count-6)))
        (network-2 '((bind material-category ?material-2 rubber)
                     (filter ?target-9839 ?source-1 ?shape-5228)
                     (bind color-category ?color-8 green)
                     (filter ?target-2 ?target-1 ?material-4)
                     (bind material-category ?material-4 metal)
                     (filter ?target-1 ?source-1 ?shape-2)
                     (bind shape-category ?shape-2 cube)
                     (bind shape-category ?shape-5228 cube)
                     (filter ?target-9842 ?target-2 ?color-8)
                     (bind size-category ?size-4 large)
                     (get-context ?source-1)
                     (filter ?target-9843 ?target-9842 ?size-4)
                     (filter ?target-9845 ?target-9839 ?material-2)
                     (count! ?count-5 ?target-9845)
                     (count! ?count-6 ?target-9843)
                     (less-than ?target-74 ?count-5 ?count-6)))
        (result-1-vs-2 (multiple-value-list (commutative-irl-subset-diff network-2 network-1)))
        
        )

    (test-equal (multiple-value-list (commutative-irl-subset-diff network-1 network-2))
                (multiple-value-list (commutative-irl-subset-diff network-2 network-1)))
                
    (test-assert (equivalent-irl-programs?
                   (append (first result-1-vs-2)
                           (second result-1-vs-2))
                network-2))))

(deftest test-extract-args-from-irl-network ()
  (let ((network-1 '((query ?target-4 ?target-object-1 ?attribute-2)
                     (unique ?target-object-1 ?target-33324)
                     (filter ?target-33324 ?target-33323 ?size-4)
                     (filter ?target-33323 ?target-2 ?color-2)
                     (filter ?target-2 ?target-1 ?material-4)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (get-context ?source-1)
                     (bind attribute-category ?attribute-2 shape)
                     (bind size-category ?size-4 large)
                     (bind color-category ?color-2 gray)
                     (bind material-category ?material-4 metal)
                     (bind shape-category ?shape-8 thing)))
        (network-2 '((bind material-category ?material-4 metal)
                     (bind color-category ?color-2 gray)
                     (filter ?target-2 ?target-1 ?material-4)
                     (filter ?target-33323 ?target-2 ?color-2)
                     ))
        (network-3 '((bind color-category ?color-2 blue)
                     (filter ?target-33323 ?target-2 ?color-2)))
        (network-4 '((filter ?target-140354 ?target-2 ?color-6)
                     (filter ?target-1 ?source-1 ?shape-6)
                     (bind color-category ?color-6 blue)
                     (bind shape-category ?shape-6 cylinder))))
                                
    (test-equal (extract-args-from-irl-network network-1) '(?target-4))
                       
    (test-equal (extract-args-from-irl-network network-2) '(?target-1 ?target-33323))
                       
    (test-equal (extract-args-from-irl-network network-3) '(?target-2 ?target-33323))

    (test-equal (extract-args-from-irl-network network-4) '(?source-1 ?target-2 ?target-1 ?target-140354))))
                       
(deftest test-extract-vars-from-irl-network ()
  (let ((network-1 '((query ?target-4 ?target-object-1 ?attribute-2)
                     (unique ?target-object-1 ?target-33324)
                     (filter ?target-33324 ?target-33323 ?size-4)
                     (filter ?target-33323 ?target-2 ?color-2)
                     (filter ?target-2 ?target-1 ?material-4)
                     (filter ?target-1 ?source-1 ?shape-8)
                     (get-context ?source-1)
                     (bind attribute-category ?attribute-2 shape)
                     (bind size-category ?size-4 large)
                     (bind color-category ?color-2 gray)
                     (bind material-category ?material-4 metal)
                     (bind shape-category ?shape-8 thing)))
        (network-2 '((bind material-category ?material-4 metal)
                     (bind color-category ?color-2 gray)
                     (filter ?target-2 ?target-1 ?material-4)
                     (filter ?target-33323 ?target-2 ?color-2)
                     ))
        (network-3 '((bind color-category ?color-2 blue)
                     (filter ?target-33323 ?target-2 ?color-2))))
                                
    (test-equal (multiple-value-list (extract-vars-from-irl-network network-1)) '(nil ?target-4 nil))
                       
    (test-equal (multiple-value-list (extract-vars-from-irl-network network-2)) '(?target-1 ?target-33323 nil))
                       
    (test-equal (multiple-value-list (extract-vars-from-irl-network network-3)) '(?target-2 ?target-33323 nil))))

;(test-commutative-irl-diff)
;(test-diff-clevr-networks)
;(test-extract-args-from-irl-network)
;(test-extract-vars-from-irl-network)

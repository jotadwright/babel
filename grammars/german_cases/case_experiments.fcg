
(def-fcg-constructions german-case-grammar
  :feature-types ((args sequence)
                  (form set-of-predicates)
                  (meaning set-of-predicates)
                  (constituents sequence)
                  (dependents sequence)
                  (case sequence)
                  (referent set))
  :hierarchy-features (constituents dependents))




(def-fcg-cxn der-cxn
             (<-
              (?the-word
               (syn-cat (lex-class article)
                        (case ((?nm ?nm - - -)    ;nom, acc, gen, dat  (nom masculine)
                               (- - - - -)        ;masc, fem, neut, plural
                               (?gf - ?gf - -)    ;genitive feminine
                               (?df - ?df - -))))
               --
               (HASH form ((string ?the-word "der"))))))


(def-fcg-cxn den-cxn  
             (<-
              (?the-word
               (syn-cat (lex-class article)
                        (definite +)
                        (case ((- - - - -)        
                               (?am ?am - - -)        
                               (- - - - -)          
                               (?dp - - - ?dp))))
               --
               (HASH form ((string ?the-word "den"))))))

(def-fcg-cxn die-cxn  
             (<-
              (?the-word
               (syn-cat (lex-class article)
                        (case ((?nom - ?nf - ?np)    
                               (?acc - ?af - ?ap)       
                               (- - - - -)   
                               (- - - - -))))
               --
               (HASH form ((string ?the-word "die"))))))

(def-fcg-cxn das-cxn  
             (<-
              (?the-word
               (syn-cat (lex-class article)
                        (case ((?nn - - ?nn -)    
                               (?an - - ?an -)        
                               (- - - - -)   
                               (- - - - -))))
               --
               (HASH form ((string ?the-word "das"))))))

(def-fcg-cxn dem-cxn  
             (<-
              (?the-word
               (syn-cat (lex-class article)
                        (case ((- - - - -)     
                               (- - - - -)        
                               (- - - - -)   
                               (?dat ?dm - ?dn -))))
               --
               (HASH form ((string ?the-word "dem"))))))


(def-fcg-cxn zum-cxn
             (<-
              (?to-word
               (syn-cat (lex-class comp-preposition)
                        (case ((- - - - -)      
                               (- - - - -)       
                               (- - - - -)      
                               (?dat ?dm - ?dn -))))
               --
               (HASH form ((string ?to-word "zum"))))))


(def-fcg-cxn beim-cxn
             (<-
              (?at-word
               (syn-cat (lex-class comp-preposition)
                        (case ((- - - - -)     
                               (- - - - -)       
                               (- - - - -)      
                               (?dat ?dm - ?dn -))))
               --
               (HASH form ((string ?at-word "beim"))))))

(def-fcg-cxn aus-cxn
             (<-
              (?from-word
               (syn-cat (lex-class preposition)
                        (case ((- - - - -)      
                               (- - - - -)        
                               (- - - - -)      
                               (?dat ?dm ?df ?dn ?dp))))
               --
               (HASH form ((string ?from-word "aus"))))))

(def-fcg-cxn durch-cxn
             (<-
              (?across-word
               (syn-cat (lex-class preposition)
                        (case ((- - - - -)      
                               (?acc ?am ?af ?an ?ap)        
                               (- - - - -)      
                               (- - - - -))))
               --
               (HASH form ((string ?across-word "durch"))))))


;;;;;;;;;;;;;;LEXICAL CXNs

(def-fcg-cxn Polizist-cxn
             ((?policeman-word
               (referent (?x))                             ;set of values
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)                   ;feature value pair
                        (case ((?nm ?nm - - -)           
                               (- - - - -)    
                               (- - - - -)     
                               (- - - - -))))
                        
               (boundaries (leftmost-unit ?policeman-word)
                           (rightmost-unit ?policeman-word)))
              <-
              (?policeman-word
               (HASH meaning ((policeman ?x)))                     
               --
               (HASH form ((string ?policeman-word  "Polizist"))))))


(def-fcg-cxn Bäcker-cxn
             ((?baker-word                      
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)    
                               (?acc ?am - - ?ap)     
                               (?pg - - - ?pg)       
                               (?dm ?dm - - -))))
               (boundaries (leftmost-unit ?baker-word)
                           (rightmost-unit ?baker-word)))
              <-
              (?baker-word                           
               (HASH meaning ((baker ?x)))              
               --
               (HASH form ((string ?baker-word  "Bäcker"))))))


(def-fcg-cxn Hund-cxn
             ((?dog-word
               (referent (?x))                  
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)         
                        (case ((?nm ?nm - - -)    
                               (?am ?am - - -)     
                               (- - - - -)       
                               (?dm ?dm - - -))))
                        
               (boundaries (leftmost-unit ?dog-word)
                           (rightmost-unit ?dog-word)))
              <-
              (?dog-word
               (HASH meaning ((dog ?x)))                     
               --
               (HASH form ((string ?dog-word  "Hund"))))))

(def-fcg-cxn Mädchen-cxn
             ((?girl-word
               (referent (?x))                  
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)         
                        (case ((?nn - - ?nn -)     
                               (?an - - ?an -)      
                               (- - - - -)       
                               (?dn - - ?dn -))))
                        
               (boundaries (leftmost-unit ?girl-word)
                           (rightmost-unit ?girl-word)))
              <-
              (?girl-word
               (HASH meaning ((girl ?x)))                     
               --
               (HASH form ((string ?girl-word  "Mädchen"))))))

(def-fcg-cxn Mann-cxn
             ((?man-word
               (referent (?x))                  
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)         
                        (case ((?nm ?nm - - -)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -))))
                        
               (boundaries (leftmost-unit ?man-word)
                           (rightmost-unit ?man-word)))
              <-
              (?man-word
               (HASH meaning ((man ?x)))                     
               --
               (HASH form ((string ?man-word  "Mann"))))))




(def-fcg-cxn Kellner-cxn
             ((?waiter-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?acc ?am - - ?ap)      
                               (?pg - - - ?pg)       
                               (?dm ?dm - - -))))
               (boundaries (leftmost-unit ?waiter-word)
                           (rightmost-unit ?waiter-word)))
              <-
              (?waiter-word
               (HASH meaning ((waiter ?x)))               
               --
               (HASH form ((string ?waiter-word  "Kellner"))))))


(def-fcg-cxn König-cxn
             ((?king-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nm ?nm - - -)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -))))
               (boundaries (leftmost-unit ?king-word)
                           (rightmost-unit ?king-word)))
              <-
              (?king-word                            
               (HASH meaning ((king ?x)))                
               --
               (HASH form ((string ?king-word  "König"))))))


(def-fcg-cxn Tiger-cxn
             ((?tiger-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?acc ?am - - ?ap)      
                               (?pg - - - ?pg)       
                               (?dm ?dm - - -)))
                        )
               (boundaries (leftmost-unit ?tiger-word)
                           (rightmost-unit ?tiger-word)))
              <-
              (?tiger-word                            
               (HASH meaning ((tiger ?x)))                    
               --
               (HASH form ((string ?tiger-word  "Tiger"))))))


(def-fcg-cxn Jäger-cxn
             ((?hunter-word
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?acc ?am - - ?ap)      
                               (?pg - - - ?pg)       
                               (?dm ?dm - - -)))
                        )
               (boundaries (leftmost-unit ?hunter-word)
                           (rightmost-unit ?hunter-word)))
              <-
              (?hunter-word                            
               (HASH meaning ((hunter ?x)))                    
               --
               (HASH form ((string ?hunter-word  "Jäger"))))))


(def-fcg-cxn Junge-cxn
             ((?boy-unit
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nm ?nm - - -)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (- - - - -))))
               (boundaries (leftmost-unit ?boy-unit)
                           (rightmost-unit ?boy-unit)))
              <-
              (?boy-unit                            
               (HASH meaning ((boy ?x)))                    
               --
               (HASH form ((string ?boy-unit  "Junge"))))))


(def-fcg-cxn Frau-cxn
             ((?woman-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nf - ?nf - -)     
                               (?af - ?af - -)      
                               (?gf - ?gf - -)       
                               (?df - ?df - -)))
                        )
               (boundaries (leftmost-unit ?woman-word)
                           (rightmost-unit ?woman-word)))
              <-
              (?woman-word
               (HASH meaning ((woman ?x)))                     
               --
               (HASH form ((string ?woman-word  "Frau"))))))


(def-fcg-cxn Laden-cxn
             ((?shop-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?acc ?am - - ?ap)      
                               (- - - - -)       
                               (?dat ?dm - - ?dp))))
               (boundaries (leftmost-unit ?shop-word)
                           (rightmost-unit ?shop-word)))
              <-
              (?shop-word                            
               (HASH meaning ((shop ?x)))                
               --
               (HASH form ((string ?shop-word  "Laden"))))))

(def-fcg-cxn Shop-cxn
             ((?shop-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -))))
               (boundaries (leftmost-unit ?shop-word)
                           (rightmost-unit ?shop-word)))
              <-
              (?shop-word                            
               (HASH meaning ((shop ?x)))                
               --
               (HASH form ((string ?shop-word  "Shop"))))))

(def-fcg-cxn Park-cxn
             ((?park-word                        
               (referent (?x))
               (sem-cat (sem-class physical-entity))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -))))
               (boundaries (leftmost-unit ?park-word)
                           (rightmost-unit ?park-word)))
              <-
              (?park-word                            
               (HASH meaning ((park ?x)))                
               --
               (HASH form ((string ?park-word  "Park"))))))


;;;;;;CXNS

(def-fcg-cxn noun-phrase-cxn
             ((?noun-phrase
               (referent (?x))
               (syn-cat (lex-class noun-phrase)
                        (case ?case))
               (constituents (?article ?noun))
               (boundaries (leftmost-unit ?article)
                           (rightmost-unit ?rightmost-noun-unit)))
              (?article
               (part-of-noun-phrase +))
              <-
              (?article 
               --
               (syn-cat (lex-class article)
                        (case ?case)))
              (?noun
               (referent (?x))
               (syn-cat (lex-class noun)
                        (case ?case))
                 
               --
               (syn-cat (lex-class noun)
                        (case ?case))
               (boundaries (leftmost-unit ?leftmost-noun-unit)
                           (rightmost-unit ?rightmost-noun-unit)))
              (?noun-phrase
               --
               (HASH form ((meets ?article ?leftmost-noun-unit)))
              )))



(def-fcg-cxn prep-phrase-cxn
             ((?prep-phrase-unit
               (referent (?x))
               (syn-cat (lex-class prep-phrase)
                        (case ?case))
               (constituents (?preposition-unit ?noun-phrase-unit))
               (boundaries (leftmost-unit ?preposition-unit)
                           (rightmost-unit ?rightmost-noun-phrase-unit)))
              (?preposition-unit
               (part-of-prep-phrase +))
              <-
              (?preposition-unit 
               --
               (syn-cat (lex-class preposition)
                        (case ?case)))
              
              (?noun-phrase-unit
               (referent (?x))
                --
              (syn-cat (lex-class noun-phrase)
                        (case ?case))
              (boundaries (leftmost-unit ?leftmost-noun-phrase-unit)
                          (rightmost-unit ?rightmost-noun-phrase-unit)))
              
              (?prep-phrase-unit
               --
               (HASH form ((meets ?preposition-unit ?leftmost-noun-phrase-unit)))
              )))



(def-fcg-cxn compound-dat-prep-phrase-cxn
             ((?compound-prep-phrase-unit
               (referent (?x))
               (syn-cat (lex-class compound-prep-phrase)
                        (case ?case))
               (constituents (?preposition-unit ?noun-unit))
               (boundaries (leftmost-unit ?preposition-unit)
                           (rightmost-unit ?rightmost-noun-unit)))
              (?preposition-unit
               (part-of-comp-prep-phrase +))
              <-
              (?preposition-unit
               --
               (syn-cat (lex-class comp-preposition)
                        (case ?case)))
              (?noun-unit
               (referent (?x))
               (syn-cat (lex-class noun)
                        (case ?case))
                 
               --
               (syn-cat (lex-class noun)
                        (case ?case))
               (boundaries (leftmost-unit ?leftmost-noun-unit)
                           (rightmost-unit ?rightmost-noun-unit)))
              (?compound-prep-phrase-unit
               --
               (HASH form ((meets ?preposition-unit ?leftmost-noun-unit)))
              )))



;;;;;;;VERBS

(def-fcg-cxn sucht-cxn
             ((?search-word                         
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?s)))  
                        
              <-
              (?search-word                           
               (HASH meaning ((suchen ?s)))                   
               --
               (HASH form ((string ?search-word  "sucht"))))))

(def-fcg-cxn verfolgt-cxn
             ((?follow-word                        
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?f)))  
                        
              <-
              (?follow-word                           
               (HASH meaning ((follow ?f)))                    
               --
               (HASH form ((string ?follow-word  "verfolgt"))))))


(def-fcg-cxn ruft-cxn
             ((?call-word                         
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?r)))  
                        
              <-
              (?call-word                           
               (HASH meaning ((call ?r)))                    
               --
               (HASH form ((string ?call-word  "ruft"))))))


(def-fcg-cxn tötet-cxn
             ((?kill-word                        
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?k)))  
                        
              <-
              (?kill-word                           
               (HASH meaning ((kill ?k)))                     
               --
               (HASH form ((string ?kill-word  "tötet"))))))


(def-fcg-cxn geht-cxn
             ((?go-word                        
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?g)))  
                        
              <-
              (?go-word                           
               (HASH meaning ((go ?g)))                    
               --
               (HASH form ((string ?go-word  "geht"))))))


(def-fcg-cxn ist-cxn
             ((?be-loc-word
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?i)))  
                        
              <-
              (?be-loc-word                           
               (HASH meaning ((locative-be ?i)))
               --
               (HASH form ((string ?be-loc-word  "ist"))))))

(def-fcg-cxn kommen-cxn
             ((?come-word                        
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?k)))  
                        
              <-
              (?come-word                           
               (HASH meaning ((come ?k)))                    
               --
               (HASH form ((string ?come-word  "kommt"))))))

(def-fcg-cxn spaziert-cxn
             ((?walk-word                         
               (syn-cat (lex-class verb)
                        (tense present))
               (referent (?w)))  
                        
              <-
              (?walk-word                           
               (HASH meaning ((walk ?w)))                    
               --
               (HASH form ((string ?walk-word  "spaziert"))))))

;;;;;;;;VERBAL cxns


(def-fcg-cxn transitive-cxn
             ((?transitive-unit
               (args (?subject-unit ?object-unit))
               (sem-cat (sem-class action))
               (syn-cat (lex-class verb)
                        (type transitive))
              (constituents (?verb-unit ?subject-unit ?object-unit)))
              <-
              (?verb-unit
                --
              (syn-cat (lex-class verb)
                       (tense ?tense))     
              (referent (?v)))
              
              (?subject-unit
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (?acc - - - -)         
                               (?gen - - - -)        
                               (?dat - - - -))))
              (referent (?subject))
              (boundaries (leftmost-unit ?leftmost-subject-unit)
                          (rightmost-unit ?rightmost-subject-unit)))
              
              (?object-unit
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((?nom - - - -) 
                               (+ ?am ?af ?an ?ap)         
                               (?gen - - - -)         
                               (?dat - - - -))))
              (referent (?object))
              (boundaries (leftmost-unit ?leftmost-object-unit)
                          (rightmost-unit ?rightmost-object-unit)))
              
              (?transitive-unit
               (HASH meaning ((nom ?v ?subject)
                              (acc ?v ?object)))                  
               --
               (HASH form ((meets ?rightmost-subject-unit ?verb-unit)
                           (meets ?verb-unit ?leftmost-object-unit))
               ))))


(def-fcg-cxn topicalized-transitive-cxn
             ((?transitive-unit
               (args (?subject-unit ?object-unit))
               (sem-cat (sem-class action))
               (syn-cat (lex-class verb)
                        (type transitive))
              (constituents (?verb-unit ?subject-unit ?object-unit)))
              <-
              (?verb-unit
                --
              (syn-cat (lex-class verb)
                       (tense ?tense))     
              (referent (?v)))
              
              (?subject-unit
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)         
                               (- - - - -))))
              (referent (?subject))
              (boundaries (leftmost-unit ?leftmost-subject-unit)
                          (rightmost-unit ?rightmost-subject-unit)))
              
              (?object-unit
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((?nom - - - -) 
                               (+ ?am ?af ?an ?ap)         
                               (?gen - - - -)         
                               (?dat - - - -))))
              (referent (?object))
              (boundaries (leftmost-unit ?leftmost-object-unit)
                          (rightmost-unit ?rightmost-object-unit)))
              
              (?transitive-unit
               (HASH meaning ((nom ?v ?subject)
                              (acc ?v ?object)))                  
               --
               (HASH form ((meets ?rightmost-object-unit ?verb-unit)
                           (meets ?verb-unit ?leftmost-subject-unit))
               ))))




;;;; transitive sentences EXAMPLES

;Der Polizist sucht den Bäcker.
;Der König ruft den Kellner. 
;Der Tiger tötet den Jäger.
;Der Hund verfolgt den Mann.


(def-fcg-cxn intransitive-dat-cxn
             ((?intransitive-unit
               (args (?subject-unit ?indirect-object-unit))
               (sem-cat (sem-class action))
               (syn-cat (lex-class verb)
                        (type intransitive))
              (constituents (?verb-unit ?subject-unit ?indirect-object-unit)))
              <-
              (?verb-unit
                --
              (syn-cat (lex-class verb)
                       (tense ?tense))     
              (referent (?v)))
              
              (?subject-unit
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (?acc - - - -)         
                               (?gen - - - -)         
                               (?dat - - - -))))
              (referent (?subject))
              (boundaries (leftmost-unit ?leftmost-subject-unit)
                          (rightmost-unit ?rightmost-subject-unit)))
              
              (?indirect-object-unit
                --
              (syn-cat ;(lex-class compound-prep-phrase)
                        (case ((?nom - - - -) 
                               (?acc - - - -)         
                               (?gen - - - -)         
                               (+ ?dm ?df ?dn ?dp))))
              (referent (?indirect-object))
              (boundaries (leftmost-unit ?leftmost-indirect-object-unit)
                          (rightmost-unit ?rightmost-indirect-object-unit)))
              
              (?intransitive-unit
               (HASH meaning ((nom ?v ?subject)
                              (dat ?v ?indirect-object)))                  
               --
               (HASH form ((meets ?rightmost-subject-unit ?verb-unit)
                           (meets ?verb-unit ?leftmost-indirect-object-unit))
               ))))

(def-fcg-cxn intransitive-acc-cxn
             ((?intransitive-unit
               (args (?subject-unit ?indirect-object-unit))
               (sem-cat (sem-class action))
               (syn-cat (lex-class verb)
                        (type intransitive))
              (constituents (?verb-unit ?subject-unit ?indirect-object-unit)))
              <-
              (?verb-unit
                --
              (syn-cat (lex-class verb)
                       (tense ?tense))     
              (referent (?v)))
              
              (?subject-unit
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (?acc - - - -)         
                               (?gen - - - -)         
                               (?dat - - - -))))
              (referent (?subject))
              (boundaries (leftmost-unit ?leftmost-subject-unit)
                          (rightmost-unit ?rightmost-subject-unit)))
              
              (?indirect-object-unit
                --
              (syn-cat ;(lex-class compound-prep-phrase)
                        (case ((?nom - - - -) 
                               (?acc ?am ?af ?an ?ap)         
                               (?gen - - - -)         
                               (?dat - - - -))))
              (referent (?indirect-object))
              (boundaries (leftmost-unit ?leftmost-indirect-object-unit)
                          (rightmost-unit ?rightmost-indirect-object-unit)))
              
              (?intransitive-unit
               (HASH meaning ((nom ?v ?subject)
                              (dat ?v ?indirect-object)))                  
               --
               (HASH form ((meets ?rightmost-subject-unit ?verb-unit)
                           (meets ?verb-unit ?leftmost-indirect-object-unit))
               ))))


;;;INTRANSITIVE (prepositional object) sentences EXAMPLES

;Der Junge geht zum Arzt.
;Die Frau ist beim Bäcker.
;
;Das Mädchen kommt aus dem Laden.






;;;;;DOUBLE-OBJECT sentences EXAMPLES (ACCUSATIVE DATIVE)

;Der Vater zeigt dem Sohn die Brille.
;Die Frau gibt dem Mann den Apfel.
;Der Doktor verkauft dem Clown das Buch. 
;Die Lehrerin schenkt dem Direktor die Blumen.



;;;;ACC. OBJECT (WITH PREPOSITION)
;Die Mutter geht ohne der Junge zum Laden.
;Der Mann spaziert durch der Park.


;;;; COMPOSITE VERBAL FORMS 
;Der Mann ist gegen den Baum gefahren.
;Die Königin hat für den König Blume mitgebracht.



;;;; COMPREHENSION
;(comprehend-all "den Bäcker sucht der Polizist")
;(comprehend-all "der Polizist sucht den Bäcker")



;;;; FORMULATION
;(formulate-all '((Mann ?x)))










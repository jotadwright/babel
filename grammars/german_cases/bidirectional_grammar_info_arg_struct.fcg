 
(def-fcg-constructions german-case-grammar
  :feature-types ((args sequence)
                  (form set-of-predicates)
                  (meaning set-of-predicates)
                  (constituents sequence)
                  (dependents sequence)
                  (footprints set)
                  (case sequence))
  :hierarchy-features (constituents dependents)
  :fcg-configurations ((:max-nr-of-nodes . 10000)
                       (:parse-goal-tests :no-strings-in-root :connected-structure :no-applicable-cxns)
                       (:production-goal-tests
                        :no-applicable-cxns :connected-structure
                        :no-meaning-in-root)))


(def-fcg-cxn der-cxn
             ((?the-word
               (footprints (article))) 
             <-
              (?the-word
               (footprints (not article))
               (syn-cat (lex-class article)
                        (case ((?nm ?nm - - -)    ;nom, acc, gen, dat  (nom masculine)
                               (- - - - -)        ;masc, fem, neut, plural
                               (?gen - ?gf - ?gp)    ;genitive feminine
                               (?df - ?df - -)      ;sing, masc, fem, neut, plural
                               (?s ?nm ?f - ?gp))))   ;sing, masc, fem, neut, plural
               
               --
               (HASH form ((string ?the-word "der")))))
             :disable-automatic-footprints t)

(def-fcg-cxn dem-cxn
             ((?the-word
               (footprints (article))) 
             <-
              (?the-word
               (footprints (not article))
               (syn-cat (lex-class article)
                        (case ((- - - - -)    ;nom, acc, gen, dat  (nom masculine)
                               (- - - - -)        ;masc, fem, neut, plural
                               (- - - - -)    ;genitive feminine
                               (+ ?dm - ?dn -)      ;sing, masc, fem, neut, plural
                               (+ ?dm - ?dn -))))   ;sing, masc, fem, neut, plural
               
               --
               (HASH form ((string ?the-word "dem")))))
             :disable-automatic-footprints t)


(def-fcg-cxn die-cxn
             ((?the-word
               (footprints (article))) 
             <-
              (?the-word
               (footprints (not article))
               (syn-cat (lex-class article)
                        (case ((?nom - ?nf - ?np)    ;nom, acc, gen, dat  (nom masculine)
                               (?acc - ?af - ?ap)        ;masc, fem, neut, plural
                               (- - - - -)    ;genitive feminine
                               (- - - - -)
                               (?s - ?f - ?p))))   ;sing, masc, fem, neut, plural
               
               --
               (HASH form ((string ?the-word "die")))))
             :disable-automatic-footprints t)


(def-fcg-cxn den-cxn
             ((?the-word
               (footprints (article))) 
             <-
              (?the-word
               (footprints (not article))
               (syn-cat (lex-class article)
                        (case ((- - - - -)        
                               (?am ?am - - -)        
                               (- - - - -)          
                               (?dp - - - ?dp)
                               (?am ?am - - ?dp))))   ;sing, masc, fem, neut, plural
               
               --
               (HASH form ((string ?the-word "den")))))
             :disable-automatic-footprints t)


(def-fcg-cxn das-cxn
             ((?the-word
               (footprints (article))) 
             <-
              (?the-word
               (footprints (not article))
               (syn-cat (lex-class article)
                        (case ((?nn - - ?nn -)    ;nom, acc, gen, dat  (nom masculine)
                               (?an - - ?an -)        ;masc, fem, neut, plural
                               (- - - - -)    ;genitive feminine
                               (- - - - -)
                               (+ - - + -))))   ;sing, masc, fem, neut, plural
               
               --
               (HASH form ((string ?the-word "das")))))
             :disable-automatic-footprints t)


(def-fcg-cxn zur-cxn
             (<-
              (?to-word
               (syn-cat (lex-class contracted-preposition) 
                        (case ((- - - - -)    ;nom, acc, gen, dat  (nom masculine)
                               (- - - - -)        ;masc, fem, neut, plural
                               (- - - - -)    ;genitive feminine
                               (+ - ?df - -)
                               (+ - ?df - -))))
               --
               (HASH form ((string ?to-word "zur"))))))


(def-fcg-cxn zum-cxn
             (<-
              (?to-word
               (syn-cat (lex-class contracted-preposition) 
                        (case ((- - - - -)    ;nom, acc, gen, dat  (nom masculine)
                               (- - - - -)        ;masc, fem, neut, plural
                               (- - - - -)    ;genitive feminine
                               (+ ?dm - ?dn -)
                               (+ ?dm - ?dn -))))
               --
               (HASH form ((string ?to-word "zum"))))))

(def-fcg-cxn gegen-cxn
             (<-
              (?against-word
               (syn-cat (lex-class preposition)
                        (preposition +)
                        (case ((- - - - -)      
                               (?acc ?am ?af ?an ?ap)        
                               (- - - - -)      
                               (- - - - -)
                               (?as ?am ?af ?an ?ap))))
               --
               (HASH form ((string ?against-word "gegen"))))))

(def-fcg-cxn für-cxn
             (<-
              (?for-word
               (syn-cat (lex-class preposition)
                        (preposition +)
                        (case ((- - - - -)      
                               (?acc ?am ?af ?an ?ap)        
                               (- - - - -)      
                               (- - - - -)
                               (?as ?am ?af ?an ?ap))))
               --
               (HASH form ((string ?for-word "für"))))))

(def-fcg-cxn mit-cxn
             (<-
              (?with-word
               (syn-cat (lex-class preposition)
                        (preposition +)
                        (case ((- - - - -)      
                               (- - - - -)        
                               (- - - - -)      
                               (?dat ?dm ?df ?dn ?dp)
                               (?s ?dm ?df ?dn ?dp))))
               --
               (HASH form ((string ?with-word "mit"))))))


(def-fcg-cxn aus-cxn
             (<-
              (?from-word
               (syn-cat (lex-class preposition)
                        (preposition +)
                        (case ((- - - - -)      
                               (- - - - -)        
                               (- - - - -)      
                               (?dat ?dm ?df ?dn ?dp)
                               (?s ?dm ?df ?dn ?dp))))
               --
               (HASH form ((string ?from-word "aus"))))))


(def-fcg-cxn Blumen-cxn
             ((?flowers-word
               (referent ?x)                             ;set of values
               (syn-cat (lex-class noun)                   ;sure nominative and masculine
                        (case ((?np - - - ?np)     
                               (?ap - - - ?ap)      
                               (?gp - - - ?gp)       
                               (?dp - - - ?dp)
                               (- - - - +)))))
              <-
              (?flowers-word
               (HASH meaning ((flowers ?x)))                     
               --
               (HASH form ((string ?flowers-word  "Blumen"))))))

(def-fcg-cxn Arbeit-cxn
             ((?work-word                        
               (referent ?x)
               (syn-cat (lex-class noun)
                        (case ((?nf - ?nf - -)     
                               (?af - ?af - -)      
                               (?gf - ?gf - -)       
                               (?df - ?df - -)
                               (+ - + - -)))))  
              <-
              (?work-word
               (HASH meaning ((work ?x)))                     
               --
               (HASH form ((string ?work-word  "Arbeit"))))))

(def-fcg-cxn Mann-cxn
             ((?man-word
               (referent ?x)                  
               (syn-cat (lex-class noun)         
                        (case ((?nm ?nm - - -)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -)
                               (+ + - - -)))))
              <-
              (?man-word
               (HASH meaning ((man ?x)))                     
               --
               (HASH form ((string ?man-word  "Mann"))))))

(def-fcg-cxn Fahrrad-cxn
             ((?bike-word                        
               (referent ?x)
               (syn-cat (lex-class noun)
                        (case ((?nn - - ?nn -)     
                               (?an - - ?an -)      
                               (- - - - -)       
                               (?dn - - ?dn -)
                               (+ - - + -)))))
              <-
              (?bike-word                            
               (HASH meaning ((bike ?x)))                
               --
               (HASH form ((string ?bike-word  "Fahrrad"))))))


(def-fcg-cxn Shop-cxn
             ((?shop-word                        
               (referent ?x)
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -)
                               (?s + - - ?np)))))
              <-
              (?shop-word                            
               (HASH meaning ((shop ?x)))                
               --
               (HASH form ((string ?shop-word  "Shop"))))))


(def-fcg-cxn Bäcker-cxn
             ((?baker-word                      
               (referent (?x))
               (syn-cat (lex-class noun)
                        (case ((?nom ?nm - - ?np)    
                               (?acc ?am - - ?ap)     
                               (?pg - - - ?pg)       
                               (?dm ?dm - - -)
                               (?s + - - ?p)))))
              <-
              (?baker-word                           
               (HASH meaning ((baker ?x)))              
               --
               (HASH form ((string ?baker-word  "Bäcker"))))))



(def-fcg-cxn Clown-cxn
             ((?clown-word                        
               (referent ?x)
               (syn-cat (lex-class noun)
                        (case ((?nm ?nm - - -)     
                               (?am ?am - - -)      
                               (- - - - -)       
                               (?dm ?dm - - -)
                               (+ + - - -)))))
              <-
              (?clown-word                            
               (HASH meaning ((clown ?x)))                    
               --
               (HASH form ((string ?clown-word  "Clown"))))))

(def-fcg-cxn noun-phrase-cxn
             ((?noun-phrase
               (referent ?x)
               (syn-cat (lex-class noun-phrase)
                        (case ?case))
               (constituents (?article ?noun))
               (boundaries (leftmost-unit ?article)
                           (rightmost-unit ?noun)))
              (?article
               (referent ?x)
               (part-of-noun-phrase +))

              (?noun
               (footprints (determined)))
              <-
              (?article
               
               
               --
               (syn-cat (lex-class article)
                        (case ?case)))
              (?noun
               (footprints (not determined))
               (referent ?x)
               (syn-cat (lex-class noun)
                        (case ?case))
                 
               --
               (footprints (not determined))
               (syn-cat (lex-class noun)
                        (case ?case)))
              (?noun-phrase
               --
               (HASH form ((meets ?article ?noun)))
              ))
             :disable-automatic-footprints t)


(def-fcg-cxn contracted-prep-phrase-cxn
             ((?contracted-prep-phrase
               (referent ?x)
               (syn-cat (lex-class prep-phrase)
                        (case ?case))
               (constituents (?contracted-prep ?noun))
               (boundaries (leftmost-unit ?contracted-prep)
                           (rightmost-unit ?noun)))
              (?contracted-prep
               (part-of-prep-phrase +)
               (referent ?x))
              (?noun
               (footprints (determined)))
              <-
              (?contracted-prep
               --
               (syn-cat (lex-class contracted-preposition)
                        (case ?case)))
              (?noun
               (footprints (not determined))
               (referent ?x)
               (syn-cat (lex-class noun)
                        (case ?case))
                 
               --
               (footprints (not determined))
               (syn-cat (lex-class noun)
                        (case ?case)))
              (?contracted-prep-phrase
               --
               (HASH form ((meets ?contracted-prep ?noun)))
              ))
             :disable-automatic-footprints t)

;(comprehend "zum Mann")
;(formulate-all '((bike x)))


(def-fcg-cxn prep-phrase-cxn
             ((?prep-phrase
               (referent ?x)
               (syn-cat (lex-class prep-phrase)
                        (case ?case))
               (constituents (?preposition ?noun-phrase))
               (boundaries (leftmost-unit ?preposition)
                           (rightmost-unit ?rightmost-noun-phrase)))
              (?preposition
               (part-of-prep-phrase +)
               (referent ?x))
              (?noun-phrase
               (footprints (determined)))
              <-
              (?preposition
               --
               (syn-cat (lex-class preposition)
                        (case ?case)))
              (?noun-phrase
               (footprints (not determined))
               (referent ?x)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ?case))
              (boundaries (leftmost-unit ?leftmost-noun-phrase)
                          (rightmost-unit ?rightmost-noun-phrase)))
              
              (?prep-phrase
               --
               (HASH form ((meets ?preposition ?leftmost-noun-phrase)))
              ))
             :disable-automatic-footprints t)


(def-fcg-cxn kommt-cxn
             ((?come-word                         
               (syn-cat (lex-class verb)
                        (aspect non-perfect)
                        (type intransitive))
               (referent ?k))  
                        
              <-
              (?come-word                           
               (HASH meaning ((kommen-01 ?k)))                   
               --
               (HASH form ((string ?come-word  "kommt"))))))

(def-fcg-cxn geht-cxn
             ((?go-word                         
               (syn-cat (lex-class verb)
                        (aspect non-perfect)
                        (type intransitive))
               (referent ?g))  
                        
              <-
              (?go-word                           
               (HASH meaning ((gehen-01 ?g)))                   
               --
               (HASH form ((string ?go-word  "geht"))))))

(def-fcg-cxn sucht-cxn
             ((?search-word                         
               (syn-cat (lex-class verb)
                        (aspect non-perfect)
                        (type transitive))
               (referent ?s))  
                        
              <-
              (?search-word                           
               (HASH meaning ((suchen-01 ?s)))                   
               --
               (HASH form ((string ?search-word  "sucht"))))))

(def-fcg-cxn schenkt-cxn
             ((?gift-word
               (syn-cat (lex-class verb)
                        (aspect non-perfect)
                        (type ditransitive))
               (referent ?g))  
                        
              <-
              (?gift-word                           
               (HASH meaning ((schenken-01 ?g)))
               --
               (HASH form ((string ?gift-word  "schenkt"))))))


(def-fcg-cxn ist-gefahren-cxn
             ((?drove-word
               (constituents (?aux-unit ?participle-unit))
               (syn-cat (lex-class verb)
                        (aspect perfect)
                        (type intransitive))
               (boundaries (leftmost-unit ?aux-unit)
                           (rightmost-unit ?participle-unit))
               (referent ?ig))
            
              <-

              (?aux-unit
               --
               (HASH form ((string ?aux-unit "ist"))))

              (?participle-unit
               --
               (HASH form ((string ?participle-unit "gefahren"))))

              (?drove-word                           
               (HASH meaning ((drove-01 ?ig)))                    
               --
               )))

(def-fcg-cxn hat-mitgebracht-cxn
             ((?brought-word
               (constituents (?aux-unit ?participle-unit))
               (syn-cat (lex-class verb)
                        (aspect perfect)
                        (type ditransitive))
               (boundaries (leftmost-unit ?aux-unit)
                           (rightmost-unit ?participle-unit))
               (referent ?hm))
            
              <-

              (?aux-unit
               --
               (HASH form ((string ?aux-unit "hat"))))

              (?participle-unit
               --
               (HASH form ((string ?participle-unit "mitgebracht"))))

              (?brought-word                           
               (HASH meaning ((brought-01 ?hm)))                    
               --
               )))

(def-fcg-cxn transitive-argument-structure-cxn                 
             ((?transitive-argument-structure-unit
              (constituents (?verb-unit ?agent-unit ?patient-unit)))
              <-
              (?verb-unit
               (syn-cat (lex-class verb)
                        (aspect ?aspect)
                        (type transitive))
               (referent ?v)
                --
              (syn-cat (lex-class verb)
                        (aspect ?aspect)
                        (type transitive))     
              (referent ?v))
              
              (?agent-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?s ?nm ?nf ?nn ?np))))
               (referent ?arg0)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?s ?nm ?nf ?nn ?np))))
              (referent ?arg0)
              )
              
              (?patient-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((- - - - -) 
                               (+ ?am ?af ?an ?ap)         
                               (- - - - -)         
                               (- - - - -)
                               (?s ?am ?af ?an ?ap))))
               (referent ?arg1)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((- - - - -) 
                               (+ ?am ?af ?an ?ap)         
                               (- - - - -)         
                               (- - - - -)
                               (?s ?am ?af ?an ?ap))))
              (referent ?arg1)
              )
              
              (?transitive-argument-structure-unit
               (HASH meaning ((:arg0 ?v ?arg0)
                              (:arg1 ?v ?arg1)))                  
               --
               )))


(def-fcg-cxn topicalized-transitive-information-structure-cxn
             ((?topicalized-transitive-information-structure-unit
               (constituents (?verb-unit ?agent-unit ?patient-unit)))
              (?arg-and-info-struct-unit
               (constituents (?topicalized-transitive-information-structure-unit ?argument-structure-unit)))
              <-
              
              (?argument-structure-unit
               (constituents (?verb-unit ?agent-unit ?patient-unit))
                --
                (constituents (?verb-unit ?agent-unit ?patient-unit))
              )
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type transitive)
                       (aspect ?aspect))     
              (referent ?v)
                --
              (syn-cat (lex-class verb)
                       (type transitive)
                       (aspect ?aspect))     
              (referent ?v))
              
              (?agent-unit
               (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit))
                --
              (referent ?arg0)
              (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit)))
              
              (?patient-unit
               (boundaries (leftmost-unit ?leftmost-patient-unit)
                          (rightmost-unit ?rightmost-patient-unit))
                --
              
              (referent ?arg1)
              (boundaries (leftmost-unit ?leftmost-patient-unit)
                          (rightmost-unit ?rightmost-patient-unit)))
              
              (?topicalized-transitive-information-structure-unit
               (HASH meaning ((topicalized ?arg1 +)))                  
               --
               (HASH form ((meets ?rightmost-patient-unit ?verb-unit)
                           (meets ?verb-unit ?leftmost-agent-unit)))
               )))


;(formulate-all '((suchen-01 s) (man m) (clown c) (arg0 s m) (arg1 s c)))
;(formulate-all '((suchen-01 s) (man m) (clown c) (arg0 s m) (arg1 s c) (topicalized c +)))





;der Mann schenkt dem Clown die Blumen 
(def-fcg-cxn ditransitive-argument-structure-cxn
             ((?ditransitive-argument-structure-unit
              (constituents (?verb-unit ?agent-unit ?patient-unit ?receiver-unit)))
              (?agent-unit
               (syn-cat (syn-role subject)))
              (?patient-unit
               (syn-cat (syn-role direct-object)))
              (?receiver-unit
               (syn-cat (syn-role indirect-object)))
              <-
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type ditransitive))
               (referent ?v)
                --
              (syn-cat (lex-class verb)
                       (type ditransitive))     
              (referent ?v))
              
              (?agent-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
               (referent ?arg0)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
              (referent ?arg0))
              
              (?patient-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((- - - - -) 
                               (+ ?am ?af ?an ?ap)         
                               (- - - - -)         
                               (- - - - -)
                               (?ps ?am ?af ?an ?ap))))
               (referent ?arg1)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((- - - - -) 
                               (+ ?am ?af ?an ?ap)         
                               (- - - - -)         
                               (- - - - -)
                               (?ps ?am ?af ?an ?ap))))
              (referent ?arg1)
              )
              (?receiver-unit
               (syn-cat 
                        (case ?case))
               (referent ?arg2)
                --
              (syn-cat 
                        (case ?case))
              (referent ?arg2))
              
              (?ditransitive-argument-structure-unit
               (HASH meaning ((:arg0 ?v ?arg0)
                              (:arg1 ?v ?arg1)
                              (:arg2 ?v ?arg2)))                  
               --
               )))


(def-fcg-cxn topicalized-ditransitive-information-structure-cxn
              ((?topicalized-ditransitive-information-structure-unit
               (constituents (?verb-unit ?agent-unit ?patient-unit ?receiver-unit)))
              (?arg-and-info-struct-unit
               (constituents (?topicalized-ditransitive-information-structure-unit ?argument-structure-unit)))
              <-
              
              (?argument-structure-unit
               (constituents (?verb-unit ?agent-unit ?patient-unit ?receiver-unit))
                --
                (constituents (?verb-unit ?agent-unit ?patient-unit ?receiver-unit)))
              
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type ditransitive))     
              
                --
              (syn-cat (lex-class verb)
                       (type ditransitive)))
              
              (?agent-unit
               (syn-cat (syn-role subject))
               (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit))
                --
              (syn-cat (syn-role subject))
              (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit)))
              
              (?patient-unit
               (syn-cat (syn-role direct-object))
               (boundaries (leftmost-unit ?leftmost-patient-unit)
                          (rightmost-unit ?rightmost-patient-unit))
                --
              
              (syn-cat (syn-role direct-object))
              (boundaries (leftmost-unit ?leftmost-patient-unit)
                          (rightmost-unit ?rightmost-patient-unit)))

              (?receiver-unit
               (syn-cat (syn-role indirect-object))
               (boundaries (leftmost-unit ?leftmost-receiver-unit)
                          (rightmost-unit ?rightmost-receiver-unit))
               (referent ?arg2)
               (HASH meaning ((topicalized ?arg2)))
                --
              (HASH form ((meets ?rightmost-receiver-unit ?verb-unit)
                           (meets ?verb-unit ?leftmost-agent-unit)
                           (meets ?rightmost-agent-unit ?leftmost-patient-unit)))
              (referent ?arg2)
              (syn-cat (syn-role indirect-object))
              (boundaries (leftmost-unit ?leftmost-receiver-unit)
                          (rightmost-unit ?rightmost-receiver-unit)))
              
              ))



;(formulate-all '((schenken-01 g) (man m) (arg0 g m) (clown c) (arg2 g c) (flowers f) (arg1 g f) (topicalized c)))

(formulate-all '((drove-01 ig) (man m) (arg0 g m) (clown c) (arg2 g c) (flowers f) (arg1 g f) (topicalized c)))


;der Mann geht zur Arbeit
(def-fcg-cxn intransitive-argument-structure-cxn
             ((?intransitive-argument-structure-unit
              (constituents (?verb-unit ?agent-unit ?location-unit)))
              (?agent-unit
               (syn-cat (syn-role subject)))
              (?location-unit
               (syn-cat (syn-role complement)))
              <-
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type intransitive))
               (referent ?v)
                --
              (syn-cat (lex-class verb)
                       (type intransitive))     
              (referent ?v))
              
              (?agent-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
               (referent ?arg0)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
              (referent ?arg0))
              
         
              (?location-unit
               (syn-cat (lex-class prep-phrase)
                        (case ?case))
               (referent ?arg1)
                --
              (syn-cat (lex-class prep-phrase)
                        (case ?case))
              (referent ?arg1))
              
              (?intransitive-argument-structure-unit
               (HASH meaning ((:arg0 ?v ?arg0)
                              (:arg1 ?v ?arg1)))                  
               --
               )))

(def-fcg-cxn intransitive-information-structure-cxn
             ((?intransitive-information-structure-unit
               (constituents (?verb-unit ?agent-unit ?location-unit)))
              (?arg-and-info-struct-unit
               (constituents (?intransitive-information-structure-unit ?argument-structure-unit)))
              <-
              (?argument-structure-unit
               (constituents (?verb-unit ?agent-unit ?location-unit))
                --
                (constituents (?verb-unit ?agent-unit ?location-unit))
              )
              
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type intransitive)
                       (aspect ?aspect))     
              
                --
              (syn-cat (lex-class verb)
                       (type intransitive)
                       (aspect ?aspect)))
              
              (?agent-unit
               (syn-cat (syn-role subject))
               (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit))
                --
              (syn-cat (syn-role subject))
              (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit)))
              
              (?location-unit
               (syn-cat (syn-role complement))
               (boundaries (leftmost-unit ?leftmost-location-unit)
                          (rightmost-unit ?rightmost-location-unit))
                --
              
              (syn-cat (syn-role complement))
              (boundaries (leftmost-unit ?leftmost-location-unit)
                          (rightmost-unit ?rightmost-location-unit)))
              
              ))




;Der Mann ist gegen den Baum gefahren.


#|(def-fcg-cxn intransitive-acc-past-arg-structure-cxn
             ((?intransitive-acc-past-arg-structure-unit
              (constituents (?verb-unit ?agent-unit ?location-unit)))
              (?agent-unit
               (syn-cat (syn-role subject)))
              (?location-unit
               (syn-cat (syn-role complement)))
              <-
              (?verb-unit
               (syn-cat (lex-class verb)
                       (aspect perfect))
               (boundaries (leftmost-unit ?aux-unit)
                           (rightmost-unit ?participle-unit))
               (referent ?v)
                --
              (syn-cat (lex-class verb)
                       (aspect perfect))
              (boundaries (leftmost-unit ?aux-unit)
                           (rightmost-unit ?participle-unit))
              (referent ?v))
              
              (?agent-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
               (boundaries (leftmost-unit ?leftmost-agent-unit)
                           (rightmost-unit ?rightmost-agent-unit))
               (referent ?arg0)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
              (boundaries (leftmost-unit ?leftmost-agent-unit)
                           (rightmost-unit ?rightmost-agent-unit))
              (referent ?arg0))
              
         
              (?location-unit
               (syn-cat (lex-class prep-phrase)
                        (case ?case))
               (boundaries (leftmost-unit ?leftmost-loc-unit)
                           (rightmost-unit ?rightmost-loc-unit))
               (referent ?arg1)
                --
              (syn-cat (lex-class prep-phrase)
                        (case ?case))
              (boundaries (leftmost-unit ?leftmost-loc-unit)
                           (rightmost-unit ?rightmost-loc-unit))
              (referent ?arg1))
              
              (?intransitive-acc-past-arg-structure-unit
               (HASH meaning ((:arg0 ?v ?arg0)
                              (:arg1 ?v ?arg1)))                  
               --
               (HASH form ((meets ?rightmost-agent-unit ?aux-unit)
                           (meets ?aux-unit ?leftmost-loc-unit)
                           (meets ?rightmost-loc-unit ?participle-unit))
               )
               )))|#

;(formulate-all '((gehen-01 g) (man m) (arg0 g m) (arbeit a) (arg3 g a)))

;der Mann fährt mit der Wagen zur Arbeit


;;;;;;;BEFORE this cxns is applied, the intransitive-cxn applies (this double one has one more additional element)


#|(def-fcg-cxn double-intransitive-argument-structure-cxn                 
             ((?double-intransitive-argument-structure-unit
              (constituents (?verb-unit ?agent-unit ?medium-unit ?location-unit)))
              (?agent-unit
               (syn-cat (syn-role subject)))
              (?medium-unit
               (syn-cat (syn-role m-complement)))
              (?location-unit
               (syn-cat (syn-role l-complement)))
              <-
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type intransitive))
               (referent ?v)
                --
              (syn-cat (lex-class verb)
                       (type intransitive))     
              (referent ?v))
              
              (?agent-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
               (referent ?arg0)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
              (referent ?arg0))

              (?medium-unit
               (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)        
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ms ?dm ?df ?dn ?dp))))
               (referent ?arg2)
                --
              (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)        
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ms ?dm ?df ?dn ?dp))))
              (referent ?arg2))
              
         
              (?location-unit
               (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)        
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ls ?dm ?df ?dn ?dp))))
               (referent ?arg1)
                --
              (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)        
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ls ?dm ?df ?dn ?dp))))
              (referent ?arg1))
              
              (?double-intransitive-argument-structure-unit
               (HASH meaning ((:arg0 ?v ?arg0)
                              (:arg1 ?v ?arg1)
                              (:arg2 ?v ?arg2)))                  
               --
               )))


(def-fcg-cxn double-intransitive-information-structure-cxn
             ((?double-intransitive-information-structure-unit
               (constituents (?verb-unit ?agent-unit ?medium-unit ?location-unit)))
              (?arg-and-info-struct-unit
               (constituents (?double-intransitive-information-structure-unit ?argument-structure-unit)))
              <-
              (?argument-structure-unit
               (constituents (?verb-unit ?agent-unit ?medium-unit ?location-unit))
                --
                (constituents (?verb-unit ?agent-unit ?medium-unit ?location-unit))
              )
              
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type intransitive)
                       (aspect ?aspect))     
              
                --
              (syn-cat (lex-class verb)
                       (type intransitive)
                       (aspect ?aspect)))
              
              (?agent-unit
               (syn-cat (syn-role subject))
               (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit))
                --
              (syn-cat (syn-role subject))
              (boundaries (leftmost-unit ?leftmost-agent-unit)
                          (rightmost-unit ?rightmost-agent-unit)))

              (?medium-unit
               (syn-cat (syn-role complement))
               (boundaries (leftmost-unit ?leftmost-medium-unit)
                          (rightmost-unit ?rightmost-medium-unit))
                --
              (syn-cat (syn-role complement))
              (boundaries (leftmost-unit ?leftmost-medium-unit)
                          (rightmost-unit ?rightmost-medium-unit)))
              
              (?location-unit
               (syn-cat (syn-role complement))
               (boundaries (leftmost-unit ?leftmost-location-unit)
                          (rightmost-unit ?rightmost-location-unit))
                --
              
              (syn-cat (syn-role complement))
              (boundaries (leftmost-unit ?leftmost-location-unit)
                          (rightmost-unit ?rightmost-location-unit)))
              
              ))|#
;;; DOESNT GET APPLIED BUT THE INTRANSITIVE ARG STRUCTURE WITH ONE LESS UNIT DOES 

(def-fcg-cxn diintransitive-argument-structure-cxn
             ((?diintransitive-argument-structure-unit
              (constituents (?verb-unit ?agent-unit ?medium-unit ?location-unit)))
              (?agent-unit
               (syn-cat (syn-role subject)))
              (?medium-unit
               (syn-cat (syn-role medium-complement)))
              (?location-unit
               (syn-cat (syn-role location-complement)))
              <-
              (?verb-unit
               (syn-cat (lex-class verb)
                       (type intransitive))
               (referent ?v)
                --
              (syn-cat (lex-class verb)
                       (type intransitive))     
              (referent ?v))
              
              (?agent-unit
               (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
               (referent ?arg0)
                --
              (syn-cat (lex-class noun-phrase)
                        (case ((+ ?nm ?nf ?nn ?np) 
                               (- - - - -)         
                               (- - - - -)        
                               (- - - - -)
                               (?as ?nm ?nf ?nn ?np))))
              (referent ?arg0))
              
              (?medium-unit
               (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)         
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ms ?dm ?df ?dn ?dp))))
               (referent ?arg1)
                --
              (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)         
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ms ?dm ?df ?dn ?dp))))
              (referent ?arg1)
              )
              (?location-unit
               (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)        
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ls ?dm ?df ?dn ?dp))))
               (referent ?arg2)
                --
              (syn-cat (lex-class prep-phrase)
                        (case ((- - - - -) 
                               (- - - - -)        
                               (- - - - -)         
                               (+ ?dm ?df ?dn ?dp)
                               (?ls ?dm ?df ?dn ?dp))))
              (referent ?arg2))
              
              (?diintransitive-argument-structure-unit
               (HASH meaning ((:arg0 ?v ?arg0)
                              (:arg1 ?v ?arg1)
                              (:arg2 ?v ?arg2)))                  
               --
               )))


(formulate-all '((man x)))

;(formulate '((kommen-01 k) (man m) (arg0 k m) (shop s) (arg3 k s)))

;(formulate-all '((kommen-01 k) (man m) (arg0 k m) (shop s) (arg3 k s)))
